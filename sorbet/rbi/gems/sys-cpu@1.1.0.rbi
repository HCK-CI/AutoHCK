# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sys-cpu` gem.
# Please instead update this file by running `bin/tapioca gem sys-cpu`.


# The Sys module serves only as a namespace
#
# source://sys-cpu//lib/sys/cpu.rb#8
module Sys; end

# Encapsulates system CPU information
#
# source://sys-cpu//lib/sys/cpu.rb#11
class Sys::CPU
  class << self
    # Returns the +host+ CPU's architecture, or nil if it cannot be
    # determined.
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#81
    def architecture; end

    # Returns a hash of arrays that contains an array of the following
    # information (as of 2.6.33), respectively:
    #
    # * user: time spent in user mode.
    # * nice: time spent in user mode with low priority.
    # * system: time spent in system mode.
    # * idle: time spent in the idle task.
    # * iowait: time waiting for IO to complete.
    # * irq: time servicing interrupts.
    # * softirq: time servicing softirqs.
    # * steal: time spent in other operating systems when running in a virtualized environment.
    # * guest: time spent running a virtual CPU for guest operating systems.
    # * guest_nice: time spent running a niced guest, i.e a virtual CPU for guest operating systems.
    #
    # Note that older kernels may not necessarily include some of these fields.
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#152
    def cpu_stats; end

    # Returns an integer indicating the speed (i.e. frequency in Mhz) of
    # +cpu_num+ on +host+, or the localhost if no +host+ is specified.
    # If +cpu_num+ +1 is greater than the number of cpu's on your system
    # or this call fails for any other reason, a Error is raised.
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#106
    def freq; end

    # Returns the load capacity for +cpu_num+ on +host+, or the localhost
    # if no host is specified, averaged to the last second. Processor
    # loading refers to the total computing burden for each processor at
    # one time.
    #
    # Note that this attribute is actually the LoadPercentage.  I may use
    # one of the Win32_Perf* classes in the future.
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#131
    def load_avg; end

    # Returns a string indicating the cpu model, e.g. Intel Pentium 4.
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#100
    def model; end

    # Returns an integer indicating the number of cpu's on the system.
    # --
    # This (oddly) requires a different class.
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#75
    def num_cpu; end

    # Returns a CPUStruct for each CPU on +host+, or the localhost if no
    # +host+ is specified.  A CPUStruct contains the following members:
    #
    # * address_width
    # * architecture
    # * availability
    # * caption
    # * config_manager_error_code
    # * config_manager_user_config
    # * cpu_status
    # * creation_class_name
    # * freq
    # * voltage
    # * data_width
    # * description
    # * device_id
    # * error_cleared?
    # * error_description
    # * ext_clock
    # * family
    # * install_date
    # * l2_cache_size
    # * l2_cache_speed
    # * last_error_code
    # * level
    # * load_avg
    # * manufacturer
    # * max_clock_speed
    # * name
    # * other_family_description
    # * pnp_device_id
    # * power_management_supported?
    # * power_management_capabilities
    # * processor_id
    # * processor_type
    # * revision
    # * role
    # * socket_designation
    # * status
    # * status_info
    # * stepping
    # * system_creation_class_name
    # * system_name
    # * unique_id
    # * upgrade_method
    # * version
    # * voltage_caps
    #
    # Note that not all of these members will necessarily be defined.
    # --
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#59
    def processors; end

    # @return [Boolean]
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#122
    def respond_to_missing?(method, _private_methods = T.unsafe(nil)); end

    private

    # Create singleton methods for each of the attributes.
    #
    # @raise [NoMethodError]
    #
    # source://sys-cpu//lib/sys/linux/sys/cpu.rb#112
    def method_missing(id, arg = T.unsafe(nil)); end

    def new(*_arg0); end
  end
end

# The struct returned by the CPU.processors method
#
# source://sys-cpu//lib/sys/linux/sys/cpu.rb#48
Sys::CPU::CPUStruct = Struct

# The version of the sys-cpu gem.
#
# source://sys-cpu//lib/sys/cpu.rb#13
Sys::CPU::VERSION = T.let(T.unsafe(nil), String)

# source://sys-cpu//lib/sys/linux/sys/cpu.rb#13
Sys::CPU_ARRAY = T.let(T.unsafe(nil), Array)
