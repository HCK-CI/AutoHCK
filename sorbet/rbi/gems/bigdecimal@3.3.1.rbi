# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bigdecimal` gem.
# Please instead update this file by running `bin/tapioca gem bigdecimal`.


# source://bigdecimal//lib/bigdecimal.rb#13
class BigDecimal < ::Numeric
  # call-seq:
  #    self ** other -> bigdecimal
  #
  #  Returns the \BigDecimal value of +self+ raised to power +other+:
  #
  #    b = BigDecimal('3.14')
  #    b ** 2              # => 0.98596e1
  #    b ** 2.0            # => 0.98596e1
  #    b ** Rational(2, 1) # => 0.98596e1
  #
  #  Related: BigDecimal#power.
  #
  # source://bigdecimal//lib/bigdecimal.rb#77
  def **(y); end

  # call-seq:
  #   power(n)
  #   power(n, prec)
  #
  # Returns the value raised to the power of n.
  #
  # Also available as the operator **.
  #
  # source://bigdecimal//lib/bigdecimal.rb#97
  def power(y, prec = T.unsafe(nil)); end

  # Returns the square root of the value.
  #
  # Result has at least prec significant digits.
  #
  # @raise [FloatDomainError]
  #
  # source://bigdecimal//lib/bigdecimal.rb#211
  def sqrt(prec); end
end

# source://bigdecimal//lib/bigdecimal.rb#14
module BigDecimal::Internal
  class << self
    # Coerce x to BigDecimal with the specified precision.
    # TODO: some methods (example: BigMath.exp) require more precision than specified to coerce.
    #
    # @raise [ArgumentError]
    #
    # source://bigdecimal//lib/bigdecimal.rb#18
    def coerce_to_bigdecimal(x, prec, method_name); end

    # source://bigdecimal//lib/bigdecimal.rb#30
    def coerce_validate_prec(prec, method_name, accept_zero: T.unsafe(nil)); end

    # source://bigdecimal//lib/bigdecimal.rb#50
    def infinity_computation_result; end

    # source://bigdecimal//lib/bigdecimal.rb#57
    def nan_computation_result; end
  end
end

BigDecimal::VERSION = T.let(T.unsafe(nil), String)

# Core BigMath methods for BigDecimal (log, exp) are defined here.
# Other methods (sin, cos, atan) are defined in 'bigdecimal/math.rb'.
#
# source://bigdecimal//lib/bigdecimal.rb#237
module BigMath
  class << self
    # call-seq:
    #   BigMath.exp(decimal, numeric)    -> BigDecimal
    #
    # Computes the value of e (the base of natural logarithms) raised to the
    # power of +decimal+, to the specified number of digits of precision.
    #
    # If +decimal+ is infinity, returns Infinity.
    #
    # If +decimal+ is NaN, returns NaN.
    #
    # source://bigdecimal//lib/bigdecimal.rb#328
    def exp(x, prec); end

    # call-seq:
    #   BigMath.log(decimal, numeric)    -> BigDecimal
    #
    # Computes the natural logarithm of +decimal+ to the specified number of
    # digits of precision, +numeric+.
    #
    # If +decimal+ is zero or negative, raises Math::DomainError.
    #
    # If +decimal+ is positive infinity, returns Infinity.
    #
    # If +decimal+ is NaN, returns NaN.
    #
    # @raise [Math::DomainError]
    #
    # source://bigdecimal//lib/bigdecimal.rb#251
    def log(x, prec); end

    private

    # source://bigdecimal//lib/bigdecimal.rb#306
    def _exp_taylor(x, prec); end
  end
end
