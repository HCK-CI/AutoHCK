# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mono_logger` gem.
# Please instead update this file by running `bin/tapioca gem mono_logger`.

# == MonoLogger
# A subclass of Ruby's stdlib Logger with all the mutex and logrotation stuff
# ripped out.
#
# source://mono_logger//lib/mono_logger/version.rb#3
class MonoLogger < ::Logger
  # === Synopsis
  #
  #   MonoLogger.new(STDOUT)
  #   MonoLogger.new(filename)
  #
  # === Args
  #
  # +logdev+::
  #   The log device.  This is a filename (String) or IO object (typically
  #   +STDOUT+, +STDERR+, or an open file).
  # +shift_age+::
  #   ignored in MonoLogger
  # +shift_size+::
  #   ignored in MonoLogger
  #
  # === Description
  #
  # Create an instance.
  #
  # @return [MonoLogger] a new instance of MonoLogger
  #
  # source://mono_logger//lib/mono_logger.rb#30
  def initialize(logdev, shift_age = T.unsafe(nil), shift_size = T.unsafe(nil)); end
end

# source://mono_logger//lib/mono_logger.rb#39
class MonoLogger::LocklessLogDevice < ::Logger::LogDevice
  # @return [LocklessLogDevice] a new instance of LocklessLogDevice
  #
  # source://mono_logger//lib/mono_logger.rb#41
  def initialize(log = T.unsafe(nil)); end

  # source://mono_logger//lib/mono_logger.rb#58
  def close; end

  # source://mono_logger//lib/mono_logger.rb#52
  def write(message); end

  private

  # source://mono_logger//lib/mono_logger.rb#79
  def add_log_header(file); end

  # source://mono_logger//lib/mono_logger.rb#72
  def create_logfile(filename); end

  # source://mono_logger//lib/mono_logger.rb#64
  def open_logfile(filename); end
end

# source://mono_logger//lib/mono_logger/version.rb#4
MonoLogger::VERSION = T.let(T.unsafe(nil), String)
