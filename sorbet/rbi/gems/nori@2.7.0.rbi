# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `nori` gem.
# Please instead update this file by running `bin/tapioca gem nori`.

class Hash
  include ::Enumerable
  include ::Nori::CoreExt::Hash
end

# source://nori//lib/nori/version.rb#1
class Nori
  # @return [Nori] a new instance of Nori
  #
  # source://nori//lib/nori.rb#16
  def initialize(options = T.unsafe(nil)); end

  # source://nori//lib/nori.rb#33
  def find(hash, *path); end

  # source://nori//lib/nori.rb#43
  def parse(xml); end

  private

  # Expects a +block+ which receives a tag to convert.
  # Accepts +nil+ for a reset to the default behavior of not converting tags.
  #
  # source://nori//lib/nori.rb#59
  def convert_tags_to(reset = T.unsafe(nil), &block); end

  # source://nori//lib/nori.rb#72
  def find_value(hash, key); end

  # source://nori//lib/nori.rb#52
  def load_parser(parser); end

  # source://nori//lib/nori.rb#81
  def scrub_xml(string); end

  # source://nori//lib/nori.rb#63
  def validate_options!(available_options, options); end

  class << self
    # source://nori//lib/nori.rb#7
    def hash_key(name, options = T.unsafe(nil)); end
  end
end

# source://nori//lib/nori/core_ext/string.rb#2
module Nori::CoreExt; end

# source://nori//lib/nori/core_ext/hash.rb#5
module Nori::CoreExt::Hash
  # @example normalize_param(:name, "Bob Jones") #=> "name=Bob%20Jones"
  # @param key [Object] The key for the param.
  # @param value [Object] The value for the param.
  # @return [String] This key value pair as a param
  #
  # source://nori//lib/nori/core_ext/hash.rb#13
  def normalize_param(key, value); end

  # @example
  #   { :one => 1, "two"=>"TWO" }.to_xml_attributes
  #   #=> 'one="1" two="TWO"'
  # @return [String] The hash as attributes for an XML tag.
  #
  # source://nori//lib/nori/core_ext/hash.rb#28
  def to_xml_attributes; end

  private

  # source://nori//lib/nori/core_ext/hash.rb#52
  def encode_simple_value(value); end

  # source://nori//lib/nori/core_ext/hash.rb#40
  def normalize_array_params(key, array); end

  # source://nori//lib/nori/core_ext/hash.rb#46
  def normalize_hash_params(key, hash); end

  # source://nori//lib/nori/core_ext/hash.rb#36
  def normalize_simple_type_params(key, value); end
end

# source://nori//lib/nori/core_ext/string.rb#3
module Nori::CoreExt::String
  # Returns the String in snake_case.
  #
  # source://nori//lib/nori/core_ext/string.rb#6
  def snakecase; end
end

# source://nori//lib/nori.rb#14
Nori::PARSERS = T.let(T.unsafe(nil), Hash)

# source://nori//lib/nori/string_io_file.rb#2
class Nori::StringIOFile < ::StringIO
  # Returns the value of attribute content_type.
  #
  # source://nori//lib/nori/string_io_file.rb#4
  def content_type; end

  # Sets the attribute content_type
  #
  # @param value the value to set the attribute content_type to.
  #
  # source://nori//lib/nori/string_io_file.rb#4
  def content_type=(_arg0); end

  # Returns the value of attribute original_filename.
  #
  # source://nori//lib/nori/string_io_file.rb#4
  def original_filename; end

  # Sets the attribute original_filename
  #
  # @param value the value to set the attribute original_filename to.
  #
  # source://nori//lib/nori/string_io_file.rb#4
  def original_filename=(_arg0); end
end

# source://nori//lib/nori/string_with_attributes.rb#2
class Nori::StringWithAttributes < ::String
  # Returns the value of attribute attributes.
  #
  # source://nori//lib/nori/string_with_attributes.rb#4
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value the value to set the attribute attributes to.
  #
  # source://nori//lib/nori/string_with_attributes.rb#4
  def attributes=(_arg0); end
end

# source://nori//lib/nori/version.rb#2
Nori::VERSION = T.let(T.unsafe(nil), String)

# This is a slighly modified version of the XMLUtilityNode from
# http://merb.devjavu.com/projects/merb/ticket/95 (has.sox@gmail.com)
#
# John Nunemaker:
# It's mainly just adding vowels, as I ht cd wth n vwls :)
# This represents the hard part of the work, all I did was change the
# underlying parser.
#
# source://nori//lib/nori/xml_utility_node.rb#18
class Nori::XMLUtilityNode
  # @return [XMLUtilityNode] a new instance of XMLUtilityNode
  #
  # source://nori//lib/nori/xml_utility_node.rb#86
  def initialize(options, name, attributes = T.unsafe(nil)); end

  # source://nori//lib/nori/xml_utility_node.rb#125
  def add_node(node); end

  # source://nori//lib/nori/xml_utility_node.rb#214
  def advanced_typecasting(value); end

  # Returns the value of attribute attributes.
  #
  # source://nori//lib/nori/xml_utility_node.rb#111
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value the value to set the attribute attributes to.
  #
  # source://nori//lib/nori/xml_utility_node.rb#111
  def attributes=(_arg0); end

  # Returns the value of attribute children.
  #
  # source://nori//lib/nori/xml_utility_node.rb#111
  def children; end

  # Sets the attribute children
  #
  # @param value the value to set the attribute children to.
  #
  # source://nori//lib/nori/xml_utility_node.rb#111
  def children=(_arg0); end

  # Get the inner_html of the REXML node.
  #
  # source://nori//lib/nori/xml_utility_node.rb#237
  def inner_html; end

  # Returns the value of attribute name.
  #
  # source://nori//lib/nori/xml_utility_node.rb#111
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://nori//lib/nori/xml_utility_node.rb#111
  def name=(_arg0); end

  # source://nori//lib/nori/xml_utility_node.rb#120
  def prefixed_attribute_name(attribute); end

  # source://nori//lib/nori/xml_utility_node.rb#113
  def prefixed_attributes; end

  # source://nori//lib/nori/xml_utility_node.rb#130
  def to_hash; end

  # Converts the node into a readable HTML node.
  #
  # @return [String] The HTML node in text form.
  #
  # source://nori//lib/nori/xml_utility_node.rb#244
  def to_html; end

  # Converts the node into a readable HTML node.
  #
  # @return [String] The HTML node in text form.
  #
  # source://nori//lib/nori/xml_utility_node.rb#244
  def to_s; end

  # Returns the value of attribute type.
  #
  # source://nori//lib/nori/xml_utility_node.rb#111
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://nori//lib/nori/xml_utility_node.rb#111
  def type=(_arg0); end

  # Typecasts a value based upon its type. For instance, if
  # +node+ has #type == "integer",
  # {{[node.typecast_value("12") #=> 12]}}
  #
  # @note If +self+ does not have a "type" key, or if it's not one of the
  #   options specified above, the raw +value+ will be returned.
  # @param value [String] The value that is being typecast.
  # @return [Integer, TrueClass, FalseClass, Time, Date, Object] The result of typecasting +value+.
  #
  # source://nori//lib/nori/xml_utility_node.rb#208
  def typecast_value(value); end

  # Take keys of the form foo-bar and convert them to foo_bar
  #
  # source://nori//lib/nori/xml_utility_node.rb#229
  def undasherize_keys(params); end

  private

  # source://nori//lib/nori/xml_utility_node.rb#257
  def strip_namespace(string); end

  # source://nori//lib/nori/xml_utility_node.rb#251
  def try_to_convert(value, &block); end

  class << self
    # source://nori//lib/nori/xml_utility_node.rb#64
    def available_typecasts; end

    # source://nori//lib/nori/xml_utility_node.rb#68
    def available_typecasts=(obj); end

    # source://nori//lib/nori/xml_utility_node.rb#56
    def typecasts; end

    # source://nori//lib/nori/xml_utility_node.rb#60
    def typecasts=(obj); end
  end
end

# Simple xs:date Regexp.
# Valid xs:date formats
# 2004-04-12           April 12, 2004
# -0045-01-01          January 1, 45 BC
# 12004-04-12          April 12, 12004
# 2004-04-12-05:00     April 12, 2004, US Eastern Standard Time, which is 5 hours behind Coordinated Universal Time (UTC)
# 2004-04-12+02:00     April 12, 2004, Central European Summer Time, which is 2 hours ahead of Coordinated Universal Time (UTC)
# 2004-04-12Z          April 12, 2004, Coordinated Universal Time (UTC)
#
# source://nori//lib/nori/xml_utility_node.rb#42
Nori::XMLUtilityNode::XS_DATE = T.let(T.unsafe(nil), Regexp)

# Simple xs:dateTime Regexp.
# Valid xs:dateTime formats
# 2004-04-12T13:20:00           1:20 pm on April 12, 2004
# 2004-04-12T13:20:15.5         1:20 pm and 15.5 seconds on April 12, 2004
# 2004-04-12T13:20:00-05:00     1:20 pm on April 12, 2004, US Eastern Standard Time
# 2004-04-12T13:20:00+02:00     1:20 pm on April 12, 2004, Central European Summer Time
# 2004-04-12T13:20:15.5-05:00   1:20 pm and 15.5 seconds on April 12, 2004, US Eastern Standard Time
# 2004-04-12T13:20:00Z          1:20 pm on April 12, 2004, Coordinated Universal Time (UTC)
# 2004-04-12T13:20:15.5Z        1:20 pm and 15.5 seconds on April 12, 2004, Coordinated Universal Time (UTC)
#
# source://nori//lib/nori/xml_utility_node.rb#54
Nori::XMLUtilityNode::XS_DATE_TIME = T.let(T.unsafe(nil), Regexp)

# Simple xs:time Regexp.
# Valid xs:time formats
# 13:20:00          1:20 PM
# 13:20:30.5555     1:20 PM and 30.5555 seconds
# 13:20:00-05:00    1:20 PM, US Eastern Standard Time
# 13:20:00+02:00    1:20 PM, Central European Standard Time
# 13:20:00Z         1:20 PM, Coordinated Universal Time (UTC)
# 13:20:30.5555Z    1:20 PM and 30.5555 seconds, Coordinated Universal Time (UTC)
# 00:00:00          midnight
# 24:00:00          midnight
#
# source://nori//lib/nori/xml_utility_node.rb#31
Nori::XMLUtilityNode::XS_TIME = T.let(T.unsafe(nil), Regexp)

class String
  include ::Comparable
  include ::Nori::CoreExt::String
end
