# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rtoolsHCK` gem.
# Please instead update this file by running `bin/tapioca gem rtoolsHCK`.

# ether class
#
# source://rtoolsHCK//lib/ether.rb#10
class Ether
  # @return [Ether] a new instance of Ether
  #
  # source://rtoolsHCK//lib/ether.rb#11
  def initialize(init_opts); end

  # source://rtoolsHCK//lib/ether.rb#144
  def close; end

  # source://rtoolsHCK//lib/ether.rb#156
  def cmd(cmd, timeout = T.unsafe(nil)); end

  private

  # source://rtoolsHCK//lib/ether.rb#97
  def connect; end

  # source://rtoolsHCK//lib/ether.rb#121
  def fetch(length); end

  # source://rtoolsHCK//lib/ether.rb#106
  def fetch_output_with_timeout(timeout); end

  # source://rtoolsHCK//lib/ether.rb#175
  def flush; end

  # source://rtoolsHCK//lib/ether.rb#26
  def get_exception_stack(exception); end

  # source://rtoolsHCK//lib/ether.rb#78
  def load_ether; end

  # source://rtoolsHCK//lib/ether.rb#48
  def load_instance_variables(init_opts); end

  # source://rtoolsHCK//lib/ether.rb#72
  def load_server; end

  # source://rtoolsHCK//lib/ether.rb#31
  def log_exception(exception, level); end

  # source://rtoolsHCK//lib/ether.rb#43
  def logger(level, progname = T.unsafe(nil), &_arg2); end

  # source://rtoolsHCK//lib/ether.rb#59
  def server_init_opts; end

  # source://rtoolsHCK//lib/ether.rb#132
  def unload_server; end

  # source://rtoolsHCK//lib/ether.rb#85
  def wait_for_client_acceptance; end
end

# ether buffer size
#
# source://rtoolsHCK//lib/ether.rb#119
Ether::ETHER_BUFFER_SIZE = T.let(T.unsafe(nil), Integer)

# ether exit timeout
#
# source://rtoolsHCK//lib/ether.rb#140
Ether::ETHER_EXIT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# A custom Ether error exception
#
# source://rtoolsHCK//lib/exceptions.rb#28
class EtherError < ::RToolsHCKConnectionError; end

# rtoolsHCK version extend to class
#
# source://rtoolsHCK//lib/rtoolsHCK.rb#67
class RToolsHCK
  # == Description
  #
  # Initializes new object of type RToolsHCK to be used by establishing a
  # Telnet and a Tftp connection with the guest machine.
  #
  # == Params:
  #
  # +init_opts+::    Hash that has various initialize options to configure upon
  #                  initializing a RtoolsHCK object:
  #   :addr          - Controller machine's IP address
  #                    (default: 127.0.0.1)
  #   :user          - The user name to use in order to connect via winrm to the
  #                    guest
  #                    (default: Administrator)
  #   :pass          - The password of the user name specified
  #                    (default: PASSWORD)
  #   :port          - The port to be used for the connection
  #                    (default: 4000)
  #   :winrm_ports   - The clients winrm connection ports as a hash
  #                    (example: { 'Client' => port, ... })
  #                    (default: { 'Cl1' => 4001, 'Cl2' => 4002 }
  #   :json          - JSON format the output of the action methods
  #                    (default: true)
  #   :timeout       - The action's timeout in seconds
  #                    (default: 60)
  #   :log_to_stdout - Log to STDOUT switch
  #                    (default: false)
  #   :logger        - The ruby logger object for logging
  #                    (default: disabled)
  #   :outp_dir      - The path of the directory to fetch the output files to on
  #                    the local machine
  #                    (default: disabled)
  #   :l_script_file - The toolsHCK.ps1 file path on local machine
  #                    (default: disabled)
  #   :r_script_file - The toolsHCK.ps1 file path on remote machine
  #                    (default: C:\\toolsHCK.ps1)
  #
  # @return [RToolsHCK] a new instance of RToolsHCK
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#141
  def initialize(init_opts); end

  # == Description
  #
  # Applies the filters on a project's test results.
  #
  # == Params:
  #
  # +project+::      The name of the project
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#806
  def apply_project_filters(project); end

  # == Description
  #
  # Applies the filters on a test result.
  #
  # == Params:
  #
  # +result+::       The index of the test result, use list_test_results action
  #                  to get it
  # +test+::         The id of the test, use list_tests action to get it
  # +target+::       The key of the target, use list_machine_targets to get it
  # +project+::      The name of the project
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#829
  def apply_test_result_filters(result, test, target, project, machine, pool); end

  # == Description
  #
  # Closes the instance.
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1442
  def close; end

  # == Description
  #
  # Closes the instance and shuts down the studio.
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1427
  def close_and_shutdown; end

  # == Description
  #
  # Boolean method to the instance being closed.
  #
  # @return [Boolean]
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1455
  def closed?; end

  # == Description
  #
  # Checks if connection is still alive.
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1410
  def connection_check; end

  # == Description
  #
  # Creates a pool.
  #
  # == Params:
  #
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#416
  def create_pool(pool); end

  # == Description
  #
  # Creates a project.
  #
  # == Params:
  #
  # +project+::      The name of the project
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#533
  def create_project(project); end

  # == Description
  #
  # Creates a project's package and saves it to a file at <package> if used,
  # if not to %TEMP%\prometheus_packages\..., also fetches the package file to
  # the local machine if outp_dir param was used on initialization.
  #
  # == Params:
  #
  # +project+::      The name of the project
  # +handler+::      The progress info handler, (can be nil), usage example:
  #                    handler = proc { |progress_package|
  #                      puts progress_package['stepscount']
  #                    }
  #                  progress_package is in JSON format and it has:
  #                  1. 'stepscount': a numeric progression steps count
  #                  1. 'steps': an array of 'stepscount' JSON entries that
  #                     each entry represents a single progression step's
  #                     progress info, each entry's content:
  #                     i. 'current': current progress counter value
  #                     i. 'maximum': maximum progress counter value
  #                     i. 'message': progress info message
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1020
  def create_project_package(project, handler = T.unsafe(nil)); end

  # == Description
  #
  # Creates a project's target.
  #
  # == Params:
  #
  # +target+::       The key of the target, use list_machine_targets to get it
  # +project+::      The name of the project
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#569
  def create_project_target(target, project, machine, pool); end

  # == Description
  #
  # Deletes a machine.
  #
  # == Params:
  #
  # +machine+::      The name of the machine
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#487
  def delete_machine(machine, pool); end

  # == Description
  #
  # Delete the given path on the target machine.
  #
  # == Params:
  #
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +r_directory+::  The remote file/directory which should be deleted
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1183
  def delete_on_machine(machine, r_path); end

  # == Description
  #
  # Deletes a pool.
  #
  # == Params:
  #
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#432
  def delete_pool(pool); end

  # == Description
  #
  # Deletes a project.
  #
  # == Params:
  #
  # +project+::      The name of the project
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#549
  def delete_project(project); end

  # == Description
  #
  # Deletes a project's target.
  #
  # == Params:
  #
  # +target+::        The key of the target, use list_machine_targets to get it
  # +project+::       The name of the project
  # +machine+::       The name of the machine as registered with the HCK\HLK
  #                   controller
  # +pool+::          The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#592
  def delete_project_target(target, project, machine, pool); end

  # == Description
  #
  # Download file or directory from the machine to local directory.
  # BE CAREFUL! Download speed far less than upload one.
  #
  # == Params:
  #
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +r_directory+::  The remote file/directory which should be downloaded
  # +l_directory+::  The local file/directory path
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1151
  def download_from_machine(machine, r_path, l_path); end

  # == Description
  #
  # Checks to see if the given path exists on the target machine.
  #
  # == Params:
  #
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +r_directory+::  The remote file/directory which should be checked
  #
  # @return [Boolean]
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1167
  def exists_on_machine?(machine, r_path); end

  # == Description
  #
  # Gets a machine's ip address.
  #
  # == Params:
  #
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +ipv6+::         Get IPv6 address, :ipv6 to enable, disabled by default
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1039
  def get_machine_ip(machine, ipv6: T.unsafe(nil)); end

  # == Description
  #
  # Gets a machine's system information.
  #
  # == Params:
  #
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +output_format:: Specifies the format in which the output
  #                  is to be displayed.
  #                  Valid values: "TABLE", "LIST", "CSV".
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1060
  def get_machine_system_info(machine, output_format = T.unsafe(nil)); end

  # == Description
  #
  # Gets a project target's test info.
  #
  # == Params:
  #
  # +test+::         The id of the test, use list_tests action to get it
  # +target+::       The key of the target, use list_machine_targets to get it
  # +project+::      The name of the project
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#720
  def get_test_info(test, target, project, machine, pool); end

  # == Description
  #
  # Installs a driver package, (.inf file), on a machine.
  #
  # == Params:
  #
  # +machine+::             The name of the machine
  # +install_method+::      The method for driver installation
  # +l_directory+::         The local directory which has the driver package,
  #                         (.inf file)
  # +inf_file+::            The .inf file name
  #
  # == Optional params (symbols):
  #
  # +custom_cmd+::          The custom command for driver installation (optional)
  # +force_install_cert+::  Install certificate independently of driver installation
  #                         method (optional)
  # +sys_file+::            The .sys file name for export certificate (optional)
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1336
  def install_machine_driver_package(machine, install_method, l_directory, inf_file, options = T.unsafe(nil)); end

  # Returns the value of attribute json.
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#394
  def json; end

  # Sets the attribute json
  #
  # @param value the value to set the attribute json to.
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#394
  def json=(_arg0); end

  # == Description
  #
  # Lists the target devices of a machine that are available to be tested.
  #
  # == Params:
  #
  # +machine+::      The name of the machine
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#504
  def list_machine_targets(machine, pool); end

  # == Description
  #
  # Lists the pools info.
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#400
  def list_pools; end

  # == Description
  #
  # Lists the projects info.
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#517
  def list_projects; end

  # == Description
  #
  # Lists a test's results info.
  #
  # == Params:
  #
  # +test+::         The id of the test, use list_tests action to get it
  # +target+::       The key of the target, use list_machine_targets to get it
  # +project+::      The name of the project
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#858
  def list_test_results(test, target, project, machine, pool); end

  # == Description
  #
  # Lists a project target's tests.
  #
  # == Params:
  #
  # +target+::       The key of the target, use list_machine_targets to get it
  # +project+::      The name of the project
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +pool+::         The name of the pool
  # +test_type+::    Assign to manual or auto, (can be nil)
  # +test_status+::  Assign to failed, inqueue, notrun, passed or running,
  #                  (can be nil)
  # +playlist+::     Provide a playlist file path to apply, (can be nil)
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#644
  def list_tests(target, project, machine, pool, test_type = T.unsafe(nil), test_status = T.unsafe(nil), playlist = T.unsafe(nil)); end

  # == Description
  #
  # Shuts down or restarts a machine.
  #
  # == Params:
  #
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +restart+::      Restarts the machine, :restart to enable, disabled by
  #                  default
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1095
  def machine_shutdown(machine, restart: T.unsafe(nil)); end

  # == Description
  #
  # Moves a machine from one pool to another.
  #
  # == Params:
  #
  # +machine+::      The name of the machine
  # +from+::         The name of the source pool
  # +to+::           The name of the destination pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#450
  def move_machine(machine, from, to); end

  # == Description
  #
  # Queues a test, use get_test_results action to get the results.
  # (if the test needs two machines to run use -sup flag)
  # (if the test needs the IPv6 address of the support machine use -IPv6 flag)
  #
  # == Params:
  #
  # +test+::         The id of the test, use list_tests action to get it
  # +target+::       The key of the target, use list_machine_targets to get it
  # +project+::      The name of the project
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +pool+::         The name of the pool
  # +sup+::          The name of the support machine as registered with the
  #                  HCK\HLK controller, (can be nil)
  # +ipv6+::         The IPv6 address of the support machine, (can be nil)
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#749
  def queue_test(test, target, project, machine, pool, sup = T.unsafe(nil), ipv6 = T.unsafe(nil)); end

  # == Description
  #
  # Tries to regain the connection to the guest machine using the given
  # credentials and addresses on initialization.
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1359
  def reconnect; end

  # == Description
  #
  # Run command on a machine, (powershell).
  #
  # == Params:
  #
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +cmd+::          The command to run as a string
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1114
  def run_on_machine(machine, cmd); end

  # == Description
  #
  # Sets the state of a machine to Ready or NotReady.
  #
  # == Params:
  #
  # +machine+::      The name of the machine
  # +pool+::         The name of the pool
  # +state+::        The state, Ready or NotReady
  # +timeout+::      The action's timeout in seconds, 60 by deafult
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#469
  def set_machine_state(machine, pool, state, timeout = T.unsafe(nil)); end

  # == Description
  #
  # Shuts down or restarts the studio, (you will need to reconnect after this).
  #
  # == Params:
  #
  # +restart+::      Restarts the machine, :restart to enable, disabled by
  #                  default
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1075
  def shutdown(restart: T.unsafe(nil)); end

  # == Description
  #
  # Starts HLK related services at the machine.
  #
  # == Params:
  #
  # +machine+::      The name of the machine
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#204
  def start_client_services(machine); end

  # == Description
  #
  # Updates the HCK\HLK controller's filters by giving a local .sql filter file.
  #
  # == Params:
  #
  # +l_filters+::    The local filter .sql file path
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#790
  def update_filters(l_filter); end

  # == Description
  #
  # Upload directory to temp directory of the machine.
  #
  # == Params:
  #
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +l_directory+::  The local file/directory which should be uploaded
  # +r_directory+::  The remote file/directory
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1133
  def upload_to_machine(machine, l_directory, r_directory = T.unsafe(nil)); end

  # == Description
  #
  # Zips a test result's logs to a zip file fetches it to the local machine if
  # logs_dir param was used on initialization.
  #
  # == Params:
  #
  # +result+::       The index of the test result, use list_test_results action
  #                  to get it
  # +test+::         The id of the test, use list_tests action to get it
  # +target+::       The key of the target, use list_machine_targets to get it
  # +project+::      The name of the project
  # +machine+::      The name of the machine as registered with the HCK\HLK
  #                  controller
  # +pool+::         The name of the pool
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#885
  def zip_test_result_logs(result, test, target, project, machine, pool); end

  private

  # source://rtoolsHCK//lib/rtoolsHCK.rb#371
  def action_exception_handler(exception); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1393
  def check_connection; end

  # @raise [WinrmPSRunError.new(where)]
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#268
  def check_run_output(run_output, where, cmd); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1223
  def do_delete_on_machine(machine, r_path); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1204
  def do_download_from_machine(machine, r_path, l_path); end

  # @return [Boolean]
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#1215
  def do_exists_on_machine?(machine, r_path); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#212
  def do_initialize(init_opts); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1301
  def do_install_machine_driver_package(machine, install_method, l_directory, inf_file, options); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#614
  def do_list_tests(cmd_line, l_playlist); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#770
  def do_upload_and_update_filter(l_filter); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#606
  def do_upload_playlist_file(l_playlist); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1192
  def do_upload_to_machine(machine, l_directory, r_directory = T.unsafe(nil)); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#966
  def dummy_package_progress_info_handler; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1231
  def export_certificate_script(sys_path, cer_path); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#663
  def file_to_outp_dir(r_file_path); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1263
  def get_custom_command(r_directory, windows_path, custom_cmd); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#80
  def get_exception_stack(exception); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#335
  def guest_basename(path); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#339
  def guest_dirname(path); end

  # @raise [RToolsHCKError.new('action')]
  #
  # source://rtoolsHCK//lib/rtoolsHCK.rb#381
  def handle_action_exceptions(action, &block); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#984
  def handle_create_project_package(cmd_line, handler); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#73
  def handle_exceptions; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#938
  def handle_project_package(ret_str); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#906
  def handle_project_package_json(project_package); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#928
  def handle_project_package_normal(project_package, stream); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#345
  def handle_return(stream); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#696
  def handle_test_results(test_results, stream); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#671
  def handle_test_results_json(test_results); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#682
  def handle_test_results_normal(test_results, stream); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1284
  def install_certificate(machine, windows_path, sys_file = T.unsafe(nil)); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1242
  def install_certificate_script(cer_path); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1272
  def install_driver_command(r_directory, windows_path, install_method, custom_cmd = T.unsafe(nil)); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#235
  def load_instance_variables(init_opts); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#223
  def load_outp_dir(outp_dir); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#316
  def load_toolshck; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#303
  def load_winrm_fs; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#259
  def load_winrm_ps; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#365
  def log_action_call(action, binding); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#85
  def log_exception(exception, level); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#97
  def logger(level, progname = T.unsafe(nil), &_arg2); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#285
  def machine_connection(machine); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#291
  def machine_run(machine, cmd); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#961
  def package_progress_info_factory(progress_steps); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#971
  def package_progression_first_step(cmd_line, handler); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#977
  def package_progression_last_step(current, handler); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#951
  def package_progression_loop(current, maximum, handler); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#354
  def parse_action_parameters(action, binding); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#918
  def parse_project_package_guest_path(stream); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1370
  def priv_close; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1249
  def replace_command(cmd, replacement_list); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#277
  def run(cmd); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#191
  def start_client_service(machine, service_name); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#181
  def start_studio_service(service_name); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#185
  def start_studio_services; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#320
  def toolshck_ether_init_opts; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1383
  def unload_ether; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1389
  def unload_toolshck; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#1375
  def unload_winrm_ps; end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#171
  def validate_init_opts(init_opts); end

  # source://rtoolsHCK//lib/rtoolsHCK.rb#247
  def winrm_options_factory(addr, port, user, pass); end
end

# init_opts initialization defaults
#
# source://rtoolsHCK//lib/rtoolsHCK.rb#156
RToolsHCK::INIT_OPTS_DEFAULTS = T.let(T.unsafe(nil), Hash)

# Progression rate divider, used for the synchronization with the controller
#
# source://rtoolsHCK//lib/rtoolsHCK.rb#994
RToolsHCK::PROGRESSION_RATE_DIVIDER = T.let(T.unsafe(nil), Integer)

# toolsHCK connection timeout in seconds
#
# source://rtoolsHCK//lib/rtoolsHCK.rb#314
RToolsHCK::TOOLSHCK_CONNECTION_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://rtoolsHCK//lib/rtoolsHCK.rb#68
RToolsHCK::WINRM_OPERATION_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://rtoolsHCK//lib/rtoolsHCK.rb#69
RToolsHCK::WINRM_RECIEVE_TIMEOUT = T.let(T.unsafe(nil), Integer)

# A custom RToolsHCK action error exception
#
# source://rtoolsHCK//lib/exceptions.rb#19
class RToolsHCKActionError < ::RToolsHCKError; end

# A custom RToolsHCK connection error exception
#
# source://rtoolsHCK//lib/exceptions.rb#16
class RToolsHCKConnectionError < ::RToolsHCKError; end

# A custom RToolsHCK error exception
#
# source://rtoolsHCK//lib/exceptions.rb#4
class RToolsHCKError < ::StandardError
  # Initialization of the custom exception
  #
  # @return [RToolsHCKError] a new instance of RToolsHCKError
  #
  # source://rtoolsHCK//lib/exceptions.rb#9
  def initialize(where); end

  # Custom addition to the exception backtrace, (better logging)
  #
  # source://rtoolsHCK//lib/exceptions.rb#6
  def where; end
end

# server class
#
# source://rtoolsHCK//lib/server.rb#8
class Server
  # @return [Server] a new instance of Server
  #
  # source://rtoolsHCK//lib/server.rb#9
  def initialize(init_opts); end

  # source://rtoolsHCK//lib/server.rb#97
  def close; end

  # source://rtoolsHCK//lib/server.rb#17
  def run_server; end

  private

  # source://rtoolsHCK//lib/server.rb#45
  def check_script_file; end

  # source://rtoolsHCK//lib/server.rb#55
  def deploy_script_file; end

  # source://rtoolsHCK//lib/server.rb#91
  def guest_basename(path); end

  # source://rtoolsHCK//lib/server.rb#36
  def load_instance_variables(init_opts); end

  # source://rtoolsHCK//lib/server.rb#66
  def load_toolshck_server; end

  # source://rtoolsHCK//lib/server.rb#31
  def logger(level, progname = T.unsafe(nil), &_arg2); end

  # source://rtoolsHCK//lib/server.rb#85
  def process_script; end
end

# A custom Server error exception
#
# source://rtoolsHCK//lib/exceptions.rb#25
class ServerError < ::RToolsHCKConnectionError; end

# A custom Winrm powershell run error exception
#
# source://rtoolsHCK//lib/exceptions.rb#22
class WinrmPSRunError < ::RToolsHCKActionError; end
