# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-ruby-core` gem.
# Please instead update this file by running `bin/tapioca gem sentry-ruby-core`.

# source://sentry-ruby-core//lib/sentry/core_ext/object/deep_dup.rb#24
class Array
  include ::Enumerable

  # Returns a deep copy of array.
  #
  #   array = [1, [2, 3]]
  #   dup   = array.deep_dup
  #   dup[1][2] = 4
  #
  #   array[1][2] # => nil
  #   dup[1][2]   # => 4
  #
  # source://sentry-ruby-core//lib/sentry/core_ext/object/deep_dup.rb#33
  def deep_dup; end
end

# source://sentry-ruby-core//lib/sentry/core_ext/object/duplicable.rb#108
class BigDecimal < ::Numeric
  # BigDecimals are duplicable:
  #
  #   BigDecimal("1.2").duplicable? # => true
  #   BigDecimal("1.2").dup         # => #<BigDecimal:...,'0.12E1',18(18)>
  #
  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/core_ext/object/duplicable.rb#113
  def duplicable?; end
end

# source://sentry-ruby-core//lib/sentry/core_ext/object/deep_dup.rb#38
class Hash
  include ::Enumerable

  # Returns a deep copy of hash.
  #
  #   hash = { a: { b: 'b' } }
  #   dup  = hash.deep_dup
  #   dup[:a][:c] = 'c'
  #
  #   hash[:a][:c] # => nil
  #   dup[:a][:c]  # => "c"
  #
  # source://sentry-ruby-core//lib/sentry/core_ext/object/deep_dup.rb#47
  def deep_dup; end
end

# source://sentry-ruby-core//lib/sentry/core_ext/object/duplicable.rb#118
class Method
  # Methods are not duplicable:
  #
  #  method(:puts).duplicable? # => false
  #  method(:puts).dup         # => TypeError: allocator undefined for Method
  #
  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/core_ext/object/duplicable.rb#123
  def duplicable?; end
end

# source://sentry-ruby-core//lib/sentry/core_ext/object/duplicable.rb#93
class Numeric
  include ::Comparable
end

# --
# Most objects are cloneable, but not all. For example you can't dup methods:
#
#   method(:puts).dup # => TypeError: allocator undefined for Method
#
# Classes may signal their instances are not duplicable removing +dup+/+clone+
# or raising exceptions from them. So, to dup an arbitrary object you normally
# use an optimistic approach and are ready to catch an exception, say:
#
#   arbitrary_object.dup rescue object
#
# Rails dups objects in a few critical spots where they are not that arbitrary.
# That rescue is very expensive (like 40 times slower than a predicate), and it
# is often triggered.
#
# That's why we hardcode the following cases and check duplicable? instead of
# using that rescue idiom.
# ++
#
# source://sentry-ruby-core//lib/sentry/core_ext/object/duplicable.rb#26
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  # Returns a deep copy of object if it's duplicable. If it's
  # not duplicable, returns +self+.
  #
  #   object = Object.new
  #   dup    = object.deep_dup
  #   dup.instance_variable_set(:@a, 1)
  #
  #   object.instance_variable_defined?(:@a) # => false
  #   dup.instance_variable_defined?(:@a)    # => true
  #
  # source://sentry-ruby-core//lib/sentry/core_ext/object/deep_dup.rb#19
  def deep_dup; end

  # Can you safely dup this object?
  #
  # False for method objects;
  # true otherwise.
  #
  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/core_ext/object/duplicable.rb#31
  def duplicable?; end
end

# Based on ActionDispatch::RemoteIp. All security-related precautions from that
# middleware have been removed, because the Event IP just needs to be accurate,
# and spoofing an IP here only makes data inaccurate, not insecure. Don't re-use
# this module if you have to *trust* the IP address.
#
# source://sentry-ruby-core//lib/sentry/version.rb#1
module Sentry
  class << self
    # Takes an instance of Sentry::Breadcrumb and stores it to the current active scope.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#111
    def add_breadcrumb(breadcrumb, **options); end

    # source://sentry-ruby-core//lib/sentry-ruby.rb#48
    def apply_patches(config); end

    # Returns the value of attribute background_worker.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#40
    def background_worker; end

    # Sets the attribute background_worker
    #
    # @param value the value to set the attribute background_worker to.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#40
    def background_worker=(_arg0); end

    # Takes an instance of Sentry::Event and dispatches it to the currently active hub.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#190
    def capture_event(event); end

    # Takes an exception and reports it to Sentry via the currently active hub.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#180
    def capture_exception(exception, **options, &block); end

    # Takes a message string and reports it to Sentry via the currently active hub.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#185
    def capture_message(message, **options, &block); end

    # Clones the main thread's active hub and stores it to the current thread.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#138
    def clone_hub_to_current_thread; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def configuration(*args, **_arg1, &block); end

    # Takes a block and yields the current active scope.
    #
    # ```ruby
    # Sentry.configure_scope do |scope|
    #   scope.set_tags(foo: "bar")
    # end
    #
    # Sentry.capture_message("test message") # this event will have tags { foo: "bar" }
    # ```
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#152
    def configure_scope(&block); end

    # Returns an uri for security policy reporting that's generated from the given DSN
    # (To learn more about security policy reporting: https://docs.sentry.io/product/security-policy-reporting/)
    #
    # It returns nil if
    #
    # 1. The SDK is not initialized yet.
    # 2. The DSN is not provided or is invalid.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#100
    def csp_report_uri; end

    # Returns the current active client.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#128
    def get_current_client; end

    # Returns the current active hub.
    # If the current thread doesn't have an active hub, it will clone the main thread's active hub,
    # stores it in the current thread, and then returns it.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#118
    def get_current_hub; end

    # Returns the current active scope.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#133
    def get_current_scope; end

    # Returns the main thread's active hub.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#106
    def get_main_hub; end

    # Main APIs #####
    #
    # @yield [config]
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#80
    def init(&block); end

    # @return [Boolean]
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#214
    def initialized?; end

    # Integrations #####
    #
    # Returns a hash that contains all the integrations that have been registered to the main SDK.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#61
    def integrations; end

    # Returns the id of the lastly reported Sentry::Event.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#200
    def last_event_id; end

    # source://sentry-ruby-core//lib/sentry-ruby.rb#218
    def logger; end

    # Registers the SDK integration with its name and version.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#66
    def register_integration(name, version); end

    # Patch Registration #####
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#44
    def register_patch(&block); end

    # source://sentry-ruby-core//lib/sentry-ruby.rb#54
    def registered_patches; end

    # source://sentry-ruby-core//lib/sentry-ruby.rb#222
    def sdk_meta; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def send_event(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def set_context(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def set_extras(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def set_tags(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def set_user(*args, **_arg1, &block); end

    # Takes or initializes a new Sentry::Transaction and makes a sampling decision for it.
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#195
    def start_transaction(**options); end

    # Helpers #####
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#207
    def sys_command(command); end

    # source://sentry-ruby-core//lib/sentry-ruby.rb#226
    def utc_now; end

    # Takes a block and yields a temporary scope.
    # The temporary scope will inherit all the attributes from the current active scope and replace it to be the active
    # scope inside the block. For example:
    #
    # ```ruby
    # Sentry.configure_scope do |scope|
    #   scope.set_tags(foo: "bar")
    # end
    #
    # Sentry.capture_message("test message") # this event will have tags { foo: "bar" }
    #
    # Sentry.with_scope do |temp_scope|
    #   temp_scope.set_tags(foo: "baz")
    #   Sentry.capture_message("test message 2") # this event will have tags { foo: "baz" }
    # end
    #
    # Sentry.capture_message("test message 3") # this event will have tags { foo: "bar" }
    # ```
    #
    # source://sentry-ruby-core//lib/sentry-ruby.rb#175
    def with_scope(&block); end
  end
end

# source://sentry-ruby-core//lib/sentry/utils/argument_checking_helper.rb#2
module Sentry::ArgumentCheckingHelper
  private

  # source://sentry-ruby-core//lib/sentry/utils/argument_checking_helper.rb#5
  def check_argument_type!(argument, expected_type); end
end

# source://sentry-ruby-core//lib/sentry/background_worker.rb#6
class Sentry::BackgroundWorker
  include ::Sentry::LoggingHelper

  # @return [BackgroundWorker] a new instance of BackgroundWorker
  #
  # source://sentry-ruby-core//lib/sentry/background_worker.rb#11
  def initialize(configuration); end

  # Returns the value of attribute logger.
  #
  # source://sentry-ruby-core//lib/sentry/background_worker.rb#9
  def logger; end

  # Returns the value of attribute max_queue.
  #
  # source://sentry-ruby-core//lib/sentry/background_worker.rb#9
  def max_queue; end

  # Returns the value of attribute number_of_threads.
  #
  # source://sentry-ruby-core//lib/sentry/background_worker.rb#9
  def number_of_threads; end

  # source://sentry-ruby-core//lib/sentry/background_worker.rb#35
  def perform(&block); end
end

# Front end to parsing the backtrace for each notice
#
# source://sentry-ruby-core//lib/sentry/backtrace.rb#7
class Sentry::Backtrace
  # @return [Backtrace] a new instance of Backtrace
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#102
  def initialize(lines); end

  # source://sentry-ruby-core//lib/sentry/backtrace.rb#118
  def ==(other); end

  # source://sentry-ruby-core//lib/sentry/backtrace.rb#106
  def inspect; end

  # holder for an Array of Backtrace::Line instances
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#84
  def lines; end

  # source://sentry-ruby-core//lib/sentry/backtrace.rb#110
  def to_s; end

  class << self
    # source://sentry-ruby-core//lib/sentry/backtrace.rb#86
    def parse(backtrace, project_root, app_dirs_pattern, &backtrace_cleanup_callback); end
  end
end

# source://sentry-ruby-core//lib/sentry/backtrace.rb#81
Sentry::Backtrace::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# Handles backtrace parsing line by line
#
# source://sentry-ruby-core//lib/sentry/backtrace.rb#9
class Sentry::Backtrace::Line
  # @return [Line] a new instance of Line
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#51
  def initialize(file, number, method, module_name, in_app_pattern); end

  # source://sentry-ruby-core//lib/sentry/backtrace.rb#72
  def ==(other); end

  # The file portion of the line (such as app/models/user.rb)
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#22
  def file; end

  # source://sentry-ruby-core//lib/sentry/backtrace.rb#59
  def in_app; end

  # Returns the value of attribute in_app_pattern.
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#33
  def in_app_pattern; end

  # source://sentry-ruby-core//lib/sentry/backtrace.rb#76
  def inspect; end

  # The method of the line (such as index)
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#28
  def method; end

  # The module name (JRuby)
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#31
  def module_name; end

  # The line number portion of the line
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#25
  def number; end

  # Reconstructs the line in a readable fashion
  #
  # source://sentry-ruby-core//lib/sentry/backtrace.rb#68
  def to_s; end

  class << self
    # Parses a single line of a given backtrace
    #
    # @param unparsed_line [String] The raw line from +caller+ or some backtrace
    # @return [Line] The parsed backtrace line
    #
    # source://sentry-ruby-core//lib/sentry/backtrace.rb#38
    def parse(unparsed_line, in_app_pattern); end
  end
end

# org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:170)
#
# source://sentry-ruby-core//lib/sentry/backtrace.rb#19
Sentry::Backtrace::Line::JAVA_INPUT_FORMAT = T.let(T.unsafe(nil), Regexp)

# source://sentry-ruby-core//lib/sentry/backtrace.rb#10
Sentry::Backtrace::Line::RB_EXTENSION = T.let(T.unsafe(nil), String)

# regexp (optional leading X: on windows, or JRuby9000 class-prefix)
#
# source://sentry-ruby-core//lib/sentry/backtrace.rb#12
Sentry::Backtrace::Line::RUBY_INPUT_FORMAT = T.let(T.unsafe(nil), Regexp)

# source://sentry-ruby-core//lib/sentry/breadcrumb.rb#2
class Sentry::Breadcrumb
  # @return [Breadcrumb] a new instance of Breadcrumb
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#8
  def initialize(category: T.unsafe(nil), data: T.unsafe(nil), message: T.unsafe(nil), timestamp: T.unsafe(nil), level: T.unsafe(nil), type: T.unsafe(nil)); end

  # Returns the value of attribute category.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def category; end

  # Sets the attribute category
  #
  # @param value the value to set the attribute category to.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def category=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def data=(_arg0); end

  # Returns the value of attribute level.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def level; end

  # Sets the attribute level
  #
  # @param value the value to set the attribute level to.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def level=(_arg0); end

  # Returns the value of attribute message.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#6
  def message; end

  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#28
  def message=(msg); end

  # Returns the value of attribute timestamp.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def timestamp; end

  # Sets the attribute timestamp
  #
  # @param value the value to set the attribute timestamp to.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def timestamp=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#17
  def to_hash; end

  # Returns the value of attribute type.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#5
  def type=(_arg0); end

  private

  # source://sentry-ruby-core//lib/sentry/breadcrumb.rb#34
  def serialized_data; end
end

# source://sentry-ruby-core//lib/sentry/breadcrumb.rb#3
Sentry::Breadcrumb::DATA_SERIALIZATION_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#4
class Sentry::BreadcrumbBuffer
  include ::Enumerable

  # @return [BreadcrumbBuffer] a new instance of BreadcrumbBuffer
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#10
  def initialize(size = T.unsafe(nil)); end

  # Returns the value of attribute buffer.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#8
  def buffer; end

  # Sets the attribute buffer
  #
  # @param value the value to set the attribute buffer to.
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#8
  def buffer=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#42
  def dup; end

  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#28
  def each(&block); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#32
  def empty?; end

  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#20
  def members; end

  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#24
  def peek; end

  # @yield [crumb]
  #
  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#14
  def record(crumb); end

  # source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#36
  def to_hash; end
end

# source://sentry-ruby-core//lib/sentry/breadcrumb_buffer.rb#5
Sentry::BreadcrumbBuffer::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)

# source://sentry-ruby-core//lib/sentry/client.rb#4
class Sentry::Client
  include ::Sentry::LoggingHelper

  # @return [Client] a new instance of Client
  #
  # source://sentry-ruby-core//lib/sentry/client.rb#9
  def initialize(configuration); end

  # source://sentry-ruby-core//lib/sentry/client.rb#26
  def capture_event(event, scope, hint = T.unsafe(nil)); end

  # Returns the value of attribute configuration.
  #
  # source://sentry-ruby-core//lib/sentry/client.rb#7
  def configuration; end

  # source://sentry-ruby-core//lib/sentry/client.rb#50
  def event_from_exception(exception, hint = T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/client.rb#60
  def event_from_message(message, hint = T.unsafe(nil), backtrace: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/client.rb#67
  def event_from_transaction(transaction); end

  # source://sentry-ruby-core//lib/sentry/client.rb#103
  def generate_sentry_trace(span); end

  # Returns the value of attribute logger.
  #
  # source://sentry-ruby-core//lib/sentry/client.rb#7
  def logger; end

  # source://sentry-ruby-core//lib/sentry/client.rb#79
  def send_event(event, hint = T.unsafe(nil)); end

  # Returns the value of attribute transport.
  #
  # source://sentry-ruby-core//lib/sentry/client.rb#7
  def transport; end

  private

  # source://sentry-ruby-core//lib/sentry/client.rb#119
  def dispatch_async_event(async_block, event, hint); end

  # source://sentry-ruby-core//lib/sentry/client.rb#113
  def dispatch_background_event(event, hint); end
end

# source://sentry-ruby-core//lib/sentry/configuration.rb#10
class Sentry::Configuration
  include ::Sentry::LoggingHelper

  # @return [Configuration] a new instance of Configuration
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#185
  def initialize; end

  # Directories to be recognized as part of your app. e.g. if you
  # have an `engines` dir at the root of your project, you may want
  # to set this to something like /(app|config|engines|lib)/
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#15
  def app_dirs_pattern; end

  # Directories to be recognized as part of your app. e.g. if you
  # have an `engines` dir at the root of your project, you may want
  # to set this to something like /(app|config|engines|lib)/
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#15
  def app_dirs_pattern=(_arg0); end

  # Provide an object that responds to `call` to send events asynchronously.
  # E.g.: lambda { |event| Thread.new { Sentry.send_event(event) } }
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#19
  def async; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#227
  def async=(value); end

  # to send events in a non-blocking way, sentry-ruby has its own background worker
  # by default, the worker holds a thread pool that has [the number of processors] threads
  # but you can configure it with this configuration option
  # E.g.: config.background_worker_threads = 5
  #
  # if you want to send events synchronously, set the value to 0
  # E.g.: config.background_worker_threads = 0
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#28
  def background_worker_threads; end

  # to send events in a non-blocking way, sentry-ruby has its own background worker
  # by default, the worker holds a thread pool that has [the number of processors] threads
  # but you can configure it with this configuration option
  # E.g.: config.background_worker_threads = 5
  #
  # if you want to send events synchronously, set the value to 0
  # E.g.: config.background_worker_threads = 0
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#28
  def background_worker_threads=(_arg0); end

  # a proc/lambda that takes an array of stack traces
  # it'll be used to silence (reduce) backtrace of the exception
  #
  # for example:
  #
  # ```ruby
  # Sentry.configuration.backtrace_cleanup_callback = lambda do |backtrace|
  #   Rails.backtrace_cleaner.clean(backtrace)
  # end
  # ```
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#41
  def backtrace_cleanup_callback; end

  # a proc/lambda that takes an array of stack traces
  # it'll be used to silence (reduce) backtrace of the exception
  #
  # for example:
  #
  # ```ruby
  # Sentry.configuration.backtrace_cleanup_callback = lambda do |backtrace|
  #   Rails.backtrace_cleaner.clean(backtrace)
  # end
  # ```
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#41
  def backtrace_cleanup_callback=(_arg0); end

  # Optional Proc, called before adding the breadcrumb to the current scope
  # E.g.: lambda { |breadcrumb, hint| breadcrumb }
  # E.g.: lambda { |breadcrumb, hint| nil }
  # E.g.: lambda { |breadcrumb, hint|
  #   breadcrumb.message = 'a'
  #   breadcrumb
  # }
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#50
  def before_breadcrumb; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#256
  def before_breadcrumb=(value); end

  # Optional Proc, called before sending an event to the server/
  # E.g.: lambda { |event, hint| event }
  # E.g.: lambda { |event, hint| nil }
  # E.g.: lambda { |event, hint|
  #   event[:message] = 'a'
  #   event
  # }
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#59
  def before_send; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#248
  def before_send=(value); end

  # An array of breadcrumbs loggers to be used. Available options are:
  # - :sentry_logger
  # - :active_support_logger
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#64
  def breadcrumbs_logger; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#235
  def breadcrumbs_logger=(logger); end

  # Number of lines of code context to capture, or nil for none
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#70
  def context_lines; end

  # Number of lines of code context to capture, or nil for none
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#70
  def context_lines=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#327
  def csp_report_uri; end

  # Whether the SDK should run in the debugging mode. Default is false.
  # If set to true, SDK errors will be logged with backtrace
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#77
  def debug; end

  # Whether the SDK should run in the debugging mode. Default is false.
  # If set to true, SDK errors will be logged with backtrace
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#77
  def debug=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#316
  def detect_release; end

  # the dsn value, whether it's set via `config.dsn=` or `ENV["SENTRY_DSN"]`
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#80
  def dsn; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#218
  def dsn=(value); end

  # Whitelist of enabled_environments that will send notifications to Sentry. Array of Strings.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#83
  def enabled_environments; end

  # Whitelist of enabled_environments that will send notifications to Sentry. Array of Strings.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#83
  def enabled_environments=(_arg0); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#298
  def enabled_in_current_env?; end

  # RACK_ENV by default.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#73
  def environment; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#264
  def environment=(environment); end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#276
  def error_messages; end

  # these are not config options
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#158
  def errors; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#285
  def exception_class_allowed?(exc); end

  # Logger 'progname's to exclude from breadcrumbs
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#86
  def exclude_loggers; end

  # Logger 'progname's to exclude from breadcrumbs
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#86
  def exclude_loggers=(_arg0); end

  # Array of exception classes that should never be sent. See IGNORE_DEFAULT.
  # You should probably append to this rather than overwrite it.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#90
  def excluded_exceptions; end

  # Array of exception classes that should never be sent. See IGNORE_DEFAULT.
  # You should probably append to this rather than overwrite it.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#90
  def excluded_exceptions=(_arg0); end

  # these are not config options
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#158
  def gem_specs; end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to true
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#93
  def inspect_exception_causes_for_exclusion; end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to true
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#93
  def inspect_exception_causes_for_exclusion=(_arg0); end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to true
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#93
  def inspect_exception_causes_for_exclusion?; end

  # You may provide your own LineCache for matching paths with source files.
  # This may be useful if you need to get source code from places other than
  # the disk. See Sentry::LineCache for the required interface you must implement.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#99
  def linecache; end

  # You may provide your own LineCache for matching paths with source files.
  # This may be useful if you need to get source code from places other than
  # the disk. See Sentry::LineCache for the required interface you must implement.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#99
  def linecache=(_arg0); end

  # Logger used by Sentry. In Rails, this is the Rails logger, otherwise
  # Sentry provides its own Sentry::Logger.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#103
  def logger; end

  # Logger used by Sentry. In Rails, this is the Rails logger, otherwise
  # Sentry provides its own Sentry::Logger.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#103
  def logger=(_arg0); end

  # Max number of breadcrumbs a breadcrumb buffer can hold
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#67
  def max_breadcrumbs; end

  # Max number of breadcrumbs a breadcrumb buffer can hold
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#67
  def max_breadcrumbs=(_arg0); end

  # Project directory root for in_app detection. Could be Rails root, etc.
  # Set automatically for Rails.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#107
  def project_root; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#281
  def project_root=(root_dir); end

  # Insert sentry-trace to outgoing requests' headers
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#110
  def propagate_traces; end

  # Insert sentry-trace to outgoing requests' headers
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#110
  def propagate_traces=(_arg0); end

  # Array of rack env parameters to be included in the event sent to sentry.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#113
  def rack_env_whitelist; end

  # Array of rack env parameters to be included in the event sent to sentry.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#113
  def rack_env_whitelist=(_arg0); end

  # Release tag to be passed with every event sent to Sentry.
  # We automatically try to set this to a git SHA or Capistrano release.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#117
  def release; end

  # Release tag to be passed with every event sent to Sentry.
  # We automatically try to set this to a git SHA or Capistrano release.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#117
  def release=(_arg0); end

  # The sampling factor to apply to events. A value of 0.0 will not send
  # any events, and a value of 1.0 will send 100% of events.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#121
  def sample_rate; end

  # The sampling factor to apply to events. A value of 0.0 will not send
  # any events, and a value of 1.0 will send 100% of events.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#121
  def sample_rate=(_arg0); end

  # When send_default_pii's value is false (default), sensitive information like
  # - user ip
  # - user cookie
  # - request body
  # will not be sent to Sentry.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#131
  def send_default_pii; end

  # When send_default_pii's value is false (default), sensitive information like
  # - user ip
  # - user cookie
  # - request body
  # will not be sent to Sentry.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#131
  def send_default_pii=(_arg0); end

  # Include module versions in reports - boolean.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#124
  def send_modules; end

  # Include module versions in reports - boolean.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#124
  def send_modules=(_arg0); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#268
  def sending_allowed?; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#218
  def server=(value); end

  # Returns the value of attribute server_name.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#139
  def server_name; end

  # Sets the attribute server_name
  #
  # @param value the value to set the attribute server_name to.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#139
  def server_name=(_arg0); end

  # Allow to skip Sentry emails within rake tasks
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#134
  def skip_rake_integration; end

  # Allow to skip Sentry emails within rake tasks
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#134
  def skip_rake_integration=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#306
  def stacktrace_builder; end

  # Take a float between 0.0 and 1.0 as the sample rate for tracing events (transactions).
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#145
  def traces_sample_rate; end

  # Take a float between 0.0 and 1.0 as the sample rate for tracing events (transactions).
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#145
  def traces_sample_rate=(_arg0); end

  # Take a Proc that controls the sample rate for every tracing event, e.g.
  # ```
  # lambda do |tracing_context|
  #   # tracing_context[:transaction_context] contains the information about the transaction
  #   # tracing_context[:parent_sampled] contains the transaction's parent's sample decision
  #   true # return value can be a boolean or a float between 0.0 and 1.0
  # end
  # ```
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#155
  def traces_sampler; end

  # Take a Proc that controls the sample rate for every tracing event, e.g.
  # ```
  # lambda do |tracing_context|
  #   # tracing_context[:transaction_context] contains the information about the transaction
  #   # tracing_context[:parent_sampled] contains the transaction's parent's sample decision
  #   true # return value can be a boolean or a float between 0.0 and 1.0
  # end
  # ```
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#155
  def traces_sampler=(_arg0); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#302
  def tracing_enabled?; end

  # Return a Transport::Configuration object for transport-related configurations.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#142
  def transport; end

  # IP ranges for trusted proxies that will be skipped when calculating IP address.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#137
  def trusted_proxies; end

  # IP ranges for trusted proxies that will be skipped when calculating IP address.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#137
  def trusted_proxies=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#398
  def capture_in_environment?; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#379
  def detect_release_from_capistrano; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#394
  def detect_release_from_env; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#390
  def detect_release_from_git; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#367
  def detect_release_from_heroku; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#432
  def environment_from_env; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#338
  def excluded_exception?(incoming_exception); end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#344
  def excluded_exception_classes; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#348
  def get_exception_class(x); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#352
  def matches_exception?(excluded_exception_class, incoming_exception); end

  # Try to resolve the hostname to an FQDN, but fall back to whatever
  # the load name is.
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#427
  def resolve_hostname; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#444
  def run_post_initialization_callbacks; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#375
  def running_on_heroku?; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#360
  def safe_const_get(x); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#414
  def sample_allowed?; end

  # source://sentry-ruby-core//lib/sentry/configuration.rb#436
  def server_name_from_env; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/configuration.rb#405
  def valid?; end

  class << self
    # allow extensions to add their hooks to the Configuration class
    #
    # source://sentry-ruby-core//lib/sentry/configuration.rb#451
    def add_post_initialization_callback(&block); end

    # source://sentry-ruby-core//lib/sentry/configuration.rb#457
    def post_initialization_callbacks; end
  end
end

# source://sentry-ruby-core//lib/sentry/configuration.rb#175
Sentry::Configuration::HEROKU_DYNO_METADATA_MESSAGE = T.let(T.unsafe(nil), String)

# Most of these errors generate 4XX responses. In general, Sentry clients
# only automatically report 5xx responses.
#
# source://sentry-ruby-core//lib/sentry/configuration.rb#162
Sentry::Configuration::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/configuration.rb#178
Sentry::Configuration::LOG_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/configuration.rb#179
Sentry::Configuration::MODULE_SEPARATOR = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/configuration.rb#169
Sentry::Configuration::RACK_ENV_WHITELIST_DEFAULT = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/dsn.rb#4
class Sentry::DSN
  # @return [DSN] a new instance of DSN
  #
  # source://sentry-ruby-core//lib/sentry/dsn.rb#10
  def initialize(dsn_string); end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#43
  def csp_report_uri; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#47
  def envelope_endpoint; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#8
  def host; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#8
  def path; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#8
  def port; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#8
  def project_id; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#8
  def public_key; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#8
  def scheme; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#8
  def secret_key; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#37
  def server; end

  # source://sentry-ruby-core//lib/sentry/dsn.rb#33
  def to_s; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/dsn.rb#29
  def valid?; end
end

# source://sentry-ruby-core//lib/sentry/dsn.rb#5
Sentry::DSN::PORT_MAP = T.let(T.unsafe(nil), Hash)

# source://sentry-ruby-core//lib/sentry/dsn.rb#6
Sentry::DSN::REQUIRED_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/transport/dummy_transport.rb#2
class Sentry::DummyTransport < ::Sentry::Transport
  # @return [DummyTransport] a new instance of DummyTransport
  #
  # source://sentry-ruby-core//lib/sentry/transport/dummy_transport.rb#5
  def initialize(*_arg0); end

  # Returns the value of attribute events.
  #
  # source://sentry-ruby-core//lib/sentry/transport/dummy_transport.rb#3
  def events; end

  # Sets the attribute events
  #
  # @param value the value to set the attribute events to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/dummy_transport.rb#3
  def events=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transport/dummy_transport.rb#10
  def send_event(event); end
end

# source://sentry-ruby-core//lib/sentry/exceptions.rb#2
class Sentry::Error < ::StandardError; end

# source://sentry-ruby-core//lib/sentry/event.rb#11
class Sentry::Event
  # @return [Event] a new instance of Event
  #
  # source://sentry-ruby-core//lib/sentry/event.rb#29
  def initialize(configuration:, integration_meta: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/event.rb#132
  def add_exception_interface(exception); end

  # source://sentry-ruby-core//lib/sentry/event.rb#120
  def add_request_interface(env); end

  # source://sentry-ruby-core//lib/sentry/event.rb#124
  def add_threads_interface(backtrace: T.unsafe(nil), **options); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def backtrace; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def backtrace=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def breadcrumbs; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def breadcrumbs=(_arg0); end

  # Returns the value of attribute configuration.
  #
  # source://sentry-ruby-core//lib/sentry/event.rb#27
  def configuration; end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def contexts; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def contexts=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def environment; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def environment=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def event_id; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def event_id=(_arg0); end

  # Returns the value of attribute exception.
  #
  # source://sentry-ruby-core//lib/sentry/event.rb#27
  def exception; end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def extra; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def extra=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def fingerprint; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def fingerprint=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def level; end

  # needed to meet the Sentry spec
  #
  # source://sentry-ruby-core//lib/sentry/event.rb#86
  def level=(new_level); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def message; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def message=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def modules; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def modules=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def platform; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def platform=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#90
  def rack_env=(env); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def release; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def release=(_arg0); end

  # Returns the value of attribute request.
  #
  # source://sentry-ruby-core//lib/sentry/event.rb#27
  def request; end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def sdk; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def sdk=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def server_name; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def server_name=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def tags; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def tags=(_arg0); end

  # Returns the value of attribute threads.
  #
  # source://sentry-ruby-core//lib/sentry/event.rb#27
  def threads; end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def timestamp; end

  # source://sentry-ruby-core//lib/sentry/event.rb#82
  def timestamp=(time); end

  # source://sentry-ruby-core//lib/sentry/event.rb#106
  def to_hash; end

  # source://sentry-ruby-core//lib/sentry/event.rb#116
  def to_json_compatible; end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def transaction; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def transaction=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def type; end

  # source://sentry-ruby-core//lib/sentry/event.rb#25
  def user; end

  # source://sentry-ruby-core//lib/sentry/event.rb#24
  def user=(_arg0); end

  private

  # When behind a proxy (or if the user is using a proxy), we can't use
  # REMOTE_ADDR to determine the Event IP, and must use other headers instead.
  #
  # source://sentry-ruby-core//lib/sentry/event.rb#152
  def calculate_real_ip_from_rack(env); end

  # source://sentry-ruby-core//lib/sentry/event.rb#142
  def serialize_attributes; end

  class << self
    # source://sentry-ruby-core//lib/sentry/event.rb#57
    def get_log_message(event_hash); end

    # source://sentry-ruby-core//lib/sentry/event.rb#73
    def get_message_from_exception(event_hash); end
  end
end

# source://sentry-ruby-core//lib/sentry/event.rb#22
Sentry::Event::MAX_MESSAGE_SIZE_IN_BYTES = T.let(T.unsafe(nil), Integer)

# source://sentry-ruby-core//lib/sentry/event.rb#12
Sentry::Event::SERIALIZEABLE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/event.rb#20
Sentry::Event::WRITER_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/interfaces/exception.rb#2
class Sentry::ExceptionInterface < ::Sentry::Interface
  # @return [ExceptionInterface] a new instance of ExceptionInterface
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/exception.rb#3
  def initialize(values:); end

  # source://sentry-ruby-core//lib/sentry/interfaces/exception.rb#7
  def to_hash; end

  class << self
    # source://sentry-ruby-core//lib/sentry/interfaces/exception.rb#13
    def build(exception:, stacktrace_builder:); end
  end
end

# source://sentry-ruby-core//lib/sentry/exceptions.rb#5
class Sentry::ExternalError < ::Sentry::Error; end

# source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#5
class Sentry::HTTPTransport < ::Sentry::Transport
  # @return [HTTPTransport] a new instance of HTTPTransport
  #
  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#16
  def initialize(*args); end

  # Returns the value of attribute adapter.
  #
  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#14
  def adapter; end

  # Returns the value of attribute conn.
  #
  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#14
  def conn; end

  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#23
  def send_data(data); end

  private

  # TODO: deprecate and replace where possible w/Faraday Builder
  #
  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#135
  def faraday_opts; end

  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#62
  def handle_rate_limited_response(headers); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#58
  def has_rate_limited_header?(headers); end

  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#88
  def parse_rate_limit_header(rate_limit_header); end

  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#120
  def set_conn; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#116
  def should_compress?(data); end

  # source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#141
  def ssl_configuration; end
end

# source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#8
Sentry::HTTPTransport::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#10
Sentry::HTTPTransport::DEFAULT_DELAY = T.let(T.unsafe(nil), Integer)

# source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#6
Sentry::HTTPTransport::GZIP_ENCODING = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#7
Sentry::HTTPTransport::GZIP_THRESHOLD = T.let(T.unsafe(nil), Integer)

# source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#12
Sentry::HTTPTransport::RATE_LIMIT_HEADER = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/transport/http_transport.rb#11
Sentry::HTTPTransport::RETRY_AFTER_HEADER = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/hub.rb#5
class Sentry::Hub
  include ::Sentry::ArgumentCheckingHelper

  # @return [Hub] a new instance of Hub
  #
  # source://sentry-ruby-core//lib/sentry/hub.rb#10
  def initialize(client, scope); end

  # source://sentry-ruby-core//lib/sentry/hub.rb#138
  def add_breadcrumb(breadcrumb, hint: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/hub.rb#42
  def bind_client(client); end

  # source://sentry-ruby-core//lib/sentry/hub.rb#116
  def capture_event(event, **options, &block); end

  # source://sentry-ruby-core//lib/sentry/hub.rb#92
  def capture_exception(exception, **options, &block); end

  # source://sentry-ruby-core//lib/sentry/hub.rb#106
  def capture_message(message, **options, &block); end

  # source://sentry-ruby-core//lib/sentry/hub.rb#32
  def clone; end

  # source://sentry-ruby-core//lib/sentry/hub.rb#24
  def configuration; end

  # source://sentry-ruby-core//lib/sentry/hub.rb#50
  def configure_scope(&block); end

  # source://sentry-ruby-core//lib/sentry/hub.rb#20
  def current_client; end

  # source://sentry-ruby-core//lib/sentry/hub.rb#28
  def current_scope; end

  # Returns the value of attribute last_event_id.
  #
  # source://sentry-ruby-core//lib/sentry/hub.rb#8
  def last_event_id; end

  # source://sentry-ruby-core//lib/sentry/hub.rb#16
  def new_from_top; end

  # source://sentry-ruby-core//lib/sentry/hub.rb#72
  def pop_scope; end

  # source://sentry-ruby-core//lib/sentry/hub.rb#61
  def push_scope; end

  # source://sentry-ruby-core//lib/sentry/hub.rb#76
  def start_transaction(transaction: T.unsafe(nil), custom_sampling_context: T.unsafe(nil), **options); end

  # this doesn't do anything to the already initialized background worker
  # but it temporarily disables dispatching events to it
  #
  # source://sentry-ruby-core//lib/sentry/hub.rb#152
  def with_background_worker_disabled(&block); end

  # source://sentry-ruby-core//lib/sentry/hub.rb#54
  def with_scope(&block); end

  private

  # source://sentry-ruby-core//lib/sentry/hub.rb#163
  def current_layer; end
end

# source://sentry-ruby-core//lib/sentry/hub.rb#167
class Sentry::Hub::Layer
  # @return [Layer] a new instance of Layer
  #
  # source://sentry-ruby-core//lib/sentry/hub.rb#171
  def initialize(client, scope); end

  # Returns the value of attribute client.
  #
  # source://sentry-ruby-core//lib/sentry/hub.rb#168
  def client; end

  # Sets the attribute client
  #
  # @param value the value to set the attribute client to.
  #
  # source://sentry-ruby-core//lib/sentry/hub.rb#168
  def client=(_arg0); end

  # Returns the value of attribute scope.
  #
  # source://sentry-ruby-core//lib/sentry/hub.rb#169
  def scope; end
end

# source://sentry-ruby-core//lib/sentry/interface.rb#2
class Sentry::Interface
  # source://sentry-ruby-core//lib/sentry/interface.rb#13
  def to_hash; end

  class << self
    # @private
    #
    # source://sentry-ruby-core//lib/sentry/interface.rb#3
    def inherited(klass); end

    # source://sentry-ruby-core//lib/sentry/interface.rb#9
    def registered; end
  end
end

# source://sentry-ruby-core//lib/sentry-ruby.rb#33
Sentry::LOGGER_PROGNAME = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/linecache.rb#2
class Sentry::LineCache
  # @return [LineCache] a new instance of LineCache
  #
  # source://sentry-ruby-core//lib/sentry/linecache.rb#3
  def initialize; end

  # Any linecache you provide to Sentry must implement this method.
  # Returns an Array of Strings representing the lines in the source
  # file. The number of lines retrieved is (2 * context) + 1, the middle
  # line should be the line requested by lineno. See specs for more information.
  #
  # source://sentry-ruby-core//lib/sentry/linecache.rb#11
  def get_file_context(filename, lineno, context); end

  private

  # source://sentry-ruby-core//lib/sentry/linecache.rb#35
  def getline(path, n); end

  # source://sentry-ruby-core//lib/sentry/linecache.rb#27
  def getlines(path); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/linecache.rb#22
  def valid_path?(path); end
end

# source://sentry-ruby-core//lib/sentry/logger.rb#6
class Sentry::Logger < ::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://sentry-ruby-core//lib/sentry/logger.rb#10
  def initialize(*_arg0); end
end

# source://sentry-ruby-core//lib/sentry/logger.rb#7
Sentry::Logger::LOG_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/logger.rb#8
Sentry::Logger::PROGNAME = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/utils/logging_helper.rb#2
module Sentry::LoggingHelper
  # source://sentry-ruby-core//lib/sentry/utils/logging_helper.rb#16
  def log_debug(message); end

  # source://sentry-ruby-core//lib/sentry/utils/logging_helper.rb#3
  def log_error(message, exception, debug: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/utils/logging_helper.rb#12
  def log_info(message); end

  # source://sentry-ruby-core//lib/sentry/utils/logging_helper.rb#20
  def log_warn(message); end
end

# source://sentry-ruby-core//lib/sentry-ruby.rb#31
Sentry::META = T.let(T.unsafe(nil), Hash)

# source://sentry-ruby-core//lib/sentry/net/http.rb#4
module Sentry::Net; end

# source://sentry-ruby-core//lib/sentry/net/http.rb#5
module Sentry::Net::HTTP
  # source://sentry-ruby-core//lib/sentry/net/http.rb#50
  def do_finish; end

  # source://sentry-ruby-core//lib/sentry/net/http.rb#44
  def do_start; end

  # To explain how the entire thing works, we need to know how the original Net::HTTP#request works
  # Here's part of its definition. As you can see, it usually calls itself inside a #start block
  #
  # ```
  # def request(req, body = nil, &block)
  #   unless started?
  #     start {
  #       req['connection'] ||= 'close'
  #       return request(req, body, &block) # <- request will be called for the second time from the first call
  #     }
  #   end
  #   # .....
  # end
  # ```
  #
  # So when the entire flow looks like this:
  #
  # 1. #request is called.
  #   - But because the request hasn't started yet, it calls #start (which then calls #do_start)
  #   - At this moment @sentry_span is still nil, so #set_sentry_trace_header returns early
  # 2. #do_start then creates a new Span and assigns it to @sentry_span
  # 3. #request is called for the second time.
  #   - This time @sentry_span should present. So #set_sentry_trace_header will set the sentry-trace header on the request object
  # 4. Once the request finished, it
  #   - Records a breadcrumb if http_logger is set
  #   - Finishes the Span inside @sentry_span and clears the instance variable
  #
  # source://sentry-ruby-core//lib/sentry/net/http.rb#35
  def request(req, body = T.unsafe(nil), &block); end

  private

  # source://sentry-ruby-core//lib/sentry/net/http.rb#114
  def extract_request_info(req); end

  # source://sentry-ruby-core//lib/sentry/net/http.rb#102
  def finish_sentry_span; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/net/http.rb#109
  def from_sentry_sdk?; end

  # source://sentry-ruby-core//lib/sentry/net/http.rb#65
  def record_sentry_breadcrumb(req, res); end

  # source://sentry-ruby-core//lib/sentry/net/http.rb#84
  def record_sentry_span(req, res); end

  # source://sentry-ruby-core//lib/sentry/net/http.rb#58
  def set_sentry_trace_header(req); end

  # source://sentry-ruby-core//lib/sentry/net/http.rb#92
  def start_sentry_span; end
end

# source://sentry-ruby-core//lib/sentry/net/http.rb#6
Sentry::Net::HTTP::OP_NAME = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#2
module Sentry::Rack; end

# source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#3
class Sentry::Rack::CaptureExceptions
  # @return [CaptureExceptions] a new instance of CaptureExceptions
  #
  # source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#4
  def initialize(app); end

  # source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#8
  def call(env); end

  private

  # source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#52
  def capture_exception(exception); end

  # source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#44
  def collect_exception(env); end

  # source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#64
  def finish_transaction(transaction, status_code); end

  # source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#56
  def start_transaction(env, scope); end

  # source://sentry-ruby-core//lib/sentry/rack/capture_exceptions.rb#48
  def transaction_op; end
end

# source://sentry-ruby-core//lib/sentry/interfaces/request.rb#4
class Sentry::RequestInterface < ::Sentry::Interface
  # @return [RequestInterface] a new instance of RequestInterface
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#37
  def initialize(request:); end

  # Returns the value of attribute cookies.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def cookies; end

  # Sets the attribute cookies
  #
  # @param value the value to set the attribute cookies to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def cookies=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def data=(_arg0); end

  # Returns the value of attribute env.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def env; end

  # Sets the attribute env
  #
  # @param value the value to set the attribute env to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def env=(_arg0); end

  # Returns the value of attribute headers.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def headers=(_arg0); end

  # Returns the value of attribute method.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def method; end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def method=(_arg0); end

  # Returns the value of attribute query_string.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def query_string; end

  # Sets the attribute query_string
  #
  # @param value the value to set the attribute query_string to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def query_string=(_arg0); end

  # Returns the value of attribute url.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def url; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#18
  def url=(_arg0); end

  private

  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#91
  def encode_to_utf_8(value); end

  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#119
  def filter_and_format_env(env); end

  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#68
  def filter_and_format_headers(env); end

  # Rack adds in an incorrect HTTP_VERSION key, which causes downstream
  # to think this is a Version header. Instead, this is mapped to
  # env['SERVER_PROTOCOL']. But we don't want to ignore a valid header
  # if the request has legitimately sent a Version header themselves.
  # See: https://github.com/rack/rack/blob/028438f/lib/rack/handler/cgi.rb#L29
  # NOTE: This will be removed in version 3.0+
  #
  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#115
  def is_server_protocol?(key, value, protocol_version); end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#103
  def is_skippable_header?(key); end

  # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#55
  def read_data_from(request); end

  class << self
    # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#20
    def build(env:); end

    # source://sentry-ruby-core//lib/sentry/interfaces/request.rb#26
    def clean_env(env); end
  end
end

# source://sentry-ruby-core//lib/sentry/interfaces/request.rb#6
Sentry::RequestInterface::CONTENT_HEADERS = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/interfaces/request.rb#7
Sentry::RequestInterface::IP_HEADERS = T.let(T.unsafe(nil), Array)

# See Sentry server default limits at
# https://github.com/getsentry/sentry/blob/master/src/sentry/conf/server.py
#
# source://sentry-ruby-core//lib/sentry/interfaces/request.rb#16
Sentry::RequestInterface::MAX_BODY_LIMIT = T.let(T.unsafe(nil), Integer)

# source://sentry-ruby-core//lib/sentry/interfaces/request.rb#5
Sentry::RequestInterface::REQUEST_ID_HEADERS = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry-ruby.rb#35
Sentry::SENTRY_TRACE_HEADER_NAME = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/scope.rb#5
class Sentry::Scope
  include ::Sentry::ArgumentCheckingHelper

  # @return [Scope] a new instance of Scope
  #
  # source://sentry-ruby-core//lib/sentry/scope.rb#12
  def initialize(max_breadcrumbs: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#46
  def add_breadcrumb(breadcrumb); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#163
  def add_event_processor(&block); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#21
  def apply_to_event(event, hint = T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def breadcrumbs; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#17
  def clear; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#50
  def clear_breadcrumbs; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def contexts; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#54
  def dup; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def event_processors; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def extra; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def fingerprint; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#153
  def get_span; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#149
  def get_transaction; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def level; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def rack_env; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#132
  def set_context(key, value); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#127
  def set_contexts(contexts_hash); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#114
  def set_extra(key, value); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#109
  def set_extras(extras_hash); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#157
  def set_fingerprint(fingerprint); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#137
  def set_level(level); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#94
  def set_rack_env(env); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#99
  def set_span(span); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#123
  def set_tag(key, value); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#118
  def set_tags(tags_hash); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#141
  def set_transaction_name(transaction_name); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#104
  def set_user(user_hash); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def span; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def tags; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#145
  def transaction_name; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def transaction_names; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#78
  def update_from_options(contexts: T.unsafe(nil), extra: T.unsafe(nil), tags: T.unsafe(nil), user: T.unsafe(nil), level: T.unsafe(nil), fingerprint: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#67
  def update_from_scope(scope); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#10
  def user; end

  protected

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def breadcrumbs=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def contexts=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def event_processors=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def extra=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def fingerprint=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def level=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def rack_env=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def span=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def tags=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def transaction_names=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/scope.rb#170
  def user=(_arg0); end

  private

  # source://sentry-ruby-core//lib/sentry/scope.rb#174
  def set_default_value; end

  # source://sentry-ruby-core//lib/sentry/scope.rb#188
  def set_new_breadcrumb_buffer; end

  class << self
    # source://sentry-ruby-core//lib/sentry/scope.rb#194
    def os_context; end

    # source://sentry-ruby-core//lib/sentry/scope.rb#207
    def runtime_context; end
  end
end

# source://sentry-ruby-core//lib/sentry/scope.rb#8
Sentry::Scope::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#2
class Sentry::SingleExceptionInterface < ::Sentry::Interface
  # @return [SingleExceptionInterface] a new instance of SingleExceptionInterface
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#5
  def initialize(exception:, stacktrace: T.unsafe(nil)); end

  # Returns the value of attribute module.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#3
  def module; end

  # Returns the value of attribute stacktrace.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#3
  def stacktrace; end

  # Returns the value of attribute thread_id.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#3
  def thread_id; end

  # source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#13
  def to_hash; end

  # Returns the value of attribute type.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#3
  def type; end

  # Returns the value of attribute value.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#3
  def value; end

  class << self
    # patch this method if you want to change an exception's stacktrace frames
    # also see `StacktraceBuilder.build`.
    #
    # source://sentry-ruby-core//lib/sentry/interfaces/single_exception.rb#21
    def build_with_stacktrace(exception:, stacktrace_builder:); end
  end
end

# source://sentry-ruby-core//lib/sentry/span.rb#5
class Sentry::Span
  # @return [Span] a new instance of Span
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#24
  def initialize(description: T.unsafe(nil), op: T.unsafe(nil), status: T.unsafe(nil), trace_id: T.unsafe(nil), parent_span_id: T.unsafe(nil), sampled: T.unsafe(nil), start_timestamp: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # Returns the value of attribute data.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def data; end

  # source://sentry-ruby-core//lib/sentry/span.rb#109
  def deep_dup; end

  # Returns the value of attribute description.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def description; end

  # source://sentry-ruby-core//lib/sentry/span.rb#47
  def finish; end

  # source://sentry-ruby-core//lib/sentry/span.rb#77
  def get_trace_context; end

  # Returns the value of attribute op.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def op; end

  # Returns the value of attribute parent_span_id.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def parent_span_id; end

  # Returns the value of attribute sampled.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def sampled; end

  # source://sentry-ruby-core//lib/sentry/span.rb#142
  def set_data(key, value); end

  # source://sentry-ruby-core//lib/sentry/span.rb#117
  def set_description(description); end

  # source://sentry-ruby-core//lib/sentry/span.rb#129
  def set_http_status(status_code); end

  # source://sentry-ruby-core//lib/sentry/span.rb#113
  def set_op(op); end

  # source://sentry-ruby-core//lib/sentry/span.rb#121
  def set_status(status); end

  # source://sentry-ruby-core//lib/sentry/span.rb#146
  def set_tag(key, value); end

  # source://sentry-ruby-core//lib/sentry/span.rb#125
  def set_timestamp(timestamp); end

  # Returns the value of attribute span_id.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def span_id; end

  # Returns the value of attribute span_recorder.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#22
  def span_recorder; end

  # Sets the attribute span_recorder
  #
  # @param value the value to set the attribute span_recorder to.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#22
  def span_recorder=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/span.rb#88
  def start_child(**options); end

  # Returns the value of attribute start_timestamp.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def start_timestamp; end

  # Returns the value of attribute status.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def status; end

  # Returns the value of attribute tags.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def tags; end

  # Returns the value of attribute timestamp.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def timestamp; end

  # source://sentry-ruby-core//lib/sentry/span.rb#62
  def to_hash; end

  # source://sentry-ruby-core//lib/sentry/span.rb#55
  def to_sentry_trace; end

  # Returns the value of attribute trace_id.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#21
  def trace_id; end

  # Returns the value of attribute transaction.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#22
  def transaction; end

  # Sets the attribute transaction
  #
  # @param value the value to set the attribute transaction to.
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#22
  def transaction=(_arg0); end

  # @yield [child_span]
  #
  # source://sentry-ruby-core//lib/sentry/span.rb#101
  def with_child_span(**options, &block); end
end

# source://sentry-ruby-core//lib/sentry/span.rb#6
Sentry::Span::STATUS_MAP = T.let(T.unsafe(nil), Hash)

# source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#2
class Sentry::StacktraceBuilder
  # @return [StacktraceBuilder] a new instance of StacktraceBuilder
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#5
  def initialize(project_root:, app_dirs_pattern:, linecache:, context_lines:, backtrace_cleanup_callback: T.unsafe(nil)); end

  # Returns the value of attribute app_dirs_pattern.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#3
  def app_dirs_pattern; end

  # Returns the value of attribute backtrace_cleanup_callback.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#3
  def backtrace_cleanup_callback; end

  # you can pass a block to customize/exclude frames:
  #
  # ```ruby
  # builder.build(backtrace) do |frame|
  #   if frame.module.match?(/a_gem/)
  #     nil
  #   else
  #     frame
  #   end
  # end
  # ```
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#24
  def build(backtrace:, &frame_callback); end

  # Returns the value of attribute context_lines.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#3
  def context_lines; end

  # Returns the value of attribute linecache.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#3
  def linecache; end

  # Returns the value of attribute project_root.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#3
  def project_root; end

  private

  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#38
  def convert_parsed_line_into_frame(line); end

  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace_builder.rb#44
  def parse_backtrace_lines(backtrace); end
end

# source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#2
class Sentry::StacktraceInterface
  # @return [StacktraceInterface] a new instance of StacktraceInterface
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#5
  def initialize(frames:); end

  # Returns the value of attribute frames.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#3
  def frames; end

  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#9
  def to_hash; end
end

# Not actually an interface, but I want to use the same style
#
# source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#16
class Sentry::StacktraceInterface::Frame < ::Sentry::Interface
  # @return [Frame] a new instance of Frame
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#20
  def initialize(project_root, line); end

  # Returns the value of attribute abs_path.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def abs_path; end

  # Sets the attribute abs_path
  #
  # @param value the value to set the attribute abs_path to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def abs_path=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#31
  def compute_filename; end

  # Returns the value of attribute context_line.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def context_line; end

  # Sets the attribute context_line
  #
  # @param value the value to set the attribute context_line to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def context_line=(_arg0); end

  # Returns the value of attribute filename.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def filename; end

  # Sets the attribute filename
  #
  # @param value the value to set the attribute filename to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def filename=(_arg0); end

  # Returns the value of attribute function.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def function; end

  # Sets the attribute function
  #
  # @param value the value to set the attribute function to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def function=(_arg0); end

  # Returns the value of attribute in_app.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def in_app; end

  # Sets the attribute in_app
  #
  # @param value the value to set the attribute in_app to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def in_app=(_arg0); end

  # Returns the value of attribute lineno.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def lineno; end

  # Sets the attribute lineno
  #
  # @param value the value to set the attribute lineno to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def lineno=(_arg0); end

  # Returns the value of attribute module.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def module; end

  # Sets the attribute module
  #
  # @param value the value to set the attribute module to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def module=(_arg0); end

  # Returns the value of attribute post_context.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def post_context; end

  # Sets the attribute post_context
  #
  # @param value the value to set the attribute post_context to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def post_context=(_arg0); end

  # Returns the value of attribute pre_context.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def pre_context; end

  # Sets the attribute pre_context
  #
  # @param value the value to set the attribute pre_context to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def pre_context=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#46
  def set_context(linecache, context_lines); end

  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#53
  def to_hash(*args); end

  # Returns the value of attribute vars.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def vars; end

  # Sets the attribute vars
  #
  # @param value the value to set the attribute vars to.
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#17
  def vars=(_arg0); end

  private

  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#68
  def longest_load_path; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/stacktrace.rb#64
  def under_project_root?; end
end

# source://sentry-ruby-core//lib/sentry-ruby.rb#37
Sentry::THREAD_LOCAL = T.let(T.unsafe(nil), Symbol)

# source://sentry-ruby-core//lib/sentry/interfaces/threads.rb#2
class Sentry::ThreadsInterface
  # @return [ThreadsInterface] a new instance of ThreadsInterface
  #
  # source://sentry-ruby-core//lib/sentry/interfaces/threads.rb#3
  def initialize(crashed: T.unsafe(nil), stacktrace: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/interfaces/threads.rb#11
  def to_hash; end

  class << self
    # patch this method if you want to change a threads interface's stacktrace frames
    # also see `StacktraceBuilder.build`.
    #
    # source://sentry-ruby-core//lib/sentry/interfaces/threads.rb#27
    def build(backtrace:, stacktrace_builder:, **options); end
  end
end

# source://sentry-ruby-core//lib/sentry/transaction.rb#2
class Sentry::Transaction < ::Sentry::Span
  include ::Sentry::LoggingHelper

  # @return [Transaction] a new instance of Transaction
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#17
  def initialize(hub:, name: T.unsafe(nil), parent_sampled: T.unsafe(nil), **options); end

  # Returns the value of attribute configuration.
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#15
  def configuration; end

  # source://sentry-ruby-core//lib/sentry/transaction.rb#53
  def deep_dup; end

  # source://sentry-ruby-core//lib/sentry/transaction.rb#114
  def finish(hub: T.unsafe(nil)); end

  # Returns the value of attribute hub.
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#15
  def hub; end

  # Returns the value of attribute logger.
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#15
  def logger; end

  # Returns the value of attribute name.
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#15
  def name; end

  # Returns the value of attribute parent_sampled.
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#15
  def parent_sampled; end

  # source://sentry-ruby-core//lib/sentry/transaction.rb#66
  def set_initial_sample_decision(sampling_context:); end

  # source://sentry-ruby-core//lib/sentry/transaction.rb#47
  def to_hash; end

  protected

  # source://sentry-ruby-core//lib/sentry/transaction.rb#140
  def init_span_recorder(limit = T.unsafe(nil)); end

  private

  # source://sentry-ruby-core//lib/sentry/transaction.rb#147
  def generate_transaction_description; end

  class << self
    # source://sentry-ruby-core//lib/sentry/transaction.rb#29
    def from_sentry_trace(sentry_trace, hub: T.unsafe(nil), **options); end
  end
end

# source://sentry-ruby-core//lib/sentry/transaction.rb#11
Sentry::Transaction::MESSAGE_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/transaction.rb#3
Sentry::Transaction::SENTRY_TRACE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://sentry-ruby-core//lib/sentry/transaction.rb#154
class Sentry::Transaction::SpanRecorder
  # @return [SpanRecorder] a new instance of SpanRecorder
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#157
  def initialize(max_length); end

  # source://sentry-ruby-core//lib/sentry/transaction.rb#162
  def add(span); end

  # Returns the value of attribute max_length.
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#155
  def max_length; end

  # Returns the value of attribute spans.
  #
  # source://sentry-ruby-core//lib/sentry/transaction.rb#155
  def spans; end
end

# whitespace
#
# source://sentry-ruby-core//lib/sentry/transaction.rb#10
Sentry::Transaction::UNLABELD_NAME = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/transaction_event.rb#4
class Sentry::TransactionEvent < ::Sentry::Event
  # @return [TransactionEvent] a new instance of TransactionEvent
  #
  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#21
  def initialize(configuration:, integration_meta: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def contexts; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def contexts=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def environment; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def environment=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def event_id; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def event_id=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def extra; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def extra=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def level; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def modules; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def modules=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def platform; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def platform=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def release; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def release=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def sdk; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def sdk=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def server_name; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def server_name=(_arg0); end

  # Returns the value of attribute spans.
  #
  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#19
  def spans; end

  # Sets the attribute spans
  #
  # @param value the value to set the attribute spans to.
  #
  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#19
  def spans=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def start_timestamp; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#26
  def start_timestamp=(time); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def tags; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def tags=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def timestamp; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#30
  def to_hash; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def transaction; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def transaction=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def type; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#17
  def user; end

  # source://sentry-ruby-core//lib/sentry/transaction_event.rb#16
  def user=(_arg0); end
end

# source://sentry-ruby-core//lib/sentry/transaction_event.rb#7
Sentry::TransactionEvent::SERIALIZEABLE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/transaction_event.rb#5
Sentry::TransactionEvent::TYPE = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/transaction_event.rb#14
Sentry::TransactionEvent::WRITER_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/transport/configuration.rb#2
class Sentry::Transport
  include ::Sentry::LoggingHelper

  # @return [Transport] a new instance of Transport
  #
  # source://sentry-ruby-core//lib/sentry/transport.rb#14
  def initialize(configuration); end

  # Returns the value of attribute configuration.
  #
  # source://sentry-ruby-core//lib/sentry/transport.rb#11
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  #
  # source://sentry-ruby-core//lib/sentry/transport.rb#11
  def configuration=(_arg0); end

  # source://sentry-ruby-core//lib/sentry/transport.rb#92
  def encode(event); end

  # source://sentry-ruby-core//lib/sentry/transport.rb#80
  def generate_auth_header; end

  # @return [Boolean]
  #
  # source://sentry-ruby-core//lib/sentry/transport.rb#51
  def is_rate_limited?(item_type); end

  # Returns the value of attribute logger.
  #
  # source://sentry-ruby-core//lib/sentry/transport.rb#12
  def logger; end

  # Returns the value of attribute rate_limits.
  #
  # source://sentry-ruby-core//lib/sentry/transport.rb#12
  def rate_limits; end

  # @raise [NotImplementedError]
  #
  # source://sentry-ruby-core//lib/sentry/transport.rb#22
  def send_data(data, options = T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/transport.rb#26
  def send_event(event); end

  private

  # source://sentry-ruby-core//lib/sentry/transport.rb#112
  def get_item_type(event_hash); end
end

# source://sentry-ruby-core//lib/sentry/transport/configuration.rb#3
class Sentry::Transport::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#8
  def initialize; end

  # Returns the value of attribute encoding.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def encoding; end

  # Sets the attribute encoding
  #
  # @param value the value to set the attribute encoding to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def encoding=(_arg0); end

  # Returns the value of attribute faraday_builder.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def faraday_builder; end

  # Sets the attribute faraday_builder
  #
  # @param value the value to set the attribute faraday_builder to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def faraday_builder=(_arg0); end

  # Returns the value of attribute http_adapter.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def http_adapter; end

  # Sets the attribute http_adapter
  #
  # @param value the value to set the attribute http_adapter to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def http_adapter=(_arg0); end

  # Returns the value of attribute open_timeout.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def open_timeout; end

  # Sets the attribute open_timeout
  #
  # @param value the value to set the attribute open_timeout to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def open_timeout=(_arg0); end

  # Returns the value of attribute proxy.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def proxy; end

  # Sets the attribute proxy
  #
  # @param value the value to set the attribute proxy to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def proxy=(_arg0); end

  # Returns the value of attribute ssl.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def ssl; end

  # Sets the attribute ssl
  #
  # @param value the value to set the attribute ssl to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def ssl=(_arg0); end

  # Returns the value of attribute ssl_ca_file.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def ssl_ca_file; end

  # Sets the attribute ssl_ca_file
  #
  # @param value the value to set the attribute ssl_ca_file to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def ssl_ca_file=(_arg0); end

  # Returns the value of attribute ssl_verification.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def ssl_verification; end

  # Sets the attribute ssl_verification
  #
  # @param value the value to set the attribute ssl_verification to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def ssl_verification=(_arg0); end

  # Returns the value of attribute timeout.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#4
  def timeout=(_arg0); end

  # Returns the value of attribute transport_class.
  #
  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#6
  def transport_class; end

  # source://sentry-ruby-core//lib/sentry/transport/configuration.rb#15
  def transport_class=(klass); end
end

# source://sentry-ruby-core//lib/sentry/transport.rb#6
Sentry::Transport::PROTOCOL_VERSION = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/transport.rb#7
Sentry::Transport::USER_AGENT = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/utils/exception_cause_chain.rb#2
module Sentry::Utils; end

# source://sentry-ruby-core//lib/sentry/utils/exception_cause_chain.rb#3
module Sentry::Utils::ExceptionCauseChain
  class << self
    # source://sentry-ruby-core//lib/sentry/utils/exception_cause_chain.rb#4
    def exception_to_array(exception); end
  end
end

# source://sentry-ruby-core//lib/sentry/utils/real_ip.rb#9
class Sentry::Utils::RealIp
  # @return [RealIp] a new instance of RealIp
  #
  # source://sentry-ruby-core//lib/sentry/utils/real_ip.rb#21
  def initialize(remote_addr: T.unsafe(nil), client_ip: T.unsafe(nil), real_ip: T.unsafe(nil), forwarded_for: T.unsafe(nil), trusted_proxies: T.unsafe(nil)); end

  # source://sentry-ruby-core//lib/sentry/utils/real_ip.rb#41
  def calculate_ip; end

  # Returns the value of attribute ip.
  #
  # source://sentry-ruby-core//lib/sentry/utils/real_ip.rb#19
  def ip; end

  protected

  # source://sentry-ruby-core//lib/sentry/utils/real_ip.rb#77
  def filter_trusted_proxy_addresses(ips); end

  # source://sentry-ruby-core//lib/sentry/utils/real_ip.rb#62
  def ips_from(header); end
end

# source://sentry-ruby-core//lib/sentry/utils/real_ip.rb#10
Sentry::Utils::RealIp::LOCAL_ADDRESSES = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/utils/request_id.rb#3
module Sentry::Utils::RequestId
  class << self
    # Request ID based on ActionDispatch::RequestId
    #
    # source://sentry-ruby-core//lib/sentry/utils/request_id.rb#7
    def read_from(env); end
  end
end

# source://sentry-ruby-core//lib/sentry/utils/request_id.rb#4
Sentry::Utils::RequestId::REQUEST_ID_HEADERS = T.let(T.unsafe(nil), Array)

# source://sentry-ruby-core//lib/sentry/version.rb#2
Sentry::VERSION = T.let(T.unsafe(nil), String)

# source://sentry-ruby-core//lib/sentry/core_ext/object/duplicable.rb#78
class Symbol
  include ::Comparable
end
