# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dropbox_api` gem.
# Please instead update this file by running `bin/tapioca gem dropbox_api`.

# source://dropbox_api//lib/dropbox_api/version.rb#2
module DropboxApi; end

# source://dropbox_api//lib/dropbox_api/authenticator.rb#5
class DropboxApi::Authenticator < ::OAuth2::Client
  # @return [Authenticator] a new instance of Authenticator
  #
  # source://dropbox_api//lib/dropbox_api/authenticator.rb#6
  def initialize(client_id, client_secret); end
end

# source://dropbox_api//lib/dropbox_api/chunked_uploader.rb#3
class DropboxApi::ChunkedUploader
  include ::DropboxApi::OptionsValidator

  # @return [ChunkedUploader] a new instance of ChunkedUploader
  #
  # source://dropbox_api//lib/dropbox_api/chunked_uploader.rb#6
  def initialize(client, path, i_stream, options = T.unsafe(nil)); end

  # source://dropbox_api//lib/dropbox_api/chunked_uploader.rb#32
  def finish; end

  # source://dropbox_api//lib/dropbox_api/chunked_uploader.rb#15
  def start; end

  # source://dropbox_api//lib/dropbox_api/chunked_uploader.rb#22
  def upload; end

  private

  # source://dropbox_api//lib/dropbox_api/chunked_uploader.rb#38
  def init_commit_info(path, options); end
end

# source://dropbox_api//lib/dropbox_api/client.rb#3
class DropboxApi::Client
  # @return [Client] a new instance of Client
  #
  # source://dropbox_api//lib/dropbox_api/client.rb#4
  def initialize(oauth_bearer = T.unsafe(nil), access_token: T.unsafe(nil), on_token_refreshed: T.unsafe(nil)); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def add_file_member(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def add_folder_member(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def copy(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def copy_batch(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def copy_batch_check(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def copy_reference_get(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def copy_reference_save(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def create_file_request(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def create_folder(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def create_folder_batch(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def create_folder_batch_check(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def create_shared_link_with_settings(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def delete(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def delete_batch(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def delete_batch_check(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def download(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_account(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_account_batch(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_current_account(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_metadata(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_preview(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_shared_link_metadata(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_space_usage(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_temporary_link(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_thumbnail(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def get_thumbnail_batch(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def list_file_members(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def list_folder(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def list_folder_continue(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def list_folder_get_latest_cursor(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def list_folder_longpoll(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def list_folder_members(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def list_revisions(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def list_shared_links(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#21
  def middleware; end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def move(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#29
  def namespace_id; end

  # source://dropbox_api//lib/dropbox_api/client.rb#25
  def namespace_id=(value); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def permanently_delete(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def restore(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def revoke_shared_link(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def save_url(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def save_url_check_job_status(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def search(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def search_continue(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def share_folder(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def token_revoke(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def unshare_file(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def upload(*args, &block); end

  # Creates a new file using the *upload session* endpoints. You can use
  # this method to upload files larger than 150 MB.
  #
  # @example
  #   client = DropboxApi::Client.new
  #   File.open "large file.avi" do |file|
  #   client.upload "/large file.avi", file
  #   #=> #<DropboxApi::Metadata::File: @name="large file.avi" ...>
  #   end
  # @example
  #   client = DropboxApi::Client.new
  #   client.upload "/file.txt", "File contents...", :mode => :add
  #   #=> #<DropboxApi::Metadata::File: @name="file (1).txt" ...>
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param path [String] Path in the user's Dropbox to save the file.
  # @param content The contents of the file that will be uploaded. This
  #   could be the result of the `IO::read` method.
  # @param options [Hash] a customizable set of options
  # @see DropboxApi::Metadata::WriteMode
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/virtual/upload_by_chunks.rb#41
  def upload_by_chunks(path, content, options = T.unsafe(nil)); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def upload_session_append_v2(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def upload_session_finish(*args, &block); end

  # source://dropbox_api//lib/dropbox_api/client.rb#35
  def upload_session_start(*args, &block); end

  class << self
    # source://dropbox_api//lib/dropbox_api/client.rb#34
    def add_endpoint(name, endpoint); end
  end
end

# source://dropbox_api//lib/dropbox_api/connection_builder.rb#3
class DropboxApi::ConnectionBuilder
  # @return [ConnectionBuilder] a new instance of ConnectionBuilder
  #
  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#6
  def initialize(oauth_bearer = T.unsafe(nil), access_token: T.unsafe(nil), on_token_refreshed: T.unsafe(nil)); end

  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#44
  def build(url); end

  # @return [Boolean]
  #
  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#25
  def can_refresh_access_token?; end

  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#21
  def middleware; end

  # Returns the value of attribute namespace_id.
  #
  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#4
  def namespace_id; end

  # Sets the attribute namespace_id
  #
  # @param value the value to set the attribute namespace_id to.
  #
  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#4
  def namespace_id=(_arg0); end

  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#29
  def refresh_access_token; end

  private

  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#34
  def bearer; end

  # source://dropbox_api//lib/dropbox_api/connection_builder.rb#38
  def oauth_bearer_from_access_token; end
end

# source://dropbox_api//lib/dropbox_api/endpoints/base.rb#2
module DropboxApi::Endpoints; end

# source://dropbox_api//lib/dropbox_api/endpoints/auth/token_revoke.rb#2
module DropboxApi::Endpoints::Auth; end

# source://dropbox_api//lib/dropbox_api/endpoints/auth/token_revoke.rb#3
class DropboxApi::Endpoints::Auth::TokenRevoke < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/auth/token_revoke.rb#11
  def token_revoke; end
end

# source://dropbox_api//lib/dropbox_api/endpoints/auth/token_revoke.rb#7
DropboxApi::Endpoints::Auth::TokenRevoke::ErrorType = T.let(T.unsafe(nil), T.untyped)

# source://dropbox_api//lib/dropbox_api/endpoints/auth/token_revoke.rb#4
DropboxApi::Endpoints::Auth::TokenRevoke::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/auth/token_revoke.rb#5
DropboxApi::Endpoints::Auth::TokenRevoke::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/auth/token_revoke.rb#6
DropboxApi::Endpoints::Auth::TokenRevoke::ResultType = DropboxApi::Results::VoidResult

# source://dropbox_api//lib/dropbox_api/endpoints/base.rb#3
class DropboxApi::Endpoints::Base
  # @return [Base] a new instance of Base
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/base.rb#4
  def initialize(builder); end

  private

  # source://dropbox_api//lib/dropbox_api/endpoints/base.rb#62
  def build_result(api_result); end

  # source://dropbox_api//lib/dropbox_api/endpoints/base.rb#28
  def get_response(*args); end

  # source://dropbox_api//lib/dropbox_api/endpoints/base.rb#16
  def perform_request(params); end

  # source://dropbox_api//lib/dropbox_api/endpoints/base.rb#32
  def process_response(raw_response); end

  # source://dropbox_api//lib/dropbox_api/endpoints/base.rb#72
  def run_request(body, headers); end

  class << self
    # source://dropbox_api//lib/dropbox_api/endpoints/base.rb#9
    def add_endpoint(name, &block); end
  end
end

# source://dropbox_api//lib/dropbox_api/endpoints/content_download.rb#3
class DropboxApi::Endpoints::ContentDownload < ::DropboxApi::Endpoints::Base
  # source://dropbox_api//lib/dropbox_api/endpoints/content_download.rb#4
  def build_connection; end

  # source://dropbox_api//lib/dropbox_api/endpoints/content_download.rb#10
  def build_request(params); end

  # @yield [response.body]
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/content_download.rb#20
  def perform_request(params); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/content_upload.rb#3
class DropboxApi::Endpoints::ContentUpload < ::DropboxApi::Endpoints::Base
  # source://dropbox_api//lib/dropbox_api/endpoints/content_upload.rb#4
  def build_connection; end

  # source://dropbox_api//lib/dropbox_api/endpoints/content_upload.rb#10
  def build_request(params, body); end

  # source://dropbox_api//lib/dropbox_api/endpoints/content_upload.rb#22
  def perform_request(params, content); end

  private

  # source://dropbox_api//lib/dropbox_api/endpoints/content_upload.rb#28
  def get_content_length(content); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy.rb#2
module DropboxApi::Endpoints::Files; end

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy.rb#3
class DropboxApi::Endpoints::Files::Copy < ::DropboxApi::Endpoints::Rpc
  # Copy a file or folder to a different location in the user's Dropbox.
  # If the source path is a folder all its contents will be copied.
  #
  # @param from [String] Path in the user's Dropbox to be copied or moved.
  # @param to [String] Path in the user's Dropbox that is the destination.
  # @return The moved file.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/copy.rb#15
  def copy(from, to); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy.rb#7
DropboxApi::Endpoints::Files::Copy::ErrorType = DropboxApi::Errors::RelocationError

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy.rb#4
DropboxApi::Endpoints::Files::Copy::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy.rb#5
DropboxApi::Endpoints::Files::Copy::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy.rb#6
DropboxApi::Endpoints::Files::Copy::ResultType = DropboxApi::Metadata::Resource

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch.rb#3
class DropboxApi::Endpoints::Files::CopyBatch < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # Copy multiple files or folders to different locations at once in the
  # user's Dropbox.
  #
  # This will either finish synchronously, or return a job ID and do
  # the async copy job in background. Please use {Client#copy_batch_check}
  # to check the job status.
  #
  # Note: No errors are returned by this endpoint.
  #
  # @option options
  # @param entries [Array<Hash>] List of entries to be moved or copied.
  #   Each entry must be a hash with two keys: `:from_path` & `:to_path`.
  # @return [String, Array] Either the job id or the list of job statuses.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch.rb#25
  def copy_batch(entries, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch.rb#4
DropboxApi::Endpoints::Files::CopyBatch::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch.rb#5
DropboxApi::Endpoints::Files::CopyBatch::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch.rb#6
DropboxApi::Endpoints::Files::CopyBatch::ResultType = DropboxApi::Results::CopyBatchResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch_check.rb#3
class DropboxApi::Endpoints::Files::CopyBatchCheck < ::DropboxApi::Endpoints::Rpc
  # Returns the status of an asynchronous job for {Client#copy_batch}. It
  # returns a list of results for each entry.
  #
  # @param async_job_id [String] Id of the asynchronous job.
  #   This is the value of a response returned from the method that
  #   launched the job.
  # @return [:in_progress, Array] This could be either the `:in_progress`
  #   flag or a list of job statuses.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch_check.rb#17
  def copy_batch_check(async_job_id); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch_check.rb#7
DropboxApi::Endpoints::Files::CopyBatchCheck::ErrorType = DropboxApi::Errors::PollError

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch_check.rb#4
DropboxApi::Endpoints::Files::CopyBatchCheck::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch_check.rb#5
DropboxApi::Endpoints::Files::CopyBatchCheck::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_batch_check.rb#6
DropboxApi::Endpoints::Files::CopyBatchCheck::ResultType = DropboxApi::Results::RelocationBatchResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_get.rb#3
class DropboxApi::Endpoints::Files::CopyReferenceGet < ::DropboxApi::Endpoints::Rpc
  # Get a copy reference to a file or folder.
  # This reference string can be used to save that file or folder
  # to another user's Dropbox by passing it to {Client#copy_reference_save}.
  #
  # @param path [String] The path to the file or folder you want to get a
  #   copy reference to.
  # @return [DropboxApi::Results::GetCopyReferenceResult]
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_get.rb#16
  def copy_reference_get(path); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_get.rb#7
DropboxApi::Endpoints::Files::CopyReferenceGet::ErrorType = DropboxApi::Errors::GetCopyReferenceError

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_get.rb#4
DropboxApi::Endpoints::Files::CopyReferenceGet::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_get.rb#5
DropboxApi::Endpoints::Files::CopyReferenceGet::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_get.rb#6
DropboxApi::Endpoints::Files::CopyReferenceGet::ResultType = DropboxApi::Results::GetCopyReferenceResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_save.rb#3
class DropboxApi::Endpoints::Files::CopyReferenceSave < ::DropboxApi::Endpoints::Rpc
  # Save a copy reference returned by {Client#copy_reference_get} to the
  # user's Dropbox.
  #
  # @param copy_reference [String] A copy reference returned by
  #   {Client#copy_reference_get}.
  # @param path [String] Path in the user's Dropbox that is the destination.
  # @return [DropboxApi::Results::SaveCopyReferenceResult]
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_save.rb#16
  def copy_reference_save(copy_reference, path); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_save.rb#7
DropboxApi::Endpoints::Files::CopyReferenceSave::ErrorType = DropboxApi::Errors::SaveCopyReferenceError

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_save.rb#4
DropboxApi::Endpoints::Files::CopyReferenceSave::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_save.rb#5
DropboxApi::Endpoints::Files::CopyReferenceSave::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/copy_reference_save.rb#6
DropboxApi::Endpoints::Files::CopyReferenceSave::ResultType = DropboxApi::Results::SaveCopyReferenceResult

# source://dropbox_api//lib/dropbox_api/endpoints/file_requests/create_file_request.rb#3
class DropboxApi::Endpoints::Files::CreateFileRequest < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/file_requests/create_file_request.rb#15
  def create_file_request(title, destination); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/file_requests/create_file_request.rb#7
DropboxApi::Endpoints::Files::CreateFileRequest::ErrorType = DropboxApi::Errors::CreateFileRequestError

# source://dropbox_api//lib/dropbox_api/endpoints/file_requests/create_file_request.rb#4
DropboxApi::Endpoints::Files::CreateFileRequest::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/file_requests/create_file_request.rb#5
DropboxApi::Endpoints::Files::CreateFileRequest::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/file_requests/create_file_request.rb#6
DropboxApi::Endpoints::Files::CreateFileRequest::ResultType = DropboxApi::Metadata::FileRequest

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder.rb#3
class DropboxApi::Endpoints::Files::CreateFolder < ::DropboxApi::Endpoints::Rpc
  # Create a folder at a given path.
  #
  # @param path [String] Path in the user's Dropbox to create.
  # @return [DropboxApi::Metadata::Folder] The new folder.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder.rb#13
  def create_folder(path); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder.rb#7
DropboxApi::Endpoints::Files::CreateFolder::ErrorType = DropboxApi::Errors::CreateFolderError

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder.rb#4
DropboxApi::Endpoints::Files::CreateFolder::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder.rb#5
DropboxApi::Endpoints::Files::CreateFolder::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder.rb#6
DropboxApi::Endpoints::Files::CreateFolder::ResultType = DropboxApi::Metadata::Folder

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch.rb#3
class DropboxApi::Endpoints::Files::CreateFolderBatch < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # Create multiple folders at once.
  #
  # This route is asynchronous for large batches, which returns a job ID
  # immediately and runs the create folder batch asynchronously. Otherwise,
  # creates the folders and returns the result synchronously for smaller
  # inputs. You can force asynchronous behaviour by using the `:force_async`
  # flag. Use {Client#create_folder_batch_check} to check the job status.
  #
  # Note: No errors are returned by this endpoint.
  #
  # @option options
  # @option options
  # @param paths [Array] List of paths to be created in the user's Dropbox.
  #   Duplicate path arguments in the batch are considered only once.
  # @return [String, Array] Either the job id or the list of job statuses.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch.rb#28
  def create_folder_batch(paths, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch.rb#4
DropboxApi::Endpoints::Files::CreateFolderBatch::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch.rb#5
DropboxApi::Endpoints::Files::CreateFolderBatch::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch.rb#6
DropboxApi::Endpoints::Files::CreateFolderBatch::ResultType = DropboxApi::Results::CreateFolderBatchResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch_check.rb#3
class DropboxApi::Endpoints::Files::CreateFolderBatchCheck < ::DropboxApi::Endpoints::Rpc
  # Returns the status of an asynchronous job for create_folder_batch.
  # If success, it returns list of result for each entry.
  #
  # @param async_job_id [String] Id of the asynchronous job.
  #   This is the value of a response returned from the method that launched
  #   the job.
  # @return [Array] A list of one result for each entry.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch_check.rb#16
  def create_folder_batch_check(async_job_id); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch_check.rb#7
DropboxApi::Endpoints::Files::CreateFolderBatchCheck::ErrorType = DropboxApi::Errors::PollError

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch_check.rb#4
DropboxApi::Endpoints::Files::CreateFolderBatchCheck::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch_check.rb#5
DropboxApi::Endpoints::Files::CreateFolderBatchCheck::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/create_folder_batch_check.rb#6
DropboxApi::Endpoints::Files::CreateFolderBatchCheck::ResultType = DropboxApi::Results::CreateFolderBatchResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete.rb#3
class DropboxApi::Endpoints::Files::Delete < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/delete.rb#25
  def delete(path, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete.rb#7
DropboxApi::Endpoints::Files::Delete::ErrorType = DropboxApi::Errors::DeleteError

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete.rb#4
DropboxApi::Endpoints::Files::Delete::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete.rb#5
DropboxApi::Endpoints::Files::Delete::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete.rb#6
DropboxApi::Endpoints::Files::Delete::ResultType = DropboxApi::Metadata::Resource

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch.rb#3
class DropboxApi::Endpoints::Files::DeleteBatch < ::DropboxApi::Endpoints::Rpc
  # Delete multiple files/folders at once.
  #
  # This route is asynchronous, which returns a job ID immediately and runs
  # the delete batch asynchronously. Use {Client#delete_batch_check} to check
  # the job status.
  #
  # @param entries [Array] List of entries, each entry is a Hash with these
  #   fields: `path` (mandatory) & parent_rev (optional).
  # @return [String, Array] Either the job id or the list of job statuses.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch.rb#17
  def delete_batch(entries); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch.rb#4
DropboxApi::Endpoints::Files::DeleteBatch::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch.rb#5
DropboxApi::Endpoints::Files::DeleteBatch::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch.rb#6
DropboxApi::Endpoints::Files::DeleteBatch::ResultType = DropboxApi::Results::DeleteBatchResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch_check.rb#3
class DropboxApi::Endpoints::Files::DeleteBatchCheck < ::DropboxApi::Endpoints::Rpc
  # Returns the status of an asynchronous job for delete_batch. If success,
  # it returns list of result for each entry.
  #
  # @param async_job_id [String] Id of the asynchronous job.
  # @return [:in_progress, Array] This could be either the `:in_progress`
  #   flag or a list of job statuses.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch_check.rb#15
  def delete_batch_check(async_job_id); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch_check.rb#7
DropboxApi::Endpoints::Files::DeleteBatchCheck::ErrorType = DropboxApi::Errors::PollError

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch_check.rb#4
DropboxApi::Endpoints::Files::DeleteBatchCheck::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch_check.rb#5
DropboxApi::Endpoints::Files::DeleteBatchCheck::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/delete_batch_check.rb#6
DropboxApi::Endpoints::Files::DeleteBatchCheck::ResultType = DropboxApi::Results::DeleteBatchResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/download.rb#3
class DropboxApi::Endpoints::Files::Download < ::DropboxApi::Endpoints::ContentDownload
  # source://dropbox_api//lib/dropbox_api/endpoints/files/download.rb#12
  def download(path, &block); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/download.rb#7
DropboxApi::Endpoints::Files::Download::ErrorType = DropboxApi::Errors::DownloadError

# source://dropbox_api//lib/dropbox_api/endpoints/files/download.rb#4
DropboxApi::Endpoints::Files::Download::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/download.rb#5
DropboxApi::Endpoints::Files::Download::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/download.rb#6
DropboxApi::Endpoints::Files::Download::ResultType = DropboxApi::Metadata::File

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_metadata.rb#3
class DropboxApi::Endpoints::Files::GetMetadata < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/get_metadata.rb#30
  def get_metadata(path, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_metadata.rb#7
DropboxApi::Endpoints::Files::GetMetadata::ErrorType = DropboxApi::Errors::GetMetadataError

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_metadata.rb#4
DropboxApi::Endpoints::Files::GetMetadata::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_metadata.rb#5
DropboxApi::Endpoints::Files::GetMetadata::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_metadata.rb#6
DropboxApi::Endpoints::Files::GetMetadata::ResultType = DropboxApi::Metadata::Resource

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_preview.rb#3
class DropboxApi::Endpoints::Files::GetPreview < ::DropboxApi::Endpoints::ContentDownload
  # source://dropbox_api//lib/dropbox_api/endpoints/files/get_preview.rb#14
  def get_preview(path, &block); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_preview.rb#7
DropboxApi::Endpoints::Files::GetPreview::ErrorType = DropboxApi::Errors::PreviewError

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_preview.rb#4
DropboxApi::Endpoints::Files::GetPreview::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_preview.rb#5
DropboxApi::Endpoints::Files::GetPreview::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_preview.rb#6
DropboxApi::Endpoints::Files::GetPreview::ResultType = DropboxApi::Metadata::File

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_temporary_link.rb#3
class DropboxApi::Endpoints::Files::GetTemporaryLink < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/files/get_temporary_link.rb#14
  def get_temporary_link(path); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_temporary_link.rb#7
DropboxApi::Endpoints::Files::GetTemporaryLink::ErrorType = DropboxApi::Errors::GetMetadataError

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_temporary_link.rb#4
DropboxApi::Endpoints::Files::GetTemporaryLink::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_temporary_link.rb#5
DropboxApi::Endpoints::Files::GetTemporaryLink::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_temporary_link.rb#6
DropboxApi::Endpoints::Files::GetTemporaryLink::ResultType = DropboxApi::Results::GetTemporaryLinkResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail.rb#3
class DropboxApi::Endpoints::Files::GetThumbnail < ::DropboxApi::Endpoints::ContentDownload
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail.rb#48
  def get_thumbnail(path, options = T.unsafe(nil), &block); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail.rb#7
DropboxApi::Endpoints::Files::GetThumbnail::ErrorType = DropboxApi::Errors::PreviewError

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail.rb#4
DropboxApi::Endpoints::Files::GetThumbnail::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail.rb#5
DropboxApi::Endpoints::Files::GetThumbnail::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail.rb#6
DropboxApi::Endpoints::Files::GetThumbnail::ResultType = DropboxApi::Metadata::File

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail_batch.rb#3
class DropboxApi::Endpoints::Files::GetThumbnailBatch < ::DropboxApi::Endpoints::RpcContent
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail_batch.rb#32
  def build_entries_params(paths, options); end

  # source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail_batch.rb#23
  def get_thumbnail_batch(paths, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail_batch.rb#7
DropboxApi::Endpoints::Files::GetThumbnailBatch::ErrorType = DropboxApi::Errors::ThumbnailBatchError

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail_batch.rb#4
DropboxApi::Endpoints::Files::GetThumbnailBatch::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail_batch.rb#5
DropboxApi::Endpoints::Files::GetThumbnailBatch::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/get_thumbnail_batch.rb#6
DropboxApi::Endpoints::Files::GetThumbnailBatch::ResultType = DropboxApi::Results::GetThumbnailBatchResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder.rb#3
class DropboxApi::Endpoints::Files::ListFolder < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder.rb#29
  def list_folder(path, options = T.unsafe(nil)); end

  private

  # source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder.rb#51
  def build_shared_link_param(shared_link_param); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder.rb#7
DropboxApi::Endpoints::Files::ListFolder::ErrorType = DropboxApi::Errors::ListFolderError

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder.rb#4
DropboxApi::Endpoints::Files::ListFolder::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder.rb#5
DropboxApi::Endpoints::Files::ListFolder::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder.rb#6
DropboxApi::Endpoints::Files::ListFolder::ResultType = DropboxApi::Results::ListFolderResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_continue.rb#3
class DropboxApi::Endpoints::Files::ListFolderContinue < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_continue.rb#17
  def list_folder_continue(cursor); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_continue.rb#10
DropboxApi::Endpoints::Files::ListFolderContinue::ErrorType = DropboxApi::Errors::ListFolderContinueError

# NOTE: This hasn't been tested with real data, I couldn't make a query
#       long enough to enable the `has_more` attribute in the
#       `ListFolderResult`.
#
# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_continue.rb#7
DropboxApi::Endpoints::Files::ListFolderContinue::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_continue.rb#8
DropboxApi::Endpoints::Files::ListFolderContinue::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_continue.rb#9
DropboxApi::Endpoints::Files::ListFolderContinue::ResultType = DropboxApi::Results::ListFolderResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_get_latest_cursor.rb#3
class DropboxApi::Endpoints::Files::ListFolderGetLatestCursor < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_get_latest_cursor.rb#28
  def list_folder_get_latest_cursor(options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_get_latest_cursor.rb#7
DropboxApi::Endpoints::Files::ListFolderGetLatestCursor::ErrorType = DropboxApi::Errors::ListFolderError

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_get_latest_cursor.rb#4
DropboxApi::Endpoints::Files::ListFolderGetLatestCursor::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_get_latest_cursor.rb#5
DropboxApi::Endpoints::Files::ListFolderGetLatestCursor::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_get_latest_cursor.rb#6
DropboxApi::Endpoints::Files::ListFolderGetLatestCursor::ResultType = DropboxApi::Results::ListFolderGetLatestCursorResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_longpoll.rb#3
class DropboxApi::Endpoints::Files::ListFolderLongpoll < ::DropboxApi::Endpoints::RpcNotify
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_longpoll.rb#25
  def list_folder_longpoll(cursor, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_longpoll.rb#7
DropboxApi::Endpoints::Files::ListFolderLongpoll::ErrorType = DropboxApi::Errors::ListFolderLongpollError

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_longpoll.rb#4
DropboxApi::Endpoints::Files::ListFolderLongpoll::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_longpoll.rb#5
DropboxApi::Endpoints::Files::ListFolderLongpoll::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_folder_longpoll.rb#6
DropboxApi::Endpoints::Files::ListFolderLongpoll::ResultType = DropboxApi::Results::ListFolderLongpollResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_revisions.rb#3
class DropboxApi::Endpoints::Files::ListRevisions < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/list_revisions.rb#16
  def list_revisions(path, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_revisions.rb#7
DropboxApi::Endpoints::Files::ListRevisions::ErrorType = DropboxApi::Errors::ListRevisionsError

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_revisions.rb#4
DropboxApi::Endpoints::Files::ListRevisions::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_revisions.rb#5
DropboxApi::Endpoints::Files::ListRevisions::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/list_revisions.rb#6
DropboxApi::Endpoints::Files::ListRevisions::ResultType = DropboxApi::Results::ListRevisionsResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/move.rb#3
class DropboxApi::Endpoints::Files::Move < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/move.rb#20
  def move(from, to, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/move.rb#7
DropboxApi::Endpoints::Files::Move::ErrorType = DropboxApi::Errors::RelocationError

# source://dropbox_api//lib/dropbox_api/endpoints/files/move.rb#4
DropboxApi::Endpoints::Files::Move::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/move.rb#5
DropboxApi::Endpoints::Files::Move::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/move.rb#6
DropboxApi::Endpoints::Files::Move::ResultType = DropboxApi::Metadata::Resource

# source://dropbox_api//lib/dropbox_api/endpoints/files/permanently_delete.rb#3
class DropboxApi::Endpoints::Files::PermanentlyDelete < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/permanently_delete.rb#21
  def permanently_delete(path, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/permanently_delete.rb#7
DropboxApi::Endpoints::Files::PermanentlyDelete::ErrorType = DropboxApi::Errors::DeleteError

# source://dropbox_api//lib/dropbox_api/endpoints/files/permanently_delete.rb#4
DropboxApi::Endpoints::Files::PermanentlyDelete::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/permanently_delete.rb#5
DropboxApi::Endpoints::Files::PermanentlyDelete::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/permanently_delete.rb#6
DropboxApi::Endpoints::Files::PermanentlyDelete::ResultType = DropboxApi::Results::VoidResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/restore.rb#3
class DropboxApi::Endpoints::Files::Restore < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/files/restore.rb#13
  def restore(path, rev); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/restore.rb#7
DropboxApi::Endpoints::Files::Restore::ErrorType = DropboxApi::Errors::RestoreError

# source://dropbox_api//lib/dropbox_api/endpoints/files/restore.rb#4
DropboxApi::Endpoints::Files::Restore::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/restore.rb#5
DropboxApi::Endpoints::Files::Restore::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/restore.rb#6
DropboxApi::Endpoints::Files::Restore::ResultType = DropboxApi::Metadata::File

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url.rb#3
class DropboxApi::Endpoints::Files::SaveUrl < ::DropboxApi::Endpoints::Rpc
  # Save a specified URL into a file in user's Dropbox. If the given path
  # already exists, the file will be renamed to avoid the conflict (e.g.
  # myfile (1).txt).
  #
  # @param path [String] The path in Dropbox where the URL will be saved to.
  # @param url [String] The URL to be saved.
  # @return Either the saved file or a reference to the async job.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/save_url.rb#16
  def save_url(path, url); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url.rb#7
DropboxApi::Endpoints::Files::SaveUrl::ErrorType = DropboxApi::Errors::SaveUrlError

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url.rb#4
DropboxApi::Endpoints::Files::SaveUrl::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url.rb#5
DropboxApi::Endpoints::Files::SaveUrl::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url.rb#6
DropboxApi::Endpoints::Files::SaveUrl::ResultType = DropboxApi::Results::SaveUrlResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url_check_job_status.rb#3
class DropboxApi::Endpoints::Files::SaveUrlCheckJobStatus < ::DropboxApi::Endpoints::Rpc
  # Check the status of a `save_url` job.
  #
  # @param job_id [String] Id of the asynchronous job. This is the value of
  #   a response returned from the method that launched the job.
  # @return The current status of the job.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/save_url_check_job_status.rb#14
  def save_url_check_job_status(job_id); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url_check_job_status.rb#7
DropboxApi::Endpoints::Files::SaveUrlCheckJobStatus::ErrorType = DropboxApi::Errors::PollError

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url_check_job_status.rb#4
DropboxApi::Endpoints::Files::SaveUrlCheckJobStatus::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url_check_job_status.rb#5
DropboxApi::Endpoints::Files::SaveUrlCheckJobStatus::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/save_url_check_job_status.rb#6
DropboxApi::Endpoints::Files::SaveUrlCheckJobStatus::ResultType = DropboxApi::Results::SaveUrlJobStatus

# source://dropbox_api//lib/dropbox_api/endpoints/files/search.rb#3
class DropboxApi::Endpoints::Files::Search < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/search.rb#22
  def search(query, options = T.unsafe(nil), match_field_options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/search.rb#7
DropboxApi::Endpoints::Files::Search::ErrorType = DropboxApi::Errors::SearchError

# source://dropbox_api//lib/dropbox_api/endpoints/files/search.rb#4
DropboxApi::Endpoints::Files::Search::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/search.rb#5
DropboxApi::Endpoints::Files::Search::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/search.rb#6
DropboxApi::Endpoints::Files::Search::ResultType = DropboxApi::Results::SearchV2Result

# source://dropbox_api//lib/dropbox_api/endpoints/files/search_continue.rb#3
class DropboxApi::Endpoints::Files::SearchContinue < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/search_continue.rb#19
  def search_continue(cursor); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/search_continue.rb#7
DropboxApi::Endpoints::Files::SearchContinue::ErrorType = DropboxApi::Errors::SearchError

# source://dropbox_api//lib/dropbox_api/endpoints/files/search_continue.rb#4
DropboxApi::Endpoints::Files::SearchContinue::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/search_continue.rb#5
DropboxApi::Endpoints::Files::SearchContinue::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/search_continue.rb#6
DropboxApi::Endpoints::Files::SearchContinue::ResultType = DropboxApi::Results::SearchV2Result

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload.rb#3
class DropboxApi::Endpoints::Files::Upload < ::DropboxApi::Endpoints::ContentUpload
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/upload.rb#50
  def upload(path, content, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload.rb#7
DropboxApi::Endpoints::Files::Upload::ErrorType = DropboxApi::Errors::UploadError

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload.rb#4
DropboxApi::Endpoints::Files::Upload::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload.rb#5
DropboxApi::Endpoints::Files::Upload::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload.rb#6
DropboxApi::Endpoints::Files::Upload::ResultType = DropboxApi::Metadata::File

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_append_v2.rb#3
class DropboxApi::Endpoints::Files::UploadSessionAppendV2 < ::DropboxApi::Endpoints::ContentUpload
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_append_v2.rb#39
  def upload_session_append_v2(cursor, content, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_append_v2.rb#7
DropboxApi::Endpoints::Files::UploadSessionAppendV2::ErrorType = DropboxApi::Errors::UploadSessionLookupError

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_append_v2.rb#4
DropboxApi::Endpoints::Files::UploadSessionAppendV2::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_append_v2.rb#5
DropboxApi::Endpoints::Files::UploadSessionAppendV2::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_append_v2.rb#6
DropboxApi::Endpoints::Files::UploadSessionAppendV2::ResultType = DropboxApi::Results::VoidResult

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_finish.rb#3
class DropboxApi::Endpoints::Files::UploadSessionFinish < ::DropboxApi::Endpoints::ContentUpload
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_finish.rb#22
  def upload_session_finish(cursor, commit, content = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_finish.rb#7
DropboxApi::Endpoints::Files::UploadSessionFinish::ErrorType = DropboxApi::Errors::UploadSessionFinishError

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_finish.rb#4
DropboxApi::Endpoints::Files::UploadSessionFinish::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_finish.rb#5
DropboxApi::Endpoints::Files::UploadSessionFinish::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_finish.rb#6
DropboxApi::Endpoints::Files::UploadSessionFinish::ResultType = DropboxApi::Metadata::File

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_start.rb#3
class DropboxApi::Endpoints::Files::UploadSessionStart < ::DropboxApi::Endpoints::ContentUpload
  include ::DropboxApi::OptionsValidator

  # Upload sessions allow you to upload a single file in one or more
  # requests, for example where the size of the file is greater than 150 MB.
  #
  # This call starts a new upload session with the given data. You can then
  # use {Client#upload_session_append_v2} to add more data and
  # {Client#upload_session_finish} to save all the data to a file in Dropbox.
  #
  # A single request should not upload more than 150 MB of file contents.
  #
  # @option options
  # @return [DropboxApi::Metadata::UploadSessionCursor] The session cursor
  #   that you can use to continue the upload afterwards.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_start.rb#26
  def upload_session_start(content, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_start.rb#7
DropboxApi::Endpoints::Files::UploadSessionStart::ErrorType = T.let(T.unsafe(nil), T.untyped)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_start.rb#4
DropboxApi::Endpoints::Files::UploadSessionStart::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_start.rb#5
DropboxApi::Endpoints::Files::UploadSessionStart::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/files/upload_session_start.rb#6
DropboxApi::Endpoints::Files::UploadSessionStart::ResultType = DropboxApi::Results::UploadSessionStart

# source://dropbox_api//lib/dropbox_api/endpoints/rpc.rb#3
class DropboxApi::Endpoints::Rpc < ::DropboxApi::Endpoints::Base
  # source://dropbox_api//lib/dropbox_api/endpoints/rpc.rb#4
  def build_connection; end

  # source://dropbox_api//lib/dropbox_api/endpoints/rpc.rb#10
  def build_request(params); end

  # source://dropbox_api//lib/dropbox_api/endpoints/rpc.rb#18
  def request_body(params); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/rpc_content.rb#3
class DropboxApi::Endpoints::RpcContent < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/rpc_content.rb#4
  def build_connection; end
end

# source://dropbox_api//lib/dropbox_api/endpoints/rpc_notify.rb#3
class DropboxApi::Endpoints::RpcNotify < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/rpc_notify.rb#4
  def build_connection; end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_file_member.rb#2
module DropboxApi::Endpoints::Sharing; end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_file_member.rb#3
class DropboxApi::Endpoints::Sharing::AddFileMember < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_file_member.rb#34
  def add_file_member(file, members, options = T.unsafe(nil)); end

  private

  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_file_member.rb#49
  def build_members_param(members); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_file_member.rb#7
DropboxApi::Endpoints::Sharing::AddFileMember::ErrorType = DropboxApi::Errors::AddFileMemberError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_file_member.rb#4
DropboxApi::Endpoints::Sharing::AddFileMember::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_file_member.rb#5
DropboxApi::Endpoints::Sharing::AddFileMember::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_file_member.rb#6
DropboxApi::Endpoints::Sharing::AddFileMember::ResultType = DropboxApi::Results::AddFileMemberResultList

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_folder_member.rb#3
class DropboxApi::Endpoints::Sharing::AddFolderMember < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_folder_member.rb#39
  def add_folder_member(folder_id, members, options = T.unsafe(nil)); end

  private

  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_folder_member.rb#52
  def build_members_param(members); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_folder_member.rb#7
DropboxApi::Endpoints::Sharing::AddFolderMember::ErrorType = DropboxApi::Errors::AddFolderMemberError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_folder_member.rb#4
DropboxApi::Endpoints::Sharing::AddFolderMember::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_folder_member.rb#5
DropboxApi::Endpoints::Sharing::AddFolderMember::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/add_folder_member.rb#6
DropboxApi::Endpoints::Sharing::AddFolderMember::ResultType = DropboxApi::Results::VoidResult

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/create_shared_link_with_settings.rb#3
class DropboxApi::Endpoints::Sharing::CreateSharedLinkWithSettings < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # Create a shared link with custom settings. If no settings are given then
  # the default visibility is :public. (The resolved
  # visibility, though, may depend on other aspects such as team and shared
  # folder settings).
  #
  # NOTE: The `settings` parameter will only work for pro, business or
  # enterprise accounts. It will return no permission error otherwise.
  #
  # @option settings
  # @option settings
  # @option settings
  # @param path [String] The path to be shared by the shared link.
  # @param settings [SharedLinkSettings] The requested settings for the newly
  #   created shared link This field is optional.
  # @return [DropboxApi::Metadata::SharedLinkMetadata]
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/create_shared_link_with_settings.rb#32
  def create_shared_link_with_settings(path, settings = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/create_shared_link_with_settings.rb#7
DropboxApi::Endpoints::Sharing::CreateSharedLinkWithSettings::ErrorType = DropboxApi::Errors::CreateSharedLinkWithSettingsError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/create_shared_link_with_settings.rb#4
DropboxApi::Endpoints::Sharing::CreateSharedLinkWithSettings::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/create_shared_link_with_settings.rb#5
DropboxApi::Endpoints::Sharing::CreateSharedLinkWithSettings::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/create_shared_link_with_settings.rb#6
DropboxApi::Endpoints::Sharing::CreateSharedLinkWithSettings::ResultType = DropboxApi::Metadata::SharedLinkMetadata

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/get_shared_link_metadata.rb#3
class DropboxApi::Endpoints::Sharing::GetSharedLinkMetadata < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # Get the Metadata for a shared link
  #
  # If a preview url is given, returns the shared file or folder
  # that is represent by that link.
  #
  # @option options
  # @option options
  # @return [SharedFileMembers]
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/get_shared_link_metadata.rb#23
  def get_shared_link_metadata(preview_link, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/get_shared_link_metadata.rb#7
DropboxApi::Endpoints::Sharing::GetSharedLinkMetadata::ErrorType = DropboxApi::Errors::SharedLinkError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/get_shared_link_metadata.rb#4
DropboxApi::Endpoints::Sharing::GetSharedLinkMetadata::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/get_shared_link_metadata.rb#5
DropboxApi::Endpoints::Sharing::GetSharedLinkMetadata::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/get_shared_link_metadata.rb#6
DropboxApi::Endpoints::Sharing::GetSharedLinkMetadata::ResultType = DropboxApi::Metadata::SharedLinkMetadata

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_file_members.rb#3
class DropboxApi::Endpoints::Sharing::ListFileMembers < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # Use to obtain the members who have been invited to a file, both
  # inherited and uninherited members.
  #
  # Apps must have full Dropbox access to use this endpoint.
  #
  # @example List file members.
  #   client.list_file_members "1231273663"
  # @example List file members, with detail of permission to make owner.
  #   client.list_file_members "1231273663", [:make_owner]
  # @example List file members, using the path instead of file ID.
  #   client.list_file_members "/my/file.pdf"
  # @option options
  # @option options
  # @param file_id [String] The ID for the shared file.
  # @param actions [Array] This is an optional list of actions. The permissions for the actions
  #   requested will be included in the result.
  # @return [SharedFileMembers] Shared file user and group membership.
  # @see Metadata::MemberActionList
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_file_members.rb#37
  def list_file_members(file_id, actions = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_file_members.rb#7
DropboxApi::Endpoints::Sharing::ListFileMembers::ErrorType = DropboxApi::Errors::SharingFileAccessError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_file_members.rb#4
DropboxApi::Endpoints::Sharing::ListFileMembers::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_file_members.rb#5
DropboxApi::Endpoints::Sharing::ListFileMembers::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_file_members.rb#6
DropboxApi::Endpoints::Sharing::ListFileMembers::ResultType = DropboxApi::Results::SharedFileMembers

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_folder_members.rb#3
class DropboxApi::Endpoints::Sharing::ListFolderMembers < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # Returns shared folder membership by its folder ID.
  #
  # Apps must have full Dropbox access to use this endpoint.
  #
  # @example List folder members.
  #   client.list_folder_members "1231273663"
  # @example List folder members, with detail of permission to make owner.
  #   client.list_folder_members "1231273663", [:make_owner]
  # @option options
  # @param folder_id [String] The ID for the shared folder.
  # @param actions [Array] This is an optional list of actions. The permissions for the actions
  #   requested will be included in the result.
  # @return [SharedFolderMembers] Shared folder user and group membership.
  # @see Metadata::MemberActionList
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_folder_members.rb#30
  def list_folder_members(folder_id, actions = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_folder_members.rb#7
DropboxApi::Endpoints::Sharing::ListFolderMembers::ErrorType = DropboxApi::Errors::SharedFolderAccessError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_folder_members.rb#4
DropboxApi::Endpoints::Sharing::ListFolderMembers::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_folder_members.rb#5
DropboxApi::Endpoints::Sharing::ListFolderMembers::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_folder_members.rb#6
DropboxApi::Endpoints::Sharing::ListFolderMembers::ResultType = DropboxApi::Results::SharedFolderMembers

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_shared_links.rb#3
class DropboxApi::Endpoints::Sharing::ListSharedLinks < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # List shared links of this user.
  #
  # If no path is given or the path is empty, returns a list of all shared
  # links for the current user.
  #
  # If a non-empty path is given, returns a list of all shared links that
  # allow access to the given path - direct links to the given path and
  # links to parent folders of the given path. Links to parent folders can
  # be suppressed by setting direct_only to true.
  #
  # @option options
  # @option options
  # @option options
  # @return [ListSharedLinksResult]
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_shared_links.rb#25
  def list_shared_links(options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_shared_links.rb#7
DropboxApi::Endpoints::Sharing::ListSharedLinks::ErrorType = DropboxApi::Errors::ListSharedLinksError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_shared_links.rb#4
DropboxApi::Endpoints::Sharing::ListSharedLinks::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_shared_links.rb#5
DropboxApi::Endpoints::Sharing::ListSharedLinks::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/list_shared_links.rb#6
DropboxApi::Endpoints::Sharing::ListSharedLinks::ResultType = DropboxApi::Results::ListSharedLinksResult

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/revoke_shared_link.rb#3
class DropboxApi::Endpoints::Sharing::RevokeSharedLink < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/revoke_shared_link.rb#18
  def revoke_shared_link(url); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/revoke_shared_link.rb#7
DropboxApi::Endpoints::Sharing::RevokeSharedLink::ErrorType = DropboxApi::Errors::RevokeSharedLinkError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/revoke_shared_link.rb#4
DropboxApi::Endpoints::Sharing::RevokeSharedLink::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/revoke_shared_link.rb#5
DropboxApi::Endpoints::Sharing::RevokeSharedLink::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/revoke_shared_link.rb#6
DropboxApi::Endpoints::Sharing::RevokeSharedLink::ResultType = DropboxApi::Results::VoidResult

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/share_folder.rb#3
class DropboxApi::Endpoints::Sharing::ShareFolder < ::DropboxApi::Endpoints::Rpc
  include ::DropboxApi::OptionsValidator

  # Share a folder with collaborators.
  #
  # Most sharing will be completed synchronously. Large folders will be
  # completed asynchronously. To make testing the async case repeatable, set
  # `force_async`.
  #
  # If a ShareFolderLaunch.async_job_id is returned, you'll need to call
  # check_share_job_status until the action completes to get the metadata
  # for the folder.
  #
  # Apps must have full Dropbox access to use this endpoint.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param path [String] The path to the folder to share. If it does not
  #   exist, then a new one is created.
  # @return [DropboxApi::Results::ShareFolderLaunch] Shared folder metadata.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/share_folder.rb#37
  def share_folder(path, options = T.unsafe(nil)); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/share_folder.rb#7
DropboxApi::Endpoints::Sharing::ShareFolder::ErrorType = DropboxApi::Errors::ShareFolderError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/share_folder.rb#4
DropboxApi::Endpoints::Sharing::ShareFolder::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/share_folder.rb#5
DropboxApi::Endpoints::Sharing::ShareFolder::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/share_folder.rb#6
DropboxApi::Endpoints::Sharing::ShareFolder::ResultType = DropboxApi::Results::ShareFolderLaunch

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/unshare_file.rb#3
class DropboxApi::Endpoints::Sharing::UnshareFile < ::DropboxApi::Endpoints::Rpc
  # source://dropbox_api//lib/dropbox_api/endpoints/sharing/unshare_file.rb#14
  def unshare_file(file); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/unshare_file.rb#7
DropboxApi::Endpoints::Sharing::UnshareFile::ErrorType = DropboxApi::Errors::UnshareFileError

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/unshare_file.rb#4
DropboxApi::Endpoints::Sharing::UnshareFile::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/unshare_file.rb#5
DropboxApi::Endpoints::Sharing::UnshareFile::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/sharing/unshare_file.rb#6
DropboxApi::Endpoints::Sharing::UnshareFile::ResultType = DropboxApi::Results::VoidResult

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account.rb#2
module DropboxApi::Endpoints::Users; end

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account.rb#3
class DropboxApi::Endpoints::Users::GetAccount < ::DropboxApi::Endpoints::Rpc
  # Get information about a user's account.
  #
  # @param account_id [String] A user's account identifier.
  # @return [BasicAccount] Basic information about any account.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/users/get_account.rb#13
  def get_account(account_id); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account.rb#7
DropboxApi::Endpoints::Users::GetAccount::ErrorType = DropboxApi::Errors::GetAccountError

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account.rb#4
DropboxApi::Endpoints::Users::GetAccount::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account.rb#5
DropboxApi::Endpoints::Users::GetAccount::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account.rb#6
DropboxApi::Endpoints::Users::GetAccount::ResultType = DropboxApi::Metadata::BasicAccount

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account_batch.rb#3
class DropboxApi::Endpoints::Users::GetAccountBatch < ::DropboxApi::Endpoints::Rpc
  # Get information about multiple user accounts. At most 300 accounts may
  # be queried per request.
  #
  # @param account_ids [Array<String>] List of user account identifiers. Should not
  #   contain any duplicate account IDs.
  # @return [Array<BasicAccount>] Basic information about any account.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/users/get_account_batch.rb#15
  def get_account_batch(account_ids); end
end

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account_batch.rb#7
DropboxApi::Endpoints::Users::GetAccountBatch::ErrorType = DropboxApi::Errors::GetAccountError

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account_batch.rb#4
DropboxApi::Endpoints::Users::GetAccountBatch::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account_batch.rb#5
DropboxApi::Endpoints::Users::GetAccountBatch::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_account_batch.rb#6
DropboxApi::Endpoints::Users::GetAccountBatch::ResultType = DropboxApi::Results::BasicAccountBatch

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_current_account.rb#3
class DropboxApi::Endpoints::Users::GetCurrentAccount < ::DropboxApi::Endpoints::Rpc
  # Get information about the current user's account.
  #
  # @return [BasicAccount] Detailed information about the current user's account.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/users/get_current_account.rb#12
  def get_current_account; end
end

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_current_account.rb#7
DropboxApi::Endpoints::Users::GetCurrentAccount::ErrorType = T.let(T.unsafe(nil), T.untyped)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_current_account.rb#4
DropboxApi::Endpoints::Users::GetCurrentAccount::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_current_account.rb#5
DropboxApi::Endpoints::Users::GetCurrentAccount::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_current_account.rb#6
DropboxApi::Endpoints::Users::GetCurrentAccount::ResultType = DropboxApi::Metadata::BasicAccount

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_space_usage.rb#3
class DropboxApi::Endpoints::Users::GetSpaceUsage < ::DropboxApi::Endpoints::Rpc
  # Get the space usage information for the current user's account.
  #
  # @return [SpaceUsage] Information about a user's space usage and quota.
  #
  # source://dropbox_api//lib/dropbox_api/endpoints/users/get_space_usage.rb#12
  def get_space_usage; end
end

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_space_usage.rb#7
DropboxApi::Endpoints::Users::GetSpaceUsage::ErrorType = T.let(T.unsafe(nil), T.untyped)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_space_usage.rb#4
DropboxApi::Endpoints::Users::GetSpaceUsage::Method = T.let(T.unsafe(nil), Symbol)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_space_usage.rb#5
DropboxApi::Endpoints::Users::GetSpaceUsage::Path = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/endpoints/users/get_space_usage.rb#6
DropboxApi::Endpoints::Users::GetSpaceUsage::ResultType = DropboxApi::Metadata::SpaceUsage

# source://dropbox_api//lib/dropbox_api/errors/http_error.rb#3
module DropboxApi::Errors; end

# source://dropbox_api//lib/dropbox_api/errors/add_file_member_error.rb#3
class DropboxApi::Errors::AddFileMemberError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/add_file_member_error.rb#4
DropboxApi::Errors::AddFileMemberError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/add_folder_member_error.rb#3
class DropboxApi::Errors::AddFolderMemberError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/add_folder_member_error.rb#4
DropboxApi::Errors::AddFolderMemberError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/add_member_selector_error.rb#3
class DropboxApi::Errors::AddMemberSelectorError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/add_member_selector_error.rb#4
DropboxApi::Errors::AddMemberSelectorError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/already_shared_error.rb#3
class DropboxApi::Errors::AlreadySharedError < ::DropboxApi::Errors::BasicError
  # source://dropbox_api//lib/dropbox_api/errors/already_shared_error.rb#4
  def shared_folder; end
end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#32
class DropboxApi::Errors::BadPathError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#3
class DropboxApi::Errors::BasicError < ::StandardError
  # @return [BasicError] a new instance of BasicError
  #
  # source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#4
  def initialize(message, metadata); end

  class << self
    # source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#10
    def build(message, metadata); end

    # source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#20
    def find_subtype(metadata); end
  end
end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#33
class DropboxApi::Errors::CantCopySharedFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#34
class DropboxApi::Errors::CantMoveFolderIntoItselfError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#35
class DropboxApi::Errors::CantNestSharedFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#36
class DropboxApi::Errors::CantShareOutsideTeamError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#37
class DropboxApi::Errors::ContainsSharedFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#38
class DropboxApi::Errors::ConversionError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/create_file_request_error.rb#3
class DropboxApi::Errors::CreateFileRequestError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/create_file_request_error.rb#4
DropboxApi::Errors::CreateFileRequestError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/create_folder_batch_error.rb#3
class DropboxApi::Errors::CreateFolderBatchError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/create_folder_batch_error.rb#4
DropboxApi::Errors::CreateFolderBatchError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/create_folder_error.rb#3
class DropboxApi::Errors::CreateFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/create_folder_error.rb#4
DropboxApi::Errors::CreateFolderError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/create_shared_link_with_settings_error.rb#3
class DropboxApi::Errors::CreateSharedLinkWithSettingsError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/create_shared_link_with_settings_error.rb#4
DropboxApi::Errors::CreateSharedLinkWithSettingsError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#39
class DropboxApi::Errors::CursorClosedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#40
class DropboxApi::Errors::CursorNotClosedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/delete_error.rb#3
class DropboxApi::Errors::DeleteError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/delete_error.rb#4
DropboxApi::Errors::DeleteError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#41
class DropboxApi::Errors::DisallowedNameError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#42
class DropboxApi::Errors::DisallowedSharedLinkPolicyError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/download_error.rb#3
class DropboxApi::Errors::DownloadError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/download_error.rb#4
DropboxApi::Errors::DownloadError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#43
class DropboxApi::Errors::DownloadFailedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#44
class DropboxApi::Errors::EmailUnverifiedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/expired_access_token_error.rb#3
class DropboxApi::Errors::ExpiredAccessTokenError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#45
class DropboxApi::Errors::FileAncestorConflictError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#46
class DropboxApi::Errors::FileConflictError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/file_member_action_error.rb#3
class DropboxApi::Errors::FileMemberActionError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/file_member_action_error.rb#4
DropboxApi::Errors::FileMemberActionError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#47
class DropboxApi::Errors::FolderConflictError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/get_account_error.rb#3
class DropboxApi::Errors::GetAccountError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/get_account_error.rb#4
DropboxApi::Errors::GetAccountError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/get_copy_reference_error.rb#3
class DropboxApi::Errors::GetCopyReferenceError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/get_copy_reference_error.rb#4
DropboxApi::Errors::GetCopyReferenceError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/get_metadata_error.rb#3
class DropboxApi::Errors::GetMetadataError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/get_metadata_error.rb#4
DropboxApi::Errors::GetMetadataError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#48
class DropboxApi::Errors::GroupDeletedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#49
class DropboxApi::Errors::GroupNotOnTeamError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/http_error.rb#4
class DropboxApi::Errors::HttpError < ::StandardError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#50
class DropboxApi::Errors::InProgressError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#51
class DropboxApi::Errors::InsideAppFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#52
class DropboxApi::Errors::InsideOsxPackageError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#53
class DropboxApi::Errors::InsidePublicFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#54
class DropboxApi::Errors::InsideSharedFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#55
class DropboxApi::Errors::InsufficientPlanError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#56
class DropboxApi::Errors::InsufficientSpaceError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#57
class DropboxApi::Errors::InternalError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#58
class DropboxApi::Errors::InvalidCommentError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#59
class DropboxApi::Errors::InvalidCopyReferenceError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#60
class DropboxApi::Errors::InvalidCursorError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#61
class DropboxApi::Errors::InvalidDropboxIdError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#62
class DropboxApi::Errors::InvalidEmailError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#63
class DropboxApi::Errors::InvalidFileError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#64
class DropboxApi::Errors::InvalidIdError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#65
class DropboxApi::Errors::InvalidMemberError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#66
class DropboxApi::Errors::InvalidPathError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#67
class DropboxApi::Errors::InvalidRevisionError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#68
class DropboxApi::Errors::InvalidSettingsError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#69
class DropboxApi::Errors::InvalidUrlError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#70
class DropboxApi::Errors::IsAppFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#71
class DropboxApi::Errors::IsFileError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#72
class DropboxApi::Errors::IsFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#73
class DropboxApi::Errors::IsOsxPackageError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#74
class DropboxApi::Errors::IsPublicFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/list_folder_continue_error.rb#3
class DropboxApi::Errors::ListFolderContinueError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/list_folder_continue_error.rb#4
DropboxApi::Errors::ListFolderContinueError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/list_folder_error.rb#3
class DropboxApi::Errors::ListFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/list_folder_error.rb#4
DropboxApi::Errors::ListFolderError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/list_folder_longpoll_error.rb#3
class DropboxApi::Errors::ListFolderLongpollError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/list_folder_longpoll_error.rb#4
DropboxApi::Errors::ListFolderLongpollError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/list_revisions_error.rb#3
class DropboxApi::Errors::ListRevisionsError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/list_revisions_error.rb#4
DropboxApi::Errors::ListRevisionsError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/list_shared_links_error.rb#3
class DropboxApi::Errors::ListSharedLinksError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/list_shared_links_error.rb#4
DropboxApi::Errors::ListSharedLinksError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/lookup_error.rb#3
class DropboxApi::Errors::LookupError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/lookup_error.rb#4
DropboxApi::Errors::LookupError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#75
class DropboxApi::Errors::MalformedPathError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#76
class DropboxApi::Errors::NoAccountError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#77
class DropboxApi::Errors::NoPermissionError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#78
class DropboxApi::Errors::NoWritePermissionError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#79
class DropboxApi::Errors::NotAMemberError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#80
class DropboxApi::Errors::NotFileError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#81
class DropboxApi::Errors::NotFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#82
class DropboxApi::Errors::NotFoundError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/poll_error.rb#3
class DropboxApi::Errors::PollError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/poll_error.rb#4
DropboxApi::Errors::PollError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/preview_error.rb#3
class DropboxApi::Errors::PreviewError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/preview_error.rb#4
DropboxApi::Errors::PreviewError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#83
class DropboxApi::Errors::RateLimitError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/relocation_batch_entry_error.rb#3
class DropboxApi::Errors::RelocationBatchEntryError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/relocation_batch_entry_error.rb#4
DropboxApi::Errors::RelocationBatchEntryError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/relocation_error.rb#3
class DropboxApi::Errors::RelocationError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/relocation_error.rb#4
DropboxApi::Errors::RelocationError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/restore_error.rb#3
class DropboxApi::Errors::RestoreError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/restore_error.rb#4
DropboxApi::Errors::RestoreError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#84
class DropboxApi::Errors::RestrictedContentError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/revoke_shared_link_error.rb#3
class DropboxApi::Errors::RevokeSharedLinkError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/revoke_shared_link_error.rb#4
DropboxApi::Errors::RevokeSharedLinkError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/save_copy_reference_error.rb#3
class DropboxApi::Errors::SaveCopyReferenceError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/save_copy_reference_error.rb#4
DropboxApi::Errors::SaveCopyReferenceError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/save_url_error.rb#3
class DropboxApi::Errors::SaveUrlError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/save_url_error.rb#4
DropboxApi::Errors::SaveUrlError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/search_error.rb#3
class DropboxApi::Errors::SearchError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/search_error.rb#4
DropboxApi::Errors::SearchError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/settings_error.rb#3
class DropboxApi::Errors::SettingsError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/settings_error.rb#4
DropboxApi::Errors::SettingsError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/share_folder_error.rb#3
class DropboxApi::Errors::ShareFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/share_folder_error.rb#4
DropboxApi::Errors::ShareFolderError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/share_path_error.rb#3
class DropboxApi::Errors::SharePathError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/share_path_error.rb#4
DropboxApi::Errors::SharePathError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/shared_folder_access_error.rb#3
class DropboxApi::Errors::SharedFolderAccessError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/shared_folder_access_error.rb#4
DropboxApi::Errors::SharedFolderAccessError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#85
class DropboxApi::Errors::SharedLinkAccessDeniedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#86
class DropboxApi::Errors::SharedLinkAlreadyExistsError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/shared_link_error.rb#3
class DropboxApi::Errors::SharedLinkError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/shared_link_error.rb#4
DropboxApi::Errors::SharedLinkError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#88
class DropboxApi::Errors::SharedLinkMalformedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#87
class DropboxApi::Errors::SharedLinkNotFoundError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/sharing_file_access_error.rb#3
class DropboxApi::Errors::SharingFileAccessError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/sharing_file_access_error.rb#4
DropboxApi::Errors::SharingFileAccessError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/sharing_user_error.rb#3
class DropboxApi::Errors::SharingUserError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/sharing_user_error.rb#4
DropboxApi::Errors::SharingUserError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#89
class DropboxApi::Errors::TeamFolderError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#90
class DropboxApi::Errors::TeamPolicyDisallowsMemberPolicyError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/thumbnail_batch_error.rb#3
class DropboxApi::Errors::ThumbnailBatchError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/thumbnail_batch_error.rb#4
DropboxApi::Errors::ThumbnailBatchError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/thumbnail_error.rb#3
class DropboxApi::Errors::ThumbnailError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/thumbnail_error.rb#4
DropboxApi::Errors::ThumbnailError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#91
class DropboxApi::Errors::TooManyFilesError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#92
class DropboxApi::Errors::TooManyMembersError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#93
class DropboxApi::Errors::TooManyPendingInvitesError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/too_many_requests_error.rb#3
class DropboxApi::Errors::TooManyRequestsError < ::DropboxApi::Errors::BasicError
  # Returns the value of attribute retry_after.
  #
  # source://dropbox_api//lib/dropbox_api/errors/too_many_requests_error.rb#7
  def retry_after; end

  # Sets the attribute retry_after
  #
  # @param value the value to set the attribute retry_after to.
  #
  # source://dropbox_api//lib/dropbox_api/errors/too_many_requests_error.rb#7
  def retry_after=(_arg0); end

  class << self
    # source://dropbox_api//lib/dropbox_api/errors/too_many_requests_error.rb#9
    def build(message, metadata); end
  end
end

# source://dropbox_api//lib/dropbox_api/errors/too_many_requests_error.rb#15
DropboxApi::Errors::TooManyRequestsError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#94
class DropboxApi::Errors::TooManySharedFolderTargetsError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/too_many_requests_error.rb#4
class DropboxApi::Errors::TooManyWriteOperationsError < ::DropboxApi::Errors::TooManyRequestsError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#95
class DropboxApi::Errors::UnmountedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/unshare_file_error.rb#3
class DropboxApi::Errors::UnshareFileError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/unshare_file_error.rb#4
DropboxApi::Errors::UnshareFileError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#96
class DropboxApi::Errors::UnsupportedContentError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#97
class DropboxApi::Errors::UnsupportedExtensionError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#98
class DropboxApi::Errors::UnsupportedImageError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#99
class DropboxApi::Errors::UnsupportedLinkTypeError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/basic_error.rb#100
class DropboxApi::Errors::UnverifiedDropboxId < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/upload_error.rb#3
class DropboxApi::Errors::UploadError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/upload_error.rb#4
DropboxApi::Errors::UploadError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/upload_session_finish_error.rb#3
class DropboxApi::Errors::UploadSessionFinishError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/upload_session_finish_error.rb#4
DropboxApi::Errors::UploadSessionFinishError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/upload_session_lookup_error.rb#3
class DropboxApi::Errors::UploadSessionLookupError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/upload_session_lookup_error.rb#4
DropboxApi::Errors::UploadSessionLookupError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/upload_session_offset_error.rb#3
class DropboxApi::Errors::UploadSessionOffsetError < ::DropboxApi::Errors::BasicError
  # @return [UploadSessionOffsetError] a new instance of UploadSessionOffsetError
  #
  # source://dropbox_api//lib/dropbox_api/errors/upload_session_offset_error.rb#4
  def initialize(message, metadata); end
end

# source://dropbox_api//lib/dropbox_api/errors/upload_write_failed_error.rb#3
class DropboxApi::Errors::UploadWriteFailedError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/upload_write_failed_error.rb#4
DropboxApi::Errors::UploadWriteFailedError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/write_conflict_error.rb#3
class DropboxApi::Errors::WriteConflictError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/write_conflict_error.rb#4
DropboxApi::Errors::WriteConflictError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/errors/write_error.rb#3
class DropboxApi::Errors::WriteError < ::DropboxApi::Errors::BasicError; end

# source://dropbox_api//lib/dropbox_api/errors/write_error.rb#4
DropboxApi::Errors::WriteError::ErrorSubtypes = T.let(T.unsafe(nil), Hash)

# source://dropbox_api//lib/dropbox_api/metadata/base.rb#2
module DropboxApi::Metadata; end

# Example of a serialized {AccessLevel} object:
#
# ```json
# {
#   ".tag": "viewer"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/access_level.rb#10
class DropboxApi::Metadata::AccessLevel < ::DropboxApi::Metadata::Tag
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/access_level.rb#18
    def valid_values; end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/access_level.rb#11
DropboxApi::Metadata::AccessLevel::VALID_ACCESS_LEVELS = T.let(T.unsafe(nil), Array)

# Example of a {AddFileMemberResult}:
#
# ```json
# {
#   "member":{
#     ".tag": "email",
#     "email": "somebody@test.com"
#   },
#   "result": {
#     ".tag": "success",
#     "success": {
#       ".tag": "viewer"
#     }
#   }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/add_file_member_result.rb#19
class DropboxApi::Metadata::AddFileMemberResult < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def member; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def result; end
end

# Examples of serialized {AddMember} objects:
#
# ```json
# {
#   "member": {
#     ".tag": "email",
#     "email": "justin@example.com"
#   },
#   "access_level": {
#     ".tag": "editor"
#   }
# },
# {
#   "member": {
#     ".tag": "dropbox_id",
#     "dropbox_id": "dbid:AAEufNrMPSPe0dMQijRP0N_aZtBJRm26W4Q"
#   },
#   "access_level": {
#     ".tag": "viewer"
#   }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/add_member.rb#25
class DropboxApi::Metadata::AddMember < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def access_level; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def member; end

  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/add_member.rb#27
    def build_from_string(member, access_level = T.unsafe(nil)); end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/base.rb#3
class DropboxApi::Metadata::Base
  # Takes in a hash containing all the attributes required to initialize the
  # object.
  #
  # Each hash entry should have a key which identifies a field and its value,
  # so a valid call would be something like this:
  #
  #     DropboxApi::Metadata::File.new({
  #       "name" => "a.jpg",
  #       "path_lower" => "/a.jpg",
  #       "path_display" => "/a.jpg",
  #       "id" => "id:evvfE6q6cK0AAAAAAAAB2w",
  #       "client_modified" => "2016-10-19T17:17:34Z",
  #       "server_modified" => "2016-10-19T17:17:34Z",
  #       "rev" => "28924061bdd",
  #       "size" => 396317
  #     })
  #
  # @param metadata [Hash]
  # @raise [ArgumentError] If a required attribute is missing.
  # @return [Base] a new instance of Base
  #
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#34
  def initialize(metadata); end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#46
  def serialized_field(field_name); end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#40
  def to_hash; end

  private

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#60
  def []=(name, value); end

  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/base.rb#7
    def field(name, type, *options); end

    # Returns the value of attribute fields.
    #
    # source://dropbox_api//lib/dropbox_api/metadata/base.rb#5
    def fields; end
  end
end

# Example of a serialized {BasicAccount} object:
#
# ```json
# {
#   "account_id": "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc",
#   "name": {
#       "given_name": "Franz",
#       "surname": "Ferdinand",
#       "familiar_name": "Franz",
#       "display_name": "Franz Ferdinand (Personal)"
#   },
#   "email": "franz@dropbox.com",
#   "email_verified": true,
#   "disabled": false,
#   "is_teammate": true,
#   "profile_photo_url": "https://dl-web.dropbox.com/account_photo/get/dbid%3AAAH4f99T0taONIb-OurWxbNQ6ywGRopQngc?vers=1453416696524&size=128x128",
#   "team_member_id": "dbmid:AAHhy7WsR0x-u4ZCqiDl5Fz5zvuL3kmspwU",
#   "root_info": {
#     root_namespace_id: 7,
#     home_namespace_id: 1,
#     home_path: "/Franz Ferdinand"
#   }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/basic_account.rb#27
class DropboxApi::Metadata::BasicAccount < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def account_id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def disabled; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def email; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def email_verified; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def is_teammate; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def profile_photo_url; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def root_info; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def team_member_id; end
end

# source://dropbox_api//lib/dropbox_api/metadata/commit_info.rb#3
class DropboxApi::Metadata::CommitInfo < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def autorename; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def client_modified; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def mode; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def mute; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path; end

  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/commit_info.rb#11
    def build_from_options(options); end

    private

    # source://dropbox_api//lib/dropbox_api/metadata/commit_info.rb#39
    def build_client_modified(client_modified); end

    # source://dropbox_api//lib/dropbox_api/metadata/commit_info.rb#28
    def build_write_mode(write_mode); end
  end
end

# Example of a serialized {Deleted} object:
#
# ```json
# {
#   ".tag": "deleted",
#   "name": "file.txt",
#   "path_lower": "/file.txt",
#   "path_display": "/file.txt"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/deleted.rb#13
class DropboxApi::Metadata::Deleted < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_display; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_lower; end
end

# source://dropbox_api//lib/dropbox_api/metadata/dimensions.rb#3
class DropboxApi::Metadata::Dimensions < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def height; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def width; end
end

# source://dropbox_api//lib/dropbox_api/metadata/field.rb#3
class DropboxApi::Metadata::Field
  # @return [Field] a new instance of Field
  #
  # source://dropbox_api//lib/dropbox_api/metadata/field.rb#4
  def initialize(type, options = T.unsafe(nil)); end

  # source://dropbox_api//lib/dropbox_api/metadata/field.rb#9
  def cast(object); end

  # source://dropbox_api//lib/dropbox_api/metadata/field.rb#18
  def force_cast(object); end
end

# Example of a serialized {File} object:
#
# ```json
# {
#   ".tag": "file",
#   "name": "Prime_Numbers.txt",
#   "path_lower": "/homework/math/prime_numbers.txt",
#   "path_display": "/Homework/math/Prime_Numbers.txt",
#   "id": "id:a4ayc_80_OEAAAAAAAAAXw",
#   "client_modified": "2015-05-12T15:50:38Z",
#   "server_modified": "2015-05-12T15:50:38Z",
#   "rev": "a1c10ce0dd78",
#   "size": 7212,
#   "sharing_info": {
#     "read_only": true,
#     "parent_shared_folder_id": "84528192421",
#     "modified_by": "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
#   }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/file.rb#23
class DropboxApi::Metadata::File < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def client_modified; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def content_hash; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def has_explicit_shared_members; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def media_info; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_display; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_lower; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def rev; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def server_modified; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def size; end

  # source://dropbox_api//lib/dropbox_api/metadata/file.rb#36
  def to_hash; end
end

# source://dropbox_api//lib/dropbox_api/metadata/file_categories_list.rb#4
class DropboxApi::Metadata::FileCategoriesList < ::Array
  # @return [FileCategoriesList] a new instance of FileCategoriesList
  #
  # source://dropbox_api//lib/dropbox_api/metadata/file_categories_list.rb#5
  def initialize(list); end
end

# source://dropbox_api//lib/dropbox_api/metadata/file_category.rb#4
class DropboxApi::Metadata::FileCategory < ::DropboxApi::Metadata::Tag
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/file_category.rb#18
    def valid_values; end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/file_category.rb#5
DropboxApi::Metadata::FileCategory::VALID_VALUES = T.let(T.unsafe(nil), Array)

# source://dropbox_api//lib/dropbox_api/metadata/file_extensions_list.rb#4
class DropboxApi::Metadata::FileExtensionsList < ::Array
  # @return [FileExtensionsList] a new instance of FileExtensionsList
  #
  # source://dropbox_api//lib/dropbox_api/metadata/file_extensions_list.rb#5
  def initialize(data); end
end

# Example of a serialized {FileLinkMetadata} object:
#
# ```json
# {
#   ".tag": "file",
#   "url": "https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0",
#   "name": "Prime_Numbers.txt",
#   "link_permissions": {
#     "can_revoke": false,
#     "resolved_visibility": {
#       ".tag": "public"
#     },
#     "revoke_failure_reason": {
#       ".tag": "owner_only"
#     }
#   },
#   "client_modified": "2015-05-12T15:50:38Z",
#   "server_modified": "2015-05-12T15:50:38Z",
#   "rev": "a1c10ce0dd78",
#   "size": 7212,
#   "id": "id:a4ayc_80_OEAAAAAAAAAXw",
#   "path_lower": "/homework/math/prime_numbers.txt",
#   "team_member_info": {
#     "team_info": {
#       "id": "dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I",
#       "name": "Acme, Inc."
#     },
#     "display_name": "Roger Rabbit",
#     "member_id": "dbmid:abcd1234"
#   }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/file_link_metadata.rb#35
class DropboxApi::Metadata::FileLinkMetadata < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def client_modified; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def content_owner_team_info; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def expires; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def link_permissions; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_lower; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def rev; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def server_modified; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def size; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def team_member_info; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def url; end
end

# Example of a serialized FileMemberAction:
#
# ```json
# {
#   ".tag": "success",
#   "success": {
#     ".tag": "viewer"
#   }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/file_member_action.rb#13
class DropboxApi::Metadata::FileMemberAction < ::DropboxApi::Metadata::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/file_member_action.rb#15
    def new(data); end

    private

    # source://dropbox_api//lib/dropbox_api/metadata/file_member_action.rb#22
    def class_for(tag); end
  end
end

# Example of a serialized {FileRequest} object:
#
# ```json
# {
#     "id": "oaCAVmEyrqYnkZX9955Y",
#     "url": "https://www.dropbox.com/request/oaCAVmEyrqYnkZX9955Y",
#     "title": "Homework submission",
#     "created": "2015-10-05T17:00:00Z",
#     "is_open": true,
#     "file_count": 3,
#     "destination": "/File Requests/Homework",
#     "deadline": {
#         "deadline": "2020-10-12T17:00:00Z",
#         "allow_late_uploads": {
#             ".tag": "seven_days"
#         }
#     }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/file_request.rb#22
class DropboxApi::Metadata::FileRequest < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def created; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def destination; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def file_count; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def is_open; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def title; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def url; end
end

# source://dropbox_api//lib/dropbox_api/metadata/file_status.rb#4
class DropboxApi::Metadata::FileStatus < ::DropboxApi::Metadata::Tag
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/file_status.rb#10
    def valid_values; end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/file_status.rb#5
DropboxApi::Metadata::FileStatus::VALID_VALUES = T.let(T.unsafe(nil), Array)

# Example of a serialized {Folder} object:
#
# ```json
# {
#   "name": "arizona_baby",
#   "path_lower": "/arizona_baby",
#   "path_display": "/arizona_baby",
#   "id": "id:7eWkV5hcfzAAAAAAAAAAAQ"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/folder.rb#13
class DropboxApi::Metadata::Folder < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_display; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_lower; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def sharing_info; end

  # source://dropbox_api//lib/dropbox_api/metadata/folder.rb#20
  def to_hash; end
end

# source://dropbox_api//lib/dropbox_api/metadata/folder_link_metadata.rb#3
class DropboxApi::Metadata::FolderLinkMetadata < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def content_owner_team_info; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def expires; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def link_permissions; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_lower; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def team_member_info; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def url; end
end

# Example of a serialized {FolderSharingInfo} object:
#
# ```json
# {
#   "read_only": false,
#   "parent_shared_folder_id": "84528192421"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/folder_sharing_info.rb#11
class DropboxApi::Metadata::FolderSharingInfo < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def parent_shared_folder_id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def read_only; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def shared_folder_id; end
end

# Example of a serialized {LinkPermissions} object:
#
# ```json
# {
#   "can_revoke": false,
#   "resolved_visibility": {
#     ".tag": "public"
#   },
#   "revoke_failure_reason": {
#     ".tag": "owner_only"
#   }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/link_permissions.rb#16
class DropboxApi::Metadata::LinkPermissions < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def can_revoke; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def requested_visibility; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def resolved_visibility; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def revoke_failure_reason; end
end

# source://dropbox_api//lib/dropbox_api/metadata/location.rb#3
class DropboxApi::Metadata::Location < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def latitude; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def longitude; end
end

# Example of a serialized {MediaInfo} object:
#
# ```json
# {
#   ".tag": "metadata",
#   "metadata": {...}
# }
# ```
#
# or:
#
# ```json
# {
#   ".tag": "pending"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/media_info.rb#19
class DropboxApi::Metadata::MediaInfo < ::DropboxApi::Metadata::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/media_info.rb#21
    def new(data); end

    private

    # source://dropbox_api//lib/dropbox_api/metadata/media_info.rb#33
    def class_for(tag); end
  end
end

# Example of a serialized {MediaInfo} object:
#
# ```json
# {
#   ".tag": "video",
#   "dimensions": {
#     "height": 1500,
#     "width": 1500
#   },
#   "location": {
#     "latitude": 10.123456,
#     "longitude": 5.123456
#   }
#   "time_taken": "2016-09-04T17:00:27Z",
#   "duration": 6000
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/media_metadata.rb#20
class DropboxApi::Metadata::MediaMetadata < ::DropboxApi::Metadata::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/media_metadata.rb#22
    def new(data); end

    private

    # source://dropbox_api//lib/dropbox_api/metadata/media_metadata.rb#29
    def class_for(tag); end
  end
end

# Examples of serialized {AddMember} objects:
#
# ```json
# [
#   {
#     ".tag": "email",
#     "email": "justin@example.com"
#   },  {
#     ".tag": "dropbox_id",
#     "dropbox_id": "dbid:AAEufNrMPSPe0dMQijRP0N_aZtBJRm26W4Q"
#   }
# ]
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/member.rb#16
class DropboxApi::Metadata::Member < ::DropboxApi::Metadata::Base
  # @return [Member] a new instance of Member
  #
  # source://dropbox_api//lib/dropbox_api/metadata/member.rb#17
  def initialize(member); end

  # source://dropbox_api//lib/dropbox_api/metadata/member.rb#30
  def to_hash; end

  private

  # source://dropbox_api//lib/dropbox_api/metadata/member.rb#46
  def hash_from_dropbox_id(dropbox_id); end

  # source://dropbox_api//lib/dropbox_api/metadata/member.rb#53
  def hash_from_email(email); end

  # source://dropbox_api//lib/dropbox_api/metadata/member.rb#36
  def hash_from_email_or_dropbox_id(email_or_id); end
end

# An action will be one of the following:
#
# - `:leave_a_copy`: Allow the member to keep a copy of the folder when
#   removing.
# - `:make_editor`: Make the member an editor of the folder.
# - `:make_owner`: Make the member an owner of the folder.
# - `:make_viewer`: Make the member a viewer of the folder.
# - `:make_viewer_no_comment`: Make the member a viewer of the folder without
#   commenting permissions.
# - `:remove`: Remove the member from the folder.
#
# Example of a serialized {MemberAction} object:
#
# ```json
# {
#   ".tag": "leave_a_copy"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/member_action.rb#21
class DropboxApi::Metadata::MemberAction < ::DropboxApi::Metadata::Tag
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/member_action.rb#31
    def valid_values; end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/member_action.rb#22
DropboxApi::Metadata::MemberAction::VALID_MEMBER_ACTIONS = T.let(T.unsafe(nil), Array)

# source://dropbox_api//lib/dropbox_api/metadata/member_action_list.rb#3
class DropboxApi::Metadata::MemberActionList < ::Array
  # Builds a list of actions for a shared folder.
  #
  # @example
  #   DropboxApi::Metadata::MemberActionList.new([:leave_a_copy, :make_editor])
  #   # => [:leave_a_copy, :make_editor]
  # @return [MemberActionList] a new instance of MemberActionList
  # @see Metadata::MemberAction
  #
  # source://dropbox_api//lib/dropbox_api/metadata/member_action_list.rb#10
  def initialize(list); end
end

# This is an example of a serialized {MemberPermission}:
#
# ```json
# {
#   "action": {
#     ".tag": "remove"
#   },
#   "allow": false,
#   "reason": {
#     ".tag": "target_is_self"
#   }
# }
# ```
#
# This is normally contained in a {MemberPermissionList} object.
#
# source://dropbox_api//lib/dropbox_api/metadata/member_permission.rb#18
class DropboxApi::Metadata::MemberPermission < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def action; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def allow; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def reason; end
end

# This represents a collection of permissions on allowed on a
# shared file or folder.
#
# This is an example of a serialized {MemberActionList}:
# ```json
# [{
#   "action": {
#     ".tag": "remove"
#   },
#   "allow": false,
#   "reason": {
#     ".tag": "target_is_self"
#   }
# }, {
#   "action": {
#     ".tag": "make_owner"
#   },
#   "allow": false,
#   "reason": {
#     ".tag": "target_is_self"
#   }
# }]
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/member_permission_list.rb#26
class DropboxApi::Metadata::MemberPermissionList < ::Array
  # @return [MemberPermissionList] a new instance of MemberPermissionList
  #
  # source://dropbox_api//lib/dropbox_api/metadata/member_permission_list.rb#27
  def initialize(list); end
end

# source://dropbox_api//lib/dropbox_api/metadata/metadata_v2.rb#4
class DropboxApi::Metadata::MetadataV2 < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def metadata; end
end

# Example of a serialized {Name} object:
#
# ```json
# {
#   "given_name": "Franz",
#   "surname": "Ferdinand",
#   "familiar_name": "Franz",
#   "display_name": "Franz Ferdinand (Personal)"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/name.rb#13
class DropboxApi::Metadata::Name < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def display_name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def familiar_name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def given_name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def surname; end
end

# source://dropbox_api//lib/dropbox_api/metadata/namespace_id.rb#3
class DropboxApi::Metadata::NamespaceId < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def namespace_id; end

  # source://dropbox_api//lib/dropbox_api/metadata/namespace_id.rb#6
  def to_hash; end
end

# source://dropbox_api//lib/dropbox_api/metadata/parent_folder_access_info.rb#3
class DropboxApi::Metadata::ParentFolderAccessInfo < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def folder_name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def permissions; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def shared_folder_id; end
end

# Example of a serialized {PhotoMetadata} object:
#
# ```json
# {
#   ".tag": "photo",
#   "dimensions": {
#     "height": 1500,
#     "width": 1500
#   },
#   "location": {
#     "latitude": 10.123456,
#     "longitude": 5.123456
#   }
#   "time_taken": "2016-09-04T17:00:27Z"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/photo_metadata.rb#19
class DropboxApi::Metadata::PhotoMetadata < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def dimensions; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def location; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def time_taken; end
end

# This class is used as an adapter so we can create an object of the pertinent
# class when we need to infer the type from the data.
#
# For example, calling `Resource.new({".tag" => "file", :name => ...})` will
# instantiate a `File` object.
#
# So this could initalize an object of either `File`, `Folder` or `Deleted`.
#
# source://dropbox_api//lib/dropbox_api/metadata/resource.rb#10
class DropboxApi::Metadata::Resource
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/resource.rb#12
    def new(data); end

    private

    # source://dropbox_api//lib/dropbox_api/metadata/resource.rb#18
    def class_for(tag); end
  end
end

# Example of a serialized {RootInfo} object:
#
# ```json
# {
#   ".tag":"user",
#   "root_namespace_id":"42",
#   "home_namespace_id":"42"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/root_info.rb#12
class DropboxApi::Metadata::RootInfo < ::DropboxApi::Metadata::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/root_info.rb#14
    def new(data); end

    private

    # source://dropbox_api//lib/dropbox_api/metadata/root_info.rb#20
    def class_for(tag); end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/search_match_field_options.rb#4
class DropboxApi::Metadata::SearchMatchFieldOptions < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def include_highlights; end
end

# source://dropbox_api//lib/dropbox_api/metadata/search_match_type_v2.rb#4
class DropboxApi::Metadata::SearchMatchTypeV2 < ::DropboxApi::Metadata::Tag
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/search_match_type_v2.rb#12
    def valid_values; end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/search_match_type_v2.rb#5
DropboxApi::Metadata::SearchMatchTypeV2::VALID_VALUES = T.let(T.unsafe(nil), Array)

# source://dropbox_api//lib/dropbox_api/metadata/search_match_v2.rb#4
class DropboxApi::Metadata::SearchMatchV2 < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def match_type; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def metadata; end

  # source://dropbox_api//lib/dropbox_api/metadata/search_match_v2.rb#11
  def resource; end
end

# source://dropbox_api//lib/dropbox_api/metadata/search_options.rb#4
class DropboxApi::Metadata::SearchOptions < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def file_categories; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def file_extensions; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def file_status; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def filename_only; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def max_results; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def order_by; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path; end
end

# source://dropbox_api//lib/dropbox_api/metadata/search_order_by.rb#4
class DropboxApi::Metadata::SearchOrderBy < ::DropboxApi::Metadata::Tag
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/search_order_by.rb#10
    def valid_values; end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/search_order_by.rb#5
DropboxApi::Metadata::SearchOrderBy::VALID_VALUES = T.let(T.unsafe(nil), Array)

# Example of a serialized {SharedFolder} object:
#
# ```json
# {
#   ".tag" => "complete",
#   "access_type" => {".tag"=>"owner"},
#   "is_team_folder" => false,
#   "policy" => {
#     "acl_update_policy" => { ".tag" => "owner" },
#     "shared_link_policy" => { ".tag" => "anyone" }
#   },
#   "path_lower" => "/folder_a",
#   "name" => "folder_a",
#   "shared_folder_id" => "1231266557",
#   "time_invited" => "2016-06-04T10:00:35Z"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/shared_folder.rb#20
class DropboxApi::Metadata::SharedFolder < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def access_type; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def is_team_folder; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def path_lower; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def policy; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def shared_folder_id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def time_invited; end
end

# Example of a serialized {SharedFolderPolicy} object:
#
# ```json
# {
#   "acl_update_policy" => { ".tag" => "owner" },
#   "shared_link_policy" => { ".tag" => "anyone" }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/shared_folder_policy.rb#11
class DropboxApi::Metadata::SharedFolderPolicy < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def acl_update_policy; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def shared_link_policy; end
end

# source://dropbox_api//lib/dropbox_api/metadata/shared_link.rb#3
class DropboxApi::Metadata::SharedLink < ::DropboxApi::Metadata::Base
  # @return [SharedLink] a new instance of SharedLink
  #
  # source://dropbox_api//lib/dropbox_api/metadata/shared_link.rb#6
  def initialize(param); end

  # source://dropbox_api//lib/dropbox_api/metadata/shared_link.rb#18
  def check_validity; end

  # source://dropbox_api//lib/dropbox_api/metadata/shared_link.rb#30
  def to_hash; end

  private

  # source://dropbox_api//lib/dropbox_api/metadata/shared_link.rb#36
  def valid_keys; end
end

# source://dropbox_api//lib/dropbox_api/metadata/shared_link.rb#4
DropboxApi::Metadata::SharedLink::VALID_KEYS = T.let(T.unsafe(nil), Array)

# This class is used as an adapter so we can create an object of the pertinent
# class when we need to infer the type from the data.
#
# This same pattern is used in `DropboxApi::Metadata::Resource`
#
# source://dropbox_api//lib/dropbox_api/metadata/shared_link_metadata.rb#7
class DropboxApi::Metadata::SharedLinkMetadata
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/shared_link_metadata.rb#9
    def new(data); end

    private

    # source://dropbox_api//lib/dropbox_api/metadata/shared_link_metadata.rb#15
    def class_for(tag); end
  end
end

# Example of a serialized {SpaceAllocation} object:
#
# ```json
# {
#   ".tag": "individual",
#   "allocated": 2147483648
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/space_allocation.rb#11
class DropboxApi::Metadata::SpaceAllocation < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def allocated; end
end

# Example of a serialized {SpaceUsage} object:
#
# ```json
# {
#   "used": 167685342,
#   "allocation": {
#     ".tag": "individual",
#     "allocated": 2147483648
#   }
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/space_usage.rb#14
class DropboxApi::Metadata::SpaceUsage < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def allocation; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def used; end
end

# source://dropbox_api//lib/dropbox_api/metadata/tag.rb#3
class DropboxApi::Metadata::Tag < ::DropboxApi::Metadata::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/tag.rb#4
    def new(data); end

    # source://dropbox_api//lib/dropbox_api/metadata/tag.rb#17
    def validate(value); end
  end
end

# source://dropbox_api//lib/dropbox_api/metadata/team.rb#3
class DropboxApi::Metadata::Team < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def name; end
end

# Example of a serialized {TeamMemberInfo} object:
#
# ```json
# {
#   "team_info": {
#     "id": "dbtid:AAFdgehTzw7WlXhZJsbGCLePe8RvQGYDr-I",
#     "name": "Acme, Inc."
#   },
#   "display_name": "Roger Rabbit",
#   "member_id": "dbmid:abcd1234"
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/team_member_info.rb#15
class DropboxApi::Metadata::TeamMemberInfo < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def display_name; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def member_id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def team_info; end
end

# source://dropbox_api//lib/dropbox_api/metadata/team_root_info.rb#3
class DropboxApi::Metadata::TeamRootInfo < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def home_namespace_id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def home_path; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def root_namespace_id; end
end

# source://dropbox_api//lib/dropbox_api/metadata/thumbnail_batch_result_data.rb#3
class DropboxApi::Metadata::ThumbnailBatchResultData < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def metadata; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def thumbnail; end
end

# This class is used as an adapter so we can create an object of the pertinent
# class when we need to infer the type from the data.
#
# This same pattern is used in `DropboxApi::Metadata::Resource`
#
# So this could initalize an object of either `ThumbnailBatchResultData`
# or `ThumbnailError`.
#
# source://dropbox_api//lib/dropbox_api/metadata/thumbnail_batch_result_entry.rb#10
class DropboxApi::Metadata::ThumbnailBatchResultEntry
  class << self
    # source://dropbox_api//lib/dropbox_api/metadata/thumbnail_batch_result_entry.rb#12
    def new(data); end
  end
end

# Example of a serialized {UploadSessionCursor} object:
#
# ```json
# {
#   "session_id": "AAAAAAAABCJ61k9yZZtn8Q",
#   "offset":9
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/upload_session_cursor.rb#11
class DropboxApi::Metadata::UploadSessionCursor < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def offset; end

  # source://dropbox_api//lib/dropbox_api/metadata/upload_session_cursor.rb#15
  def offset=(n); end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def session_id; end
end

# source://dropbox_api//lib/dropbox_api/metadata/user_root_info.rb#3
class DropboxApi::Metadata::UserRootInfo < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def home_namespace_id; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def root_namespace_id; end
end

# Example of a serialized {MediaInfo} object:
#
# ```json
# {
#   ".tag": "video",
#   "dimensions": {
#     "height": 1500,
#     "width": 1500
#   },
#   "location": {
#     "latitude": 10.123456,
#     "longitude": 5.123456
#   }
#   "time_taken": "2016-09-04T17:00:27Z",
#   "duration": 6000
# }
# ```
#
# source://dropbox_api//lib/dropbox_api/metadata/video_metadata.rb#20
class DropboxApi::Metadata::VideoMetadata < ::DropboxApi::Metadata::Base
  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def dimensions; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def duration; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def location; end

  # source://dropbox_api//lib/dropbox_api/metadata/base.rb#11
  def time_taken; end
end

# Your intent when writing a file to some path. This is used to determine
# what constitutes a conflict and what the autorename strategy is.
#
# In some situations, the conflict behavior is identical:
#
#   - If the target path doesn't contain anything, the file is always
#     written; no conflict.
#   - If the target path contains a folder, it's always a conflict.
#   - If the target path contains a file with identical contents, nothing
#     gets written; no conflict.
#
# The conflict checking differs in the case where there's a file at the
# target path with contents different from the contents you're trying to
# write. The value will be one of the following datatypes:
#
# - `:add`: Do not overwrite an existing file if there is a conflict. The
#   autorename strategy is to append a number to the file name. For example,
#   "document.txt" might become "document (2).txt".
# - `:overwrite`: Always overwrite the existing file. The autorename strategy
#   is the same as it is for add.
# - `:update`: Overwrite if the given "rev" matches the existing file's
#   "rev". The autorename strategy is to append the string "conflicted copy"
#   to the file name. For example, "document.txt" might become
#   "document (conflicted copy).txt" or
#   "document (Panda's conflicted copy).txt".
#
# source://dropbox_api//lib/dropbox_api/metadata/write_mode.rb#28
class DropboxApi::Metadata::WriteMode < ::DropboxApi::Metadata::Base
  # @example
  #   DropboxApi::Metadata::WriteMode.new :add
  # @example
  #   DropboxApi::Metadata::WriteMode.new :overwrite
  # @example
  #   DropboxApi::Metadata::WriteMode.new :update, "a1c10ce0dd78"
  # @example
  #   DropboxApi::Metadata::WriteMode.new({
  #   ".tag"=>"update",
  #   "update"=>"a1c10ce0dd78"
  #   })
  # @return [WriteMode] a new instance of WriteMode
  #
  # source://dropbox_api//lib/dropbox_api/metadata/write_mode.rb#46
  def initialize(write_mode, options = T.unsafe(nil)); end

  # source://dropbox_api//lib/dropbox_api/metadata/write_mode.rb#61
  def check_validity; end

  # source://dropbox_api//lib/dropbox_api/metadata/write_mode.rb#71
  def to_hash; end

  private

  # @return [Boolean]
  #
  # source://dropbox_api//lib/dropbox_api/metadata/write_mode.rb#77
  def valid_mode?(value); end
end

# source://dropbox_api//lib/dropbox_api/metadata/write_mode.rb#29
DropboxApi::Metadata::WriteMode::VALID_WRITE_MODES = T.let(T.unsafe(nil), Array)

# source://dropbox_api//lib/dropbox_api/middleware/decode_result.rb#2
module DropboxApi::MiddleWare; end

# source://dropbox_api//lib/dropbox_api/middleware/decode_result.rb#3
class DropboxApi::MiddleWare::DecodeResult < ::Faraday::Middleware
  # source://dropbox_api//lib/dropbox_api/middleware/decode_result.rb#4
  def call(rq_env); end

  # source://dropbox_api//lib/dropbox_api/middleware/decode_result.rb#14
  def decode(json); end
end

# source://dropbox_api//lib/dropbox_api/middleware/path_root.rb#3
class DropboxApi::MiddleWare::PathRoot < ::Faraday::Middleware
  # @return [PathRoot] a new instance of PathRoot
  #
  # source://dropbox_api//lib/dropbox_api/middleware/path_root.rb#6
  def initialize(app, options = T.unsafe(nil)); end

  # source://dropbox_api//lib/dropbox_api/middleware/path_root.rb#27
  def call(env); end

  # source://dropbox_api//lib/dropbox_api/middleware/path_root.rb#11
  def namespace_id; end

  # source://dropbox_api//lib/dropbox_api/middleware/path_root.rb#19
  def namespace_id_header_value; end
end

# source://dropbox_api//lib/dropbox_api/middleware/path_root.rb#4
DropboxApi::MiddleWare::PathRoot::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://dropbox_api//lib/dropbox_api/middleware/stack.rb#3
class DropboxApi::MiddleWare::Stack
  # @return [Stack] a new instance of Stack
  #
  # source://dropbox_api//lib/dropbox_api/middleware/stack.rb#4
  def initialize; end

  # source://dropbox_api//lib/dropbox_api/middleware/stack.rb#16
  def adapter=(value); end

  # source://dropbox_api//lib/dropbox_api/middleware/stack.rb#12
  def append(&block); end

  # @yield [connection]
  #
  # source://dropbox_api//lib/dropbox_api/middleware/stack.rb#20
  def apply(connection); end

  # source://dropbox_api//lib/dropbox_api/middleware/stack.rb#8
  def prepend(&block); end
end

# source://dropbox_api//lib/dropbox_api/options_validator.rb#3
module DropboxApi::OptionsValidator
  # Takes in a list of valid option keys and a hash of options. If one of the
  # keys in the hash is invalid an ArgumentError will be raised.
  #
  # @param valid_option_keys List of valid keys for the options hash.
  # @param options [Hash] Options hash.
  #
  # source://dropbox_api//lib/dropbox_api/options_validator.rb#9
  def validate_options(valid_option_keys, options); end
end

# source://dropbox_api//lib/dropbox_api/result_builder.rb#3
class DropboxApi::ResultBuilder
  # @return [ResultBuilder] a new instance of ResultBuilder
  #
  # source://dropbox_api//lib/dropbox_api/result_builder.rb#4
  def initialize(response_data); end

  # source://dropbox_api//lib/dropbox_api/result_builder.rb#24
  def build(result_class); end

  # source://dropbox_api//lib/dropbox_api/result_builder.rb#28
  def build_error(error_type); end

  # source://dropbox_api//lib/dropbox_api/result_builder.rb#12
  def error; end

  # source://dropbox_api//lib/dropbox_api/result_builder.rb#8
  def error_summary; end

  # @return [Boolean]
  #
  # source://dropbox_api//lib/dropbox_api/result_builder.rb#16
  def has_error?; end

  # @return [Boolean]
  #
  # source://dropbox_api//lib/dropbox_api/result_builder.rb#20
  def success?; end
end

# source://dropbox_api//lib/dropbox_api/results/base.rb#2
module DropboxApi::Results; end

# Example of a result of the `add_file_member` endpoint:
#   [{
#     "member":{
#       ".tag": "email",
#       "email": "somebody@test.com"
#     },
#     "result": {
#       ".tag": "success",
#       "success": {
#         ".tag": "viewer"
#       }
#     }
#   }]
#
# source://dropbox_api//lib/dropbox_api/results/add_file_member_result_list.rb#16
class DropboxApi::Results::AddFileMemberResultList < ::Array
  # @return [AddFileMemberResultList] a new instance of AddFileMemberResultList
  #
  # source://dropbox_api//lib/dropbox_api/results/add_file_member_result_list.rb#17
  def initialize(members); end
end

# source://dropbox_api//lib/dropbox_api/results/base.rb#3
class DropboxApi::Results::Base
  # @return [Base] a new instance of Base
  #
  # source://dropbox_api//lib/dropbox_api/results/base.rb#4
  def initialize(result_data); end
end

# source://dropbox_api//lib/dropbox_api/results/basic_account_batch.rb#3
class DropboxApi::Results::BasicAccountBatch < ::Array
  # @return [BasicAccountBatch] a new instance of BasicAccountBatch
  #
  # source://dropbox_api//lib/dropbox_api/results/basic_account_batch.rb#4
  def initialize(accounts); end
end

# source://dropbox_api//lib/dropbox_api/results/copy_batch_result.rb#3
class DropboxApi::Results::CopyBatchResult < ::DropboxApi::Results::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/results/copy_batch_result.rb#4
    def new(result_data); end
  end
end

# Result returned by {Client#create_folder_batch} that may either launch an
# asynchronous job or complete synchronously.
#
# The value will be either a job id or a list of job statuses.
#
# source://dropbox_api//lib/dropbox_api/results/create_folder_batch_result.rb#7
class DropboxApi::Results::CreateFolderBatchResult < ::DropboxApi::Results::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/results/create_folder_batch_result.rb#8
    def new(result_data); end
  end
end

# source://dropbox_api//lib/dropbox_api/results/create_folder_batch_result_entry.rb#3
class DropboxApi::Results::CreateFolderBatchResultEntry < ::DropboxApi::Results::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/results/create_folder_batch_result_entry.rb#4
    def new(result_data); end
  end
end

# Result returned by {Client#delete_batch} that may either launch an
# asynchronous job or complete synchronously.
#
# The value will be either a job id or a list of job statuses.
#
# source://dropbox_api//lib/dropbox_api/results/delete_batch_result.rb#7
class DropboxApi::Results::DeleteBatchResult < ::DropboxApi::Results::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/results/delete_batch_result.rb#8
    def new(result_data); end
  end
end

# source://dropbox_api//lib/dropbox_api/results/delete_batch_result_entry.rb#3
class DropboxApi::Results::DeleteBatchResultEntry < ::DropboxApi::Results::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/results/delete_batch_result_entry.rb#4
    def new(result_data); end
  end
end

# source://dropbox_api//lib/dropbox_api/results/get_copy_reference_result.rb#3
class DropboxApi::Results::GetCopyReferenceResult < ::DropboxApi::Results::Base
  # A copy reference to the file or folder.
  #
  # source://dropbox_api//lib/dropbox_api/results/get_copy_reference_result.rb#10
  def copy_reference; end

  # The expiration date of the copy reference.
  # This value is currently set to be far enough in the future
  # so that expiration is effectively not an issue.
  #
  # source://dropbox_api//lib/dropbox_api/results/get_copy_reference_result.rb#17
  def expires; end

  # Metadata of the file or folder.
  #
  # source://dropbox_api//lib/dropbox_api/results/get_copy_reference_result.rb#5
  def resource; end
end

# source://dropbox_api//lib/dropbox_api/results/get_temporary_link_result.rb#3
class DropboxApi::Results::GetTemporaryLinkResult < ::DropboxApi::Results::Base
  # source://dropbox_api//lib/dropbox_api/results/get_temporary_link_result.rb#4
  def file; end

  # source://dropbox_api//lib/dropbox_api/results/get_temporary_link_result.rb#8
  def link; end
end

# source://dropbox_api//lib/dropbox_api/results/get_thumbnail_batch_result.rb#3
class DropboxApi::Results::GetThumbnailBatchResult < ::DropboxApi::Results::Base
  # source://dropbox_api//lib/dropbox_api/results/get_thumbnail_batch_result.rb#4
  def entries; end
end

# source://dropbox_api//lib/dropbox_api/results/list_folder_get_latest_cursor_result.rb#3
class DropboxApi::Results::ListFolderGetLatestCursorResult < ::DropboxApi::Results::Base
  # source://dropbox_api//lib/dropbox_api/results/list_folder_get_latest_cursor_result.rb#4
  def cursor; end
end

# source://dropbox_api//lib/dropbox_api/results/list_folder_longpoll_result.rb#3
class DropboxApi::Results::ListFolderLongpollResult < ::DropboxApi::Results::Base
  # If present, backoff for at least this many seconds before calling
  # `list_folder_longpoll` again. This field is optional.
  #
  # source://dropbox_api//lib/dropbox_api/results/list_folder_longpoll_result.rb#12
  def backoff; end

  # Indicates whether new changes are available. If true, call
  # `list_folder_continue` to retrieve the changes.
  #
  # source://dropbox_api//lib/dropbox_api/results/list_folder_longpoll_result.rb#6
  def changes; end
end

# source://dropbox_api//lib/dropbox_api/results/list_folder_result.rb#3
class DropboxApi::Results::ListFolderResult < ::DropboxApi::Results::Base
  # Pass the cursor into `list_folder_continue` to see what's changed in the
  # folder since your previous query.
  #
  # source://dropbox_api//lib/dropbox_api/results/list_folder_result.rb#13
  def cursor; end

  # A collection of files and directories.
  #
  # source://dropbox_api//lib/dropbox_api/results/list_folder_result.rb#5
  def entries; end

  # If true, then there are more entries available. Pass the cursor to
  # `list_folder_continue` to retrieve the rest.
  #
  # @return [Boolean]
  #
  # source://dropbox_api//lib/dropbox_api/results/list_folder_result.rb#19
  def has_more?; end
end

# source://dropbox_api//lib/dropbox_api/results/list_revisions_result.rb#3
class DropboxApi::Results::ListRevisionsResult < ::DropboxApi::Results::Base
  # A collection of files and directories.
  #
  # source://dropbox_api//lib/dropbox_api/results/list_revisions_result.rb#5
  def entries; end

  # @return [Boolean]
  #
  # source://dropbox_api//lib/dropbox_api/results/list_revisions_result.rb#11
  def is_deleted?; end
end

# source://dropbox_api//lib/dropbox_api/results/list_shared_links_result.rb#3
class DropboxApi::Results::ListSharedLinksResult < ::DropboxApi::Results::Base
  # Pass the cursor into `list_folder_continue` to see what's changed in the
  # folder since your previous query.
  #
  # source://dropbox_api//lib/dropbox_api/results/list_shared_links_result.rb#13
  def cursor; end

  # If true, then there are more entries available. Pass the cursor to
  # `list_folder_continue` to retrieve the rest.
  #
  # @return [Boolean]
  #
  # source://dropbox_api//lib/dropbox_api/results/list_shared_links_result.rb#19
  def has_more?; end

  # Shared links applicable to the path argument.
  #
  # source://dropbox_api//lib/dropbox_api/results/list_shared_links_result.rb#5
  def links; end
end

# Result returned by {Client#copy_batch} or {Client#move_batch} that may
# either launch an asynchronous job or complete synchronously.
#
# The value will be either `:in_progress` or a list of job statuses.
#
# source://dropbox_api//lib/dropbox_api/results/relocation_batch_result.rb#7
class DropboxApi::Results::RelocationBatchResult < ::DropboxApi::Results::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/results/relocation_batch_result.rb#8
    def new(result_data); end
  end
end

# source://dropbox_api//lib/dropbox_api/results/relocation_batch_result_entry.rb#3
class DropboxApi::Results::RelocationBatchResultEntry < ::DropboxApi::Results::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/results/relocation_batch_result_entry.rb#4
    def new(result_data); end
  end
end

# source://dropbox_api//lib/dropbox_api/results/save_copy_reference_result.rb#3
class DropboxApi::Results::SaveCopyReferenceResult < ::DropboxApi::Results::Base
  # The saved file or folder in the user's Dropbox.
  #
  # source://dropbox_api//lib/dropbox_api/results/save_copy_reference_result.rb#5
  def resource; end
end

# source://dropbox_api//lib/dropbox_api/results/save_url_job_status.rb#3
class DropboxApi::Results::SaveUrlJobStatus < ::DropboxApi::Results::Base
  class << self
    # source://dropbox_api//lib/dropbox_api/results/save_url_job_status.rb#4
    def new(result_data); end
  end
end

# source://dropbox_api//lib/dropbox_api/results/save_url_result.rb#3
class DropboxApi::Results::SaveUrlResult < ::DropboxApi::Results::Base
  # Example with an async job:
  #   {
  #     ".tag": "async_job_id",
  #     "async_job_id": "VofXAX8DO1sAAAAAAAAD_Q"
  #   }
  #
  # I couldn't manage to get anything other than an async job.
  #
  # source://dropbox_api//lib/dropbox_api/results/save_url_result.rb#11
  def async_job_id; end
end

# source://dropbox_api//lib/dropbox_api/results/search_v2_result.rb#3
class DropboxApi::Results::SearchV2Result < ::DropboxApi::Results::Base
  # Pass the cursor into #search_continue to fetch the next page of results.
  # This field is optional.
  #
  # source://dropbox_api//lib/dropbox_api/results/search_v2_result.rb#19
  def cursor; end

  # Used for paging. If true, indicates there is another page of results
  # available that can be fetched by calling search again.
  #
  # @return [Boolean]
  #
  # source://dropbox_api//lib/dropbox_api/results/search_v2_result.rb#13
  def has_more?; end

  # A list (possibly empty) of matches for the query.
  #
  # source://dropbox_api//lib/dropbox_api/results/search_v2_result.rb#5
  def matches; end
end

# source://dropbox_api//lib/dropbox_api/results/share_folder_launch.rb#3
class DropboxApi::Results::ShareFolderLaunch
  class << self
    # source://dropbox_api//lib/dropbox_api/results/share_folder_launch.rb#4
    def new(result_data); end
  end
end

# source://dropbox_api//lib/dropbox_api/results/shared_file_members.rb#3
class DropboxApi::Results::SharedFileMembers < ::DropboxApi::Results::Base
  # source://dropbox_api//lib/dropbox_api/results/shared_file_members.rb#16
  def cursor; end

  # source://dropbox_api//lib/dropbox_api/results/shared_file_members.rb#8
  def groups; end

  # source://dropbox_api//lib/dropbox_api/results/shared_file_members.rb#12
  def invitees; end

  # source://dropbox_api//lib/dropbox_api/results/shared_file_members.rb#4
  def users; end
end

# source://dropbox_api//lib/dropbox_api/results/shared_folder_members.rb#3
class DropboxApi::Results::SharedFolderMembers < ::DropboxApi::Results::Base
  # source://dropbox_api//lib/dropbox_api/results/shared_folder_members.rb#16
  def cursor; end

  # source://dropbox_api//lib/dropbox_api/results/shared_folder_members.rb#8
  def groups; end

  # source://dropbox_api//lib/dropbox_api/results/shared_folder_members.rb#12
  def invitees; end

  # source://dropbox_api//lib/dropbox_api/results/shared_folder_members.rb#4
  def users; end
end

# source://dropbox_api//lib/dropbox_api/results/upload_session_start.rb#3
class DropboxApi::Results::UploadSessionStart < ::DropboxApi::Results::Base
  # source://dropbox_api//lib/dropbox_api/results/upload_session_start.rb#4
  def session_id; end
end

# source://dropbox_api//lib/dropbox_api/results/void_result.rb#3
class DropboxApi::Results::VoidResult < ::DropboxApi::Results::Base; end

# source://dropbox_api//lib/dropbox_api/version.rb#3
DropboxApi::VERSION = T.let(T.unsafe(nil), String)
