# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `winrm` gem.
# Please instead update this file by running `bin/tapioca gem winrm`.

# Main WinRM module entry point
#
# source://winrm//lib/winrm/version.rb#2
module WinRM; end

# WinRM connection used to establish a session with the remote WinRM service.
#
# source://winrm//lib/winrm/connection.rb#23
class WinRM::Connection
  # Creates a new WinRM connection
  # See the ConnectionOpts class for connection options.
  #
  # @return [Connection] a new instance of Connection
  #
  # source://winrm//lib/winrm/connection.rb#26
  def initialize(connection_opts); end

  # Returns the value of attribute logger.
  #
  # source://winrm//lib/winrm/connection.rb#31
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://winrm//lib/winrm/connection.rb#31
  def logger=(_arg0); end

  # Executes a WQL query against the WinRM connection
  #
  # @param wql [String] The wql query
  # @param namespace [String] namespace for query - default is root/cimv2/*
  # @return [Hash] Hash representation of wql query response (Hash is empty if a block is given)
  #
  # source://winrm//lib/winrm/connection.rb#56
  def run_wql(wql, namespace = T.unsafe(nil), &block); end

  # Creates a new shell on the remote Windows server associated with
  # this connection.
  #
  # @param shell_type [Symbol] The shell type :cmd or :powershell
  # @param shell_opts [Hash] Options targeted for the created shell
  # @return [Shell] PowerShell or Cmd shell instance.
  #
  # source://winrm//lib/winrm/connection.rb#38
  def shell(shell_type, shell_opts = T.unsafe(nil)); end

  private

  # source://winrm//lib/winrm/connection.rb#63
  def configure_connection_opts(connection_opts); end

  # source://winrm//lib/winrm/connection.rb#67
  def configure_logger; end

  # source://winrm//lib/winrm/connection.rb#73
  def shell_factory; end

  # source://winrm//lib/winrm/connection.rb#77
  def transport; end
end

# WinRM connection options, provides defaults and validation.
#
# source://winrm//lib/winrm/connection_opts.rb#19
class WinRM::ConnectionOpts < ::Hash
  # source://winrm//lib/winrm/connection_opts.rb#58
  def validate; end

  private

  # source://winrm//lib/winrm/connection_opts.rb#76
  def validate_data_types; end

  # source://winrm//lib/winrm/connection_opts.rb#84
  def validate_integer(key, min = T.unsafe(nil)); end

  # source://winrm//lib/winrm/connection_opts.rb#65
  def validate_required_fields; end

  class << self
    # source://winrm//lib/winrm/connection_opts.rb#28
    def create_with_defaults(overrides); end

    private

    # source://winrm//lib/winrm/connection_opts.rb#44
    def default; end

    # source://winrm//lib/winrm/connection_opts.rb#37
    def ensure_receive_timeout_is_greater_than_operation_timeout(config); end
  end
end

# source://winrm//lib/winrm/connection_opts.rb#23
WinRM::ConnectionOpts::DEFAULT_LOCALE = T.let(T.unsafe(nil), String)

# source://winrm//lib/winrm/connection_opts.rb#22
WinRM::ConnectionOpts::DEFAULT_MAX_ENV_SIZE = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/connection_opts.rb#20
WinRM::ConnectionOpts::DEFAULT_OPERATION_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/connection_opts.rb#21
WinRM::ConnectionOpts::DEFAULT_RECEIVE_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/connection_opts.rb#24
WinRM::ConnectionOpts::DEFAULT_RETRY_DELAY = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/connection_opts.rb#25
WinRM::ConnectionOpts::DEFAULT_RETRY_LIMIT = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/http/transport.rb#19
module WinRM::HTTP; end

# Uses SSL to secure the transport
#
# source://winrm//lib/winrm/http/transport.rb#263
class WinRM::HTTP::BasicAuthSSL < ::WinRM::HTTP::HttpTransport
  # @return [BasicAuthSSL] a new instance of BasicAuthSSL
  #
  # source://winrm//lib/winrm/http/transport.rb#264
  def initialize(endpoint, user, pass, opts); end
end

# Uses Client Certificate to authenticate and SSL to secure the transport
#
# source://winrm//lib/winrm/http/transport.rb#275
class WinRM::HTTP::ClientCertAuthSSL < ::WinRM::HTTP::HttpTransport
  # @return [ClientCertAuthSSL] a new instance of ClientCertAuthSSL
  #
  # source://winrm//lib/winrm/http/transport.rb#276
  def initialize(endpoint, client_cert, client_key, key_pass, opts); end
end

# Uses Kerberos/GSSAPI to authenticate and encrypt messages
#
# source://winrm//lib/winrm/http/transport.rb#287
class WinRM::HTTP::HttpGSSAPI < ::WinRM::HTTP::HttpTransport
  # @param endpoint [String, URI] the WinRM webservice endpoint
  # @param realm [String] the Kerberos realm we are authenticating to
  # @param service [String<optional>] the service name, default is HTTP
  # @return [HttpGSSAPI] a new instance of HttpGSSAPI
  #
  # source://winrm//lib/winrm/http/transport.rb#291
  def initialize(endpoint, realm, opts, service = T.unsafe(nil)); end

  # Sends the SOAP payload to the WinRM service and returns the service's
  # SOAP response. If an error occurrs an appropriate error is raised.
  #
  # @param The [String] XML SOAP message
  #
  # source://winrm//lib/winrm/http/transport.rb#309
  def send_request(message); end

  private

  # source://winrm//lib/winrm/http/transport.rb#349
  def init_krb; end

  # Sends the SOAP payload to the WinRM service and returns the service's
  # HTTP response.
  #
  # @param The [String] XML SOAP message
  #
  # source://winrm//lib/winrm/http/transport.rb#329
  def send_kerberos_request(message); end

  # @return [String] the unencrypted response string
  #
  # source://winrm//lib/winrm/http/transport.rb#415
  def winrm_decrypt(str); end

  # @return [String] the encrypted request string
  #
  # source://winrm//lib/winrm/http/transport.rb#372
  def winrm_encrypt(str); end
end

# NTLM/Negotiate, secure, HTTP transport
#
# source://winrm//lib/winrm/http/transport.rb#147
class WinRM::HTTP::HttpNegotiate < ::WinRM::HTTP::HttpTransport
  # @return [HttpNegotiate] a new instance of HttpNegotiate
  #
  # source://winrm//lib/winrm/http/transport.rb#148
  def initialize(endpoint, user, pass, opts); end

  # source://winrm//lib/winrm/http/transport.rb#166
  def send_request(message); end

  private

  # source://winrm//lib/winrm/http/transport.rb#248
  def channel_binding(response); end

  # source://winrm//lib/winrm/http/transport.rb#228
  def init_auth; end

  # source://winrm//lib/winrm/http/transport.rb#213
  def issue_challenge_response(negotiate); end

  # source://winrm//lib/winrm/http/transport.rb#192
  def seal(message); end

  # @raise [WinRMHTTPTransportError]
  #
  # source://winrm//lib/winrm/http/transport.rb#198
  def winrm_decrypt(resp); end
end

# Plain text, insecure, HTTP transport
#
# source://winrm//lib/winrm/http/transport.rb#136
class WinRM::HTTP::HttpPlaintext < ::WinRM::HTTP::HttpTransport
  # @return [HttpPlaintext] a new instance of HttpPlaintext
  #
  # source://winrm//lib/winrm/http/transport.rb#137
  def initialize(endpoint, user, pass, opts); end
end

# A generic HTTP transport that utilized HTTPClient to send messages back and forth.
# This backend will maintain state for every WinRMWebService instance that is instantiated so it
# is possible to use GSSAPI with Keep-Alive.
#
# source://winrm//lib/winrm/http/transport.rb#23
class WinRM::HTTP::HttpTransport
  # @return [HttpTransport] a new instance of HttpTransport
  #
  # source://winrm//lib/winrm/http/transport.rb#26
  def initialize(endpoint, options); end

  # We'll need this to force basic authentication if desired
  #
  # source://winrm//lib/winrm/http/transport.rb#56
  def basic_auth_only!; end

  # Returns the value of attribute endpoint.
  #
  # source://winrm//lib/winrm/http/transport.rb#24
  def endpoint; end

  # Disable SSL Peer Verification
  #
  # source://winrm//lib/winrm/http/transport.rb#68
  def no_ssl_peer_verification!; end

  # Disable SSPI Auth
  #
  # source://winrm//lib/winrm/http/transport.rb#62
  def no_sspi_auth!; end

  # Sends the SOAP payload to the WinRM service and returns the service's
  # SOAP response. If an error occurrs an appropriate error is raised.
  #
  # @param The [String] XML SOAP message
  #
  # source://winrm//lib/winrm/http/transport.rb#38
  def send_request(message); end

  # SSL Peer Fingerprint Verification prior to connecting
  #
  # source://winrm//lib/winrm/http/transport.rb#73
  def ssl_peer_fingerprint_verification!; end

  # compare @ssl_peer_fingerprint to current ssl context
  #
  # source://winrm//lib/winrm/http/transport.rb#100
  def verify_ssl_fingerprint(cert); end

  # Connect without verification to retrieve untrusted ssl context
  #
  # source://winrm//lib/winrm/http/transport.rb#86
  def with_untrusted_ssl_connection; end

  protected

  # source://winrm//lib/winrm/http/transport.rb#111
  def body(message, length, type = T.unsafe(nil)); end

  # source://winrm//lib/winrm/http/transport.rb#122
  def log_soap_message(message); end
end

# Factory for creating a HTTP transport that can be used for WinRM SOAP calls.
#
# source://winrm//lib/winrm/http/transport_factory.rb#20
class WinRM::HTTP::TransportFactory
  # Creates a new WinRM HTTP transport using the specified connection options.
  #
  # @param connection_opts [ConnectionOpts|Hash] The connection ConnectionOpts.
  # @return [HttpTransport] A transport instance for making WinRM calls.
  #
  # source://winrm//lib/winrm/http/transport_factory.rb#24
  def create_transport(connection_opts); end

  private

  # source://winrm//lib/winrm/http/transport_factory.rb#36
  def init_kerberos_transport(opts); end

  # source://winrm//lib/winrm/http/transport_factory.rb#32
  def init_negotiate_transport(opts); end

  # source://winrm//lib/winrm/http/transport_factory.rb#40
  def init_plaintext_transport(opts); end

  # source://winrm//lib/winrm/http/transport_factory.rb#44
  def init_ssl_transport(opts); end

  # @raise [WinRM::InvalidTransportError]
  #
  # source://winrm//lib/winrm/http/transport_factory.rb#55
  def validate_transport!(transport); end
end

# Exitcode error
#
# source://winrm//lib/winrm/exceptions.rb#26
class WinRM::InvalidExitCode < ::WinRM::WinRMError; end

# Shell creation error
#
# source://winrm//lib/winrm/exceptions.rb#23
class WinRM::InvalidShellError < ::WinRM::WinRMError; end

# Shell creation error
#
# source://winrm//lib/winrm/exceptions.rb#29
class WinRM::InvalidTransportError < ::WinRM::WinRMError
  # @return [InvalidTransportError] a new instance of InvalidTransportError
  #
  # source://winrm//lib/winrm/exceptions.rb#32
  def initialize(invalid_transport, valid_transports); end

  # Returns the value of attribute invalid_transport.
  #
  # source://winrm//lib/winrm/exceptions.rb#30
  def invalid_transport; end
end

# This class holds raw output and has convenience methods to parse.
#
# source://winrm//lib/winrm/output.rb#17
class WinRM::Output
  # @return [Output] a new instance of Output
  #
  # source://winrm//lib/winrm/output.rb#18
  def initialize; end

  # Appends stream data to the output
  #
  # source://winrm//lib/winrm/output.rb#54
  def <<(data); end

  # @return [Integer] exitcode returned from command
  #
  # source://winrm//lib/winrm/output.rb#23
  def exitcode; end

  # Sets the exitcode
  #
  # @raise [WinRM::InvalidExitCode]
  #
  # source://winrm//lib/winrm/output.rb#47
  def exitcode=(code); end

  # @return [String] Aggregated stdout and stderr streams
  #
  # source://winrm//lib/winrm/output.rb#26
  def output; end

  # @return [String] stderr stream output
  #
  # source://winrm//lib/winrm/output.rb#40
  def stderr; end

  # @return [String] stdout stream output
  #
  # source://winrm//lib/winrm/output.rb#33
  def stdout; end
end

# PowerShell Remoting Protcol module
#
# source://winrm//lib/winrm/psrp/fragment.rb#18
module WinRM::PSRP; end

# PowerShell Remoting Protocol message fragment.
#
# source://winrm//lib/winrm/psrp/fragment.rb#20
class WinRM::PSRP::Fragment
  # Creates a new PSRP message fragment
  #
  # @param object_id [Integer] The id of the fragmented message.
  # @param blob [Array] Array of fragmented bytes.
  # @param fragment_id [Integer] The id of this fragment
  # @param start_fragment [Boolean] If the fragment is the first fragment
  # @param end_fragment [Boolean] If the fragment is the last fragment
  # @return [Fragment] a new instance of Fragment
  #
  # source://winrm//lib/winrm/psrp/fragment.rb#27
  def initialize(object_id, blob, fragment_id = T.unsafe(nil), start_fragment = T.unsafe(nil), end_fragment = T.unsafe(nil)); end

  # Returns the value of attribute blob.
  #
  # source://winrm//lib/winrm/psrp/fragment.rb#35
  def blob; end

  # Returns the raw PSRP message bytes ready for transfer to Windows inside a
  # WinRM message.
  #
  # @return [Array<Byte>] Unencoded raw byte array of the PSRP message.
  #
  # source://winrm//lib/winrm/psrp/fragment.rb#40
  def bytes; end

  # Returns the value of attribute end_fragment.
  #
  # source://winrm//lib/winrm/psrp/fragment.rb#35
  def end_fragment; end

  # Returns the value of attribute fragment_id.
  #
  # source://winrm//lib/winrm/psrp/fragment.rb#35
  def fragment_id; end

  # Returns the value of attribute object_id.
  #
  # source://winrm//lib/winrm/psrp/fragment.rb#35
  def object_id; end

  # Returns the value of attribute start_fragment.
  #
  # source://winrm//lib/winrm/psrp/fragment.rb#35
  def start_fragment; end

  private

  # source://winrm//lib/winrm/psrp/fragment.rb#52
  def end_start_fragment; end

  # source://winrm//lib/winrm/psrp/fragment.rb#63
  def int16be(int16); end

  # source://winrm//lib/winrm/psrp/fragment.rb#59
  def int64be(int64); end
end

# PowerShell Remoting Protocol base message.
# http://download.microsoft.com/download/9/5/E/95EF66AF-9026-4BB0-A41D-A4F81802D92C/%5BMS-PSRP%5D.pdf
#
# source://winrm//lib/winrm/psrp/message.rb#24
class WinRM::PSRP::Message
  include ::WinRM::PSRP::UUID

  # Creates a new PSRP message instance
  # specified in hex, e.g. 0x00010002.
  #
  # @param runspace_pool_id [String] The UUID of the remote shell/runspace pool.
  # @param pipeline_id [String] The UUID to correlate the command/pipeline response
  # @param type [Integer] The PSRP MessageType. This is most commonly
  # @param data [String] The PSRP payload as serialized XML
  # @param destination [Integer] The destination for this message - client or server
  # @return [Message] a new instance of Message
  #
  # source://winrm//lib/winrm/psrp/message.rb#75
  def initialize(runspace_pool_id, type, data, pipeline_id = T.unsafe(nil), destination = T.unsafe(nil)); end

  # Returns the raw PSRP message bytes ready for transfer to Windows inside a
  # WinRM message.
  #
  # @return [Array<Byte>] Unencoded raw byte array of the PSRP message.
  #
  # source://winrm//lib/winrm/psrp/message.rb#96
  def bytes; end

  # Returns the value of attribute data.
  #
  # source://winrm//lib/winrm/psrp/message.rb#91
  def data; end

  # Returns the value of attribute destination.
  #
  # source://winrm//lib/winrm/psrp/message.rb#91
  def destination; end

  # Parses the raw data to a MessageData class
  #
  # @return [MessageData::Base] MessageData corresponding to this message type
  #
  # source://winrm//lib/winrm/psrp/message.rb#109
  def parsed_data; end

  # Returns the value of attribute pipeline_id.
  #
  # source://winrm//lib/winrm/psrp/message.rb#91
  def pipeline_id; end

  # Returns the value of attribute runspace_pool_id.
  #
  # source://winrm//lib/winrm/psrp/message.rb#91
  def runspace_pool_id; end

  # Returns the value of attribute type.
  #
  # source://winrm//lib/winrm/psrp/message.rb#91
  def type; end

  private

  # source://winrm//lib/winrm/psrp/message.rb#115
  def byte_order_mark; end

  # source://winrm//lib/winrm/psrp/message.rb#119
  def data_bytes; end

  # source://winrm//lib/winrm/psrp/message.rb#123
  def int16le(int16); end
end

# Value of message destination when sent to a client
#
# source://winrm//lib/winrm/psrp/message.rb#28
WinRM::PSRP::Message::CLIENT_DESTINATION = T.let(T.unsafe(nil), Integer)

# All known PSRP message types
#
# source://winrm//lib/winrm/psrp/message.rb#34
WinRM::PSRP::Message::MESSAGE_TYPES = T.let(T.unsafe(nil), Hash)

# Value of message destination when sent to a server
#
# source://winrm//lib/winrm/psrp/message.rb#31
WinRM::PSRP::Message::SERVER_DESTINATION = T.let(T.unsafe(nil), Integer)

# PowerShell Remoting Protocol message data.
#
# source://winrm//lib/winrm/psrp/message_data/base.rb#21
module WinRM::PSRP::MessageData
  class << self
    # source://winrm//lib/winrm/psrp/message_data.rb#35
    def camelize(underscore); end

    # source://winrm//lib/winrm/psrp/message_data.rb#29
    def parse(message); end
  end
end

# base class for message data
#
# source://winrm//lib/winrm/psrp/message_data/base.rb#23
class WinRM::PSRP::MessageData::Base
  # @return [Base] a new instance of Base
  #
  # source://winrm//lib/winrm/psrp/message_data/base.rb#24
  def initialize(data); end

  # @return [String] raw message data
  #
  # source://winrm//lib/winrm/psrp/message_data/base.rb#29
  def raw; end

  protected

  # source://winrm//lib/winrm/psrp/message_data/base.rb#33
  def clixml; end
end

# error record message type
#
# source://winrm//lib/winrm/psrp/message_data/error_record.rb#19
class WinRM::PSRP::MessageData::ErrorRecord < ::WinRM::PSRP::MessageData::Base
  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#40
  def doc; end

  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#32
  def error_category_message; end

  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#36
  def error_details_script_stack_trace; end

  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#20
  def exception; end

  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#24
  def fully_qualified_error_id; end

  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#28
  def invocation_info; end

  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#49
  def property_hash(prop_name); end

  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#44
  def string_prop(prop_name); end

  # source://winrm//lib/winrm/psrp/message_data/error_record.rb#59
  def underscore(camel); end
end

# pipeline host call message type
#
# source://winrm//lib/winrm/psrp/message_data/pipeline_host_call.rb#19
class WinRM::PSRP::MessageData::PipelineHostCall < ::WinRM::PSRP::MessageData::Base
  # source://winrm//lib/winrm/psrp/message_data/pipeline_host_call.rb#20
  def method_identifier; end

  # source://winrm//lib/winrm/psrp/message_data/pipeline_host_call.rb#24
  def method_parameters; end
end

# Handles decoding a raw powershell output response
#
# source://winrm//lib/winrm/psrp/message_data/pipeline_output.rb#21
class WinRM::PSRP::MessageData::PipelineOutput < ::WinRM::PSRP::MessageData::Base
  # source://winrm//lib/winrm/psrp/message_data/pipeline_output.rb#22
  def output; end

  private

  # source://winrm//lib/winrm/psrp/message_data/pipeline_output.rb#28
  def extract_out_string(text); end

  # source://winrm//lib/winrm/psrp/message_data/pipeline_output.rb#42
  def remove_bom(text); end
end

# pipeline state message type
#
# source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#19
class WinRM::PSRP::MessageData::PipelineState < ::WinRM::PSRP::MessageData::Base
  # source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#32
  def exception_as_error_record; end

  # source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#28
  def pipeline_state; end
end

# source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#24
WinRM::PSRP::MessageData::PipelineState::COMPLETED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#26
WinRM::PSRP::MessageData::PipelineState::DISCONNECTED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#25
WinRM::PSRP::MessageData::PipelineState::FAILED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#20
WinRM::PSRP::MessageData::PipelineState::NOT_STARTED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#21
WinRM::PSRP::MessageData::PipelineState::RUNNING = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#23
WinRM::PSRP::MessageData::PipelineState::STOPPED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/pipeline_state.rb#22
WinRM::PSRP::MessageData::PipelineState::STOPPING = T.let(T.unsafe(nil), Integer)

# runspace pool host call message type
#
# source://winrm//lib/winrm/psrp/message_data/runspacepool_host_call.rb#19
class WinRM::PSRP::MessageData::RunspacepoolHostCall < ::WinRM::PSRP::MessageData::Base
  # source://winrm//lib/winrm/psrp/message_data/runspacepool_host_call.rb#20
  def method_identifier; end

  # source://winrm//lib/winrm/psrp/message_data/runspacepool_host_call.rb#24
  def method_parameters; end
end

# runspace pool state message type
#
# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#19
class WinRM::PSRP::MessageData::RunspacepoolState < ::WinRM::PSRP::MessageData::Base
  # source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#31
  def runspace_state; end
end

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#20
WinRM::PSRP::MessageData::RunspacepoolState::BEFORE_OPEN = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#25
WinRM::PSRP::MessageData::RunspacepoolState::BROKEN = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#23
WinRM::PSRP::MessageData::RunspacepoolState::CLOSED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#24
WinRM::PSRP::MessageData::RunspacepoolState::CLOSING = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#28
WinRM::PSRP::MessageData::RunspacepoolState::CONNECTING = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#29
WinRM::PSRP::MessageData::RunspacepoolState::DISCONNECTED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#26
WinRM::PSRP::MessageData::RunspacepoolState::NEGOTIATION_SENT = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#27
WinRM::PSRP::MessageData::RunspacepoolState::NEGOTIATION_SUCCEEDED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#22
WinRM::PSRP::MessageData::RunspacepoolState::OPENED = T.let(T.unsafe(nil), Integer)

# source://winrm//lib/winrm/psrp/message_data/runspacepool_state.rb#21
WinRM::PSRP::MessageData::RunspacepoolState::OPENING = T.let(T.unsafe(nil), Integer)

# session capability message type
#
# source://winrm//lib/winrm/psrp/message_data/session_capability.rb#19
class WinRM::PSRP::MessageData::SessionCapability < ::WinRM::PSRP::MessageData::Base
  # source://winrm//lib/winrm/psrp/message_data/session_capability.rb#20
  def protocol_version; end

  # source://winrm//lib/winrm/psrp/message_data/session_capability.rb#24
  def ps_version; end

  # source://winrm//lib/winrm/psrp/message_data/session_capability.rb#28
  def serialization_version; end
end

# PowerShell Remoting Protocol message fragmenter.
#
# source://winrm//lib/winrm/psrp/message_defragmenter.rb#21
class WinRM::PSRP::MessageDefragmenter
  # @return [MessageDefragmenter] a new instance of MessageDefragmenter
  #
  # source://winrm//lib/winrm/psrp/message_defragmenter.rb#22
  def initialize; end

  # source://winrm//lib/winrm/psrp/message_defragmenter.rb#26
  def defragment(base64_bytes); end

  # source://winrm//lib/winrm/psrp/message_defragmenter.rb#41
  def fragment_from(byte_string); end

  # source://winrm//lib/winrm/psrp/message_defragmenter.rb#51
  def message_from(byte_string); end
end

# Creates WinRM::PSRP::Message instances for various PSRP messages
#
# source://winrm//lib/winrm/psrp/message_factory.rb#21
class WinRM::PSRP::MessageFactory
  class << self
    # Creates a new PSRP message that creates pipline to execute a command.
    # response.
    #
    # @param runspace_pool_id [String] The UUID of the remote shell/runspace pool.
    # @param pipeline_id [String] The UUID to correlate the command/pipeline
    # @param command [String] The command passed to Invoke-Expression.
    #
    # source://winrm//lib/winrm/psrp/message_factory.rb#48
    def create_pipeline_message(runspace_pool_id, pipeline_id, command); end

    # Creates a new init runspace pool PSRP message.
    #
    # @param runspace_pool_id [String] The UUID of the remote shell/runspace pool.
    #
    # source://winrm//lib/winrm/psrp/message_factory.rb#35
    def init_runspace_pool_message(runspace_pool_id); end

    # Creates a new session capability PSRP message.
    #
    # @param runspace_pool_id [String] The UUID of the remote shell/runspace pool.
    #
    # source://winrm//lib/winrm/psrp/message_factory.rb#25
    def session_capability_message(runspace_pool_id); end

    private

    # Renders the specified template with the given context
    #
    # @api private
    # @param template [String] The base filename of the PSRP message template.
    # @param context [Hash] Any options required for rendering the template.
    # @return [String] The rendered XML PSRP message.
    #
    # source://winrm//lib/winrm/psrp/message_factory.rb#64
    def render(template, context = T.unsafe(nil)); end
  end
end

# PowerShell Remoting Protocol message fragmenter.
#
# source://winrm//lib/winrm/psrp/message_fragmenter.rb#21
class WinRM::PSRP::MessageFragmenter
  # @return [MessageFragmenter] a new instance of MessageFragmenter
  #
  # source://winrm//lib/winrm/psrp/message_fragmenter.rb#24
  def initialize(max_blob_length = T.unsafe(nil)); end

  # source://winrm//lib/winrm/psrp/message_fragmenter.rb#32
  def fragment(message); end

  # Returns the value of attribute max_blob_length.
  #
  # source://winrm//lib/winrm/psrp/message_fragmenter.rb#30
  def max_blob_length; end

  # Sets the attribute max_blob_length
  #
  # @param value the value to set the attribute max_blob_length to.
  #
  # source://winrm//lib/winrm/psrp/message_fragmenter.rb#30
  def max_blob_length=(_arg0); end

  # Returns the value of attribute object_id.
  #
  # source://winrm//lib/winrm/psrp/message_fragmenter.rb#29
  def object_id; end
end

# source://winrm//lib/winrm/psrp/message_fragmenter.rb#22
WinRM::PSRP::MessageFragmenter::DEFAULT_BLOB_LENGTH = T.let(T.unsafe(nil), Integer)

# Handles decoding a raw powershell output response
#
# source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#22
class WinRM::PSRP::PowershellOutputDecoder
  # Decode the raw SOAP output into decoded PSRP message,
  # Removes BOM and replaces encoded line endings
  #
  # @param raw_output [String] The raw encoded output
  # @return [String] The decoded output
  #
  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#28
  def decode(message); end

  protected

  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#71
  def decode_error_record(message); end

  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#52
  def decode_host_call(message); end

  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#48
  def decode_pipeline_output(message); end

  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#101
  def render_exception(parsed); end

  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#118
  def render_exception_as_error_record(parsed); end

  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#110
  def render_native_command_error(parsed); end

  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#93
  def render_write_error_exception(parsed); end

  private

  # source://winrm//lib/winrm/psrp/powershell_output_decoder.rb#128
  def hex_decode(text); end
end

# Class for reading powershell responses in Receive_Response messages
#
# source://winrm//lib/winrm/psrp/receive_response_reader.rb#22
class WinRM::PSRP::ReceiveResponseReader < ::WinRM::WSMV::ReceiveResponseReader
  # Creates a new ReceiveResponseReader
  #
  # @param transport [HttpTransport] The WinRM SOAP transport
  # @param logger [Logger] The logger to log diagnostic messages to
  # @return [ReceiveResponseReader] a new instance of ReceiveResponseReader
  #
  # source://winrm//lib/winrm/psrp/receive_response_reader.rb#26
  def initialize(transport, logger); end

  # Reads PSRP messages sent in one or more receive response messages
  #
  # @param wsmv_message [WinRM::WSMV::Base] A wsmv message to send to endpoint
  # @param wait_for_done_state whether to poll for a CommandState of Done
  # @yield [Message] PSRP Message in response
  # @yieldreturn [Array<Message>] All messages in response
  #
  # source://winrm//lib/winrm/psrp/receive_response_reader.rb#36
  def read_message(wsmv_message, wait_for_done_state = T.unsafe(nil)); end

  # Reads streams and returns decoded output
  #
  # @param wsmv_message [WinRM::WSMV::Base] A wsmv message to send to endpoint
  # @yieldparam standard [string] out response text
  # @yieldparam standard [string] error response text
  # @yieldreturn [WinRM::Output] The command output
  #
  # source://winrm//lib/winrm/psrp/receive_response_reader.rb#57
  def read_output(wsmv_message); end

  private

  # source://winrm//lib/winrm/psrp/receive_response_reader.rb#87
  def find_exit_code(message); end

  # source://winrm//lib/winrm/psrp/receive_response_reader.rb#74
  def stream_type(message); end
end

# UUID helper methods
#
# source://winrm//lib/winrm/psrp/uuid.rb#18
module WinRM::PSRP::UUID
  # Format a UUID into a GUID compatible byte array for Windows
  #
  # https://msdn.microsoft.com/en-us/library/windows/desktop/aa373931(v=vs.85).aspx
  # typedef struct _GUID {
  #   DWORD Data1;
  #   WORD  Data2;
  #   WORD  Data3;
  #   BYTE  Data4[8];
  # } GUID;
  #
  # @param uuid [String] Canonical hex format with hypens.
  # @return [Array<byte>] UUID in a Windows GUID compatible byte array layout.
  #
  # source://winrm//lib/winrm/psrp/uuid.rb#31
  def uuid_to_windows_guid_bytes(uuid); end
end

# Handles the raw WinRM HTTP response. Returns the body as an XML doc
# or raises the appropriate WinRM error if the response is an error.
#
# source://winrm//lib/winrm/http/response_handler.rb#21
class WinRM::ResponseHandler
  # @param The [String] raw unparsed response body, if any
  # @param The [Integer] HTTP response status code
  # @return [ResponseHandler] a new instance of ResponseHandler
  #
  # source://winrm//lib/winrm/http/response_handler.rb#24
  def initialize(response_body, status_code); end

  # Processes the response from the WinRM service and either returns an XML
  # doc or raises an appropriate error.
  #
  # source://winrm//lib/winrm/http/response_handler.rb#33
  def parse_to_xml; end

  private

  # @raise [WinRMAuthorizationError]
  #
  # source://winrm//lib/winrm/http/response_handler.rb#58
  def raise_if_auth_error; end

  # source://winrm//lib/winrm/http/response_handler.rb#48
  def raise_if_error; end

  # @raise [WinRMSoapFault]
  #
  # source://winrm//lib/winrm/http/response_handler.rb#96
  def raise_if_soap_fault; end

  # @raise [WinRMWMIError]
  #
  # source://winrm//lib/winrm/http/response_handler.rb#76
  def raise_if_wmi_error; end

  # @raise [WinRMWSManFault]
  #
  # source://winrm//lib/winrm/http/response_handler.rb#62
  def raise_if_wsman_fault; end

  # @raise [WinRMHTTPTransportError]
  #
  # source://winrm//lib/winrm/http/response_handler.rb#120
  def raise_transport_error; end

  # source://winrm//lib/winrm/http/response_handler.rb#40
  def response_xml; end
end

# source://winrm//lib/winrm/shells/retryable.rb#19
module WinRM::Shells; end

# Base class for remote shell
#
# source://winrm//lib/winrm/shells/base.rb#28
class WinRM::Shells::Base
  include ::WinRM::Shells::Retryable

  # Create a new Cmd shell
  #
  # @param connection_opts [ConnectionOpts] The WinRM connection options
  # @param transport [HttpTransport] The WinRM SOAP transport
  # @param logger [Logger] The logger to log diagnostic messages to
  # @param shell_opts [Hash] Options targeted for the created shell
  # @return [Base] a new instance of Base
  #
  # source://winrm//lib/winrm/shells/base.rb#46
  def initialize(connection_opts, transport, logger, shell_opts = T.unsafe(nil)); end

  # Closes the shell if one is open
  #
  # source://winrm//lib/winrm/shells/base.rb#85
  def close; end

  # @return [ConnectionOpts] connection options of the shell
  #
  # source://winrm//lib/winrm/shells/base.rb#60
  def connection_opts; end

  # @return [Logger] logger used for diagnostic messages
  #
  # source://winrm//lib/winrm/shells/base.rb#66
  def logger; end

  # Runs the specified command with optional arguments
  #
  # @param command [String] The command or executable to run
  # @param arguments [Array] The optional command arguments
  # @param block [&block] The optional callback for any realtime output
  # @yieldparam standard [string] out response text
  # @yieldparam standard [string] error response text
  # @yieldreturn [WinRM::Output] The command output
  #
  # source://winrm//lib/winrm/shells/base.rb#78
  def run(command, arguments = T.unsafe(nil), &block); end

  # @return [String] shell id of the currently opn shell or nil if shell is closed
  #
  # source://winrm//lib/winrm/shells/base.rb#54
  def shell_id; end

  # @return [Hash] Options targeted for the created shell
  #
  # source://winrm//lib/winrm/shells/base.rb#69
  def shell_opts; end

  # @return [String] uri that SOAP calls use to identify shell type
  #
  # source://winrm//lib/winrm/shells/base.rb#57
  def shell_uri; end

  # @return [WinRM::HTTP::HttpTransport] transport used to talk with endpoint
  #
  # source://winrm//lib/winrm/shells/base.rb#63
  def transport; end

  protected

  # source://winrm//lib/winrm/shells/base.rb#115
  def command_output_message(shell_id, command_id); end

  # @raise [NotImplementedError]
  #
  # source://winrm//lib/winrm/shells/base.rb#107
  def open_shell; end

  # @raise [NotImplementedError]
  #
  # source://winrm//lib/winrm/shells/base.rb#111
  def out_streams; end

  # @raise [NotImplementedError]
  #
  # source://winrm//lib/winrm/shells/base.rb#103
  def response_reader; end

  # @raise [NotImplementedError]
  #
  # source://winrm//lib/winrm/shells/base.rb#99
  def send_command(_command, _arguments); end

  # source://winrm//lib/winrm/shells/base.rb#125
  def with_command_shell(command, arguments = T.unsafe(nil)); end

  private

  # source://winrm//lib/winrm/shells/base.rb#175
  def add_finalizer; end

  # source://winrm//lib/winrm/shells/base.rb#149
  def cleanup_command(command_id); end

  # source://winrm//lib/winrm/shells/base.rb#165
  def open; end

  # source://winrm//lib/winrm/shells/base.rb#182
  def remove_finalizer; end

  # source://winrm//lib/winrm/shells/base.rb#143
  def reset_on_error(error); end
end

# source://winrm//lib/winrm/shells/base.rb#30
WinRM::Shells::Base::ERROR_OPERATION_ABORTED = T.let(T.unsafe(nil), String)

# source://winrm//lib/winrm/shells/base.rb#33
WinRM::Shells::Base::FAULTS_FOR_RESET = T.let(T.unsafe(nil), Array)

# source://winrm//lib/winrm/shells/base.rb#31
WinRM::Shells::Base::SHELL_NOT_FOUND = T.let(T.unsafe(nil), String)

# source://winrm//lib/winrm/shells/base.rb#29
WinRM::Shells::Base::TOO_MANY_COMMANDS = T.let(T.unsafe(nil), String)

# Proxy to a remote cmd.exe shell
#
# source://winrm//lib/winrm/shells/cmd.rb#20
class WinRM::Shells::Cmd < ::WinRM::Shells::Base
  include ::WinRM::WSMV::SOAP

  protected

  # source://winrm//lib/winrm/shells/cmd.rb#52
  def open_shell; end

  # source://winrm//lib/winrm/shells/cmd.rb#58
  def out_streams; end

  # source://winrm//lib/winrm/shells/cmd.rb#48
  def response_reader; end

  # source://winrm//lib/winrm/shells/cmd.rb#35
  def send_command(command, arguments); end

  class << self
    # source://winrm//lib/winrm/shells/cmd.rb#27
    def close_shell(connection_opts, transport, shell_id); end

    # source://winrm//lib/winrm/shells/cmd.rb#23
    def finalize(connection_opts, transport, shell_id); end
  end
end

# Proxy to a remote PowerShell instance
#
# source://winrm//lib/winrm/shells/power_shell.rb#28
class WinRM::Shells::Powershell < ::WinRM::Shells::Base
  include ::WinRM::WSMV::SOAP

  # Create a new powershell shell
  #
  # @param connection_opts [ConnectionOpts] The WinRM connection options
  # @param transport [HttpTransport] The WinRM SOAP transport
  # @param logger [Logger] The logger to log diagnostic messages to
  # @return [Powershell] a new instance of Powershell
  #
  # source://winrm//lib/winrm/shells/power_shell.rb#50
  def initialize(connection_opts, transport, logger); end

  # calculate the maimum fragment size so that they will be as large as possible yet
  # no greater than the max_envelope_size_kb on the end point. To calculate this
  # threshold, we:
  # - determine the maximum number of bytes accepted on the endpoint
  # - subtract the non-fragment characters in the SOAP envelope
  # - determine the number of bytes that could be base64 encded to the above length
  # - subtract the fragment header bytes (ids, length, etc)
  #
  # source://winrm//lib/winrm/shells/power_shell.rb#73
  def max_fragment_blob_size; end

  # Runs the specified command
  #
  # @param command [String] The powershell script to run
  # @param block [&block] The optional callback for any realtime output
  # @yield [Message] PSRP Message in response
  # @yieldreturn [Array<Message>] All messages in response
  #
  # source://winrm//lib/winrm/shells/power_shell.rb#60
  def send_pipeline_command(command, &block); end

  protected

  # source://winrm//lib/winrm/shells/power_shell.rb#118
  def open_shell; end

  # source://winrm//lib/winrm/shells/power_shell.rb#131
  def out_streams; end

  # source://winrm//lib/winrm/shells/power_shell.rb#96
  def response_reader; end

  # source://winrm//lib/winrm/shells/power_shell.rb#100
  def send_command(command, _arguments); end

  private

  # source://winrm//lib/winrm/shells/power_shell.rb#137
  def base64_deflated(inflated_length); end

  # Powershell v2.0 has a protocol version of 2.1
  # which defaults to a 150 MaxEnvelopeSizeKB
  # later versions default to 500
  #
  # source://winrm//lib/winrm/shells/power_shell.rb#197
  def default_protocol_envelope_size(protocol_version); end

  # source://winrm//lib/winrm/shells/power_shell.rb#141
  def empty_pipeline_envelope; end

  # source://winrm//lib/winrm/shells/power_shell.rb#201
  def fragmenter; end

  # source://winrm//lib/winrm/shells/power_shell.rb#149
  def max_envelope_size_kb; end

  # source://winrm//lib/winrm/shells/power_shell.rb#161
  def open_shell_payload(shell_id); end

  # source://winrm//lib/winrm/shells/power_shell.rb#170
  def wait_for_running(shell_id); end

  class << self
    # source://winrm//lib/winrm/shells/power_shell.rb#36
    def close_shell(connection_opts, transport, shell_id); end

    # source://winrm//lib/winrm/shells/power_shell.rb#32
    def finalize(connection_opts, transport, shell_id); end
  end
end

# Shell mixin for retrying an operation
#
# source://winrm//lib/winrm/shells/retryable.rb#21
module WinRM::Shells::Retryable
  # Retries the operation a specified number of times with a delay between
  #
  # @param retries [Integer] The number of times to retry
  # @param delay [Integer] The number of seconds to wait between retry attempts
  #
  # source://winrm//lib/winrm/shells/retryable.rb#34
  def retryable(retries, delay); end
end

# source://winrm//lib/winrm/shells/retryable.rb#22
WinRM::Shells::Retryable::RETRYABLE_EXCEPTIONS = T.let(T.unsafe(nil), Proc)

# Factory for creating concrete shell instances
#
# source://winrm//lib/winrm/shells/shell_factory.rb#22
class WinRM::Shells::ShellFactory
  # Creates a new ShellFactory instance
  #
  # @param connection_opts [ConnectionOpts] The WinRM connection options
  # @param transport [HttpTransport] The WinRM SOAP transport for sending messages
  # @param logger [Logger] The logger to log messages to
  # @return [ShellFactory] a new instance of ShellFactory
  #
  # source://winrm//lib/winrm/shells/shell_factory.rb#27
  def initialize(connection_opts, transport, logger); end

  # Creates a new shell instance based off the shell_type
  #
  # @param shell_type [Symbol] The shell type :cmd or :powershell
  # @param shell_opts [Hash] Options targeted for the created shell
  # @return The ready to use shell instance
  #
  # source://winrm//lib/winrm/shells/shell_factory.rb#37
  def create_shell(shell_type, shell_opts = T.unsafe(nil)); end
end

# The version of the WinRM library
#
# source://winrm//lib/winrm/version.rb#4
WinRM::VERSION = T.let(T.unsafe(nil), String)

# source://winrm//lib/winrm/wsmv/soap.rb#17
module WinRM::WSMV; end

# Base class for all WSMV message classes
#
# source://winrm//lib/winrm/wsmv/base.rb#24
class WinRM::WSMV::Base
  include ::WinRM::WSMV::SOAP
  include ::WinRM::WSMV::Header

  # Builds the WSMV message XML payload
  #
  # source://winrm//lib/winrm/wsmv/base.rb#29
  def build; end

  protected

  # @raise [NotImplementedError]
  #
  # source://winrm//lib/winrm/wsmv/base.rb#48
  def create_body; end

  # @raise [NotImplementedError]
  #
  # source://winrm//lib/winrm/wsmv/base.rb#44
  def create_header; end

  # source://winrm//lib/winrm/wsmv/base.rb#52
  def encode_bytes(bytes); end
end

# WSMV message to execute a command inside a remote shell
#
# source://winrm//lib/winrm/wsmv/cleanup_command.rb#20
class WinRM::WSMV::CleanupCommand < ::WinRM::WSMV::Base
  # @return [CleanupCommand] a new instance of CleanupCommand
  #
  # source://winrm//lib/winrm/wsmv/cleanup_command.rb#21
  def initialize(session_opts, opts); end

  protected

  # source://winrm//lib/winrm/wsmv/cleanup_command.rb#37
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/cleanup_command.rb#33
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/cleanup_command.rb#52
  def cleanup_body; end

  # source://winrm//lib/winrm/wsmv/cleanup_command.rb#45
  def cleanup_header; end
end

# WSMV message to close a remote shell
#
# source://winrm//lib/winrm/wsmv/close_shell.rb#20
class WinRM::WSMV::CloseShell < ::WinRM::WSMV::Base
  # @return [CloseShell] a new instance of CloseShell
  #
  # source://winrm//lib/winrm/wsmv/close_shell.rb#21
  def initialize(session_opts, shell_opts); end

  protected

  # source://winrm//lib/winrm/wsmv/close_shell.rb#35
  def create_body(_body); end

  # source://winrm//lib/winrm/wsmv/close_shell.rb#31
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/close_shell.rb#41
  def close_header; end
end

# WSMV message to execute a command inside a remote shell
#
# source://winrm//lib/winrm/wsmv/command.rb#20
class WinRM::WSMV::Command < ::WinRM::WSMV::Base
  # @return [Command] a new instance of Command
  #
  # source://winrm//lib/winrm/wsmv/command.rb#23
  def initialize(session_opts, cmd_opts); end

  # source://winrm//lib/winrm/wsmv/command.rb#29
  def build; end

  # Returns the value of attribute command_id.
  #
  # source://winrm//lib/winrm/wsmv/command.rb#21
  def command_id; end

  protected

  # source://winrm//lib/winrm/wsmv/command.rb#40
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/command.rb#36
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/command.rb#70
  def command_body; end

  # source://winrm//lib/winrm/wsmv/command.rb#84
  def command_header_opts; end

  # source://winrm//lib/winrm/wsmv/command.rb#76
  def command_headers; end

  # source://winrm//lib/winrm/wsmv/command.rb#48
  def init_ops(session_opts, cmd_opts); end

  # source://winrm//lib/winrm/wsmv/command.rb#64
  def issue69_unescape_single_quotes(xml); end

  # source://winrm//lib/winrm/wsmv/command.rb#58
  def validate_opts(session_opts, cmd_opts); end
end

# WSMV message to get output from a remote shell
#
# source://winrm//lib/winrm/wsmv/command_output.rb#20
class WinRM::WSMV::CommandOutput < ::WinRM::WSMV::Base
  # @return [CommandOutput] a new instance of CommandOutput
  #
  # source://winrm//lib/winrm/wsmv/command_output.rb#21
  def initialize(session_opts, command_out_opts); end

  protected

  # source://winrm//lib/winrm/wsmv/command_output.rb#38
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/command_output.rb#34
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/command_output.rb#52
  def header_opts; end

  # source://winrm//lib/winrm/wsmv/command_output.rb#64
  def output_body; end

  # source://winrm//lib/winrm/wsmv/command_output.rb#44
  def output_header; end
end

# Handles decoding a raw output response
#
# source://winrm//lib/winrm/wsmv/command_output_decoder.rb#20
class WinRM::WSMV::CommandOutputDecoder
  # Decode the raw SOAP output into decoded and human consumable text,
  # Decodes and replaces invalid unicode characters.
  #
  # @param raw_output [String] The raw encoded output
  # @return [String] The decoded output
  #
  # source://winrm//lib/winrm/wsmv/command_output_decoder.rb#25
  def decode(raw_output); end

  private

  # source://winrm//lib/winrm/wsmv/command_output_decoder.rb#34
  def decode_raw_output(raw_output); end

  # source://winrm//lib/winrm/wsmv/command_output_decoder.rb#38
  def handle_invalid_encoding(decoded_text); end

  # source://winrm//lib/winrm/wsmv/command_output_decoder.rb#48
  def remove_bom(decoded_text); end
end

# WSMV keep alive message
#
# source://winrm//lib/winrm/wsmv/configuration.rb#20
class WinRM::WSMV::Configuration < ::WinRM::WSMV::Base
  # @return [Configuration] a new instance of Configuration
  #
  # source://winrm//lib/winrm/wsmv/configuration.rb#21
  def initialize(session_opts); end

  protected

  # source://winrm//lib/winrm/wsmv/configuration.rb#31
  def create_body(_body); end

  # source://winrm//lib/winrm/wsmv/configuration.rb#27
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/configuration.rb#37
  def configuration_headers; end
end

# WSMV message to execute a command via psrp
#
# source://winrm//lib/winrm/wsmv/create_pipeline.rb#21
class WinRM::WSMV::CreatePipeline < ::WinRM::WSMV::Base
  # @return [CreatePipeline] a new instance of CreatePipeline
  #
  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#24
  def initialize(session_opts, shell_id, command_id, fragment = T.unsafe(nil)); end

  # Returns the value of attribute command_id.
  #
  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#22
  def command_id; end

  # Sets the attribute command_id
  #
  # @param value the value to set the attribute command_id to.
  #
  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#22
  def command_id=(_arg0); end

  # Returns the value of attribute fragment.
  #
  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#22
  def fragment; end

  # Sets the attribute fragment
  #
  # @param value the value to set the attribute fragment to.
  #
  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#22
  def fragment=(_arg0); end

  # Returns the value of attribute shell_id.
  #
  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#22
  def shell_id; end

  # Sets the attribute shell_id
  #
  # @param value the value to set the attribute shell_id to.
  #
  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#22
  def shell_id=(_arg0); end

  protected

  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#37
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#33
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#59
  def arguments; end

  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#45
  def command_body; end

  # source://winrm//lib/winrm/wsmv/create_pipeline.rb#52
  def command_headers; end
end

# WSMV message to create a remote shell
#
# source://winrm//lib/winrm/wsmv/create_shell.rb#21
class WinRM::WSMV::CreateShell < ::WinRM::WSMV::Base
  # @return [CreateShell] a new instance of CreateShell
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#29
  def initialize(session_opts, shell_opts = T.unsafe(nil)); end

  # Returns the value of attribute codepage.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#26
  def codepage; end

  # Sets the attribute codepage
  #
  # @param value the value to set the attribute codepage to.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#26
  def codepage=(_arg0); end

  # Returns the value of attribute env_vars.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#27
  def env_vars; end

  # Sets the attribute env_vars
  #
  # @param value the value to set the attribute env_vars to.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#27
  def env_vars=(_arg0); end

  # Returns the value of attribute i_stream.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#26
  def i_stream; end

  # Sets the attribute i_stream
  #
  # @param value the value to set the attribute i_stream to.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#26
  def i_stream=(_arg0); end

  # Returns the value of attribute idle_timeout.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#27
  def idle_timeout; end

  # Sets the attribute idle_timeout
  #
  # @param value the value to set the attribute idle_timeout to.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#27
  def idle_timeout=(_arg0); end

  # Returns the value of attribute noprofile.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#26
  def noprofile; end

  # Sets the attribute noprofile
  #
  # @param value the value to set the attribute noprofile to.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#26
  def noprofile=(_arg0); end

  # Returns the value of attribute o_stream.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#26
  def o_stream; end

  # Sets the attribute o_stream
  #
  # @param value the value to set the attribute o_stream to.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#26
  def o_stream=(_arg0); end

  # Returns the value of attribute working_directory.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#27
  def working_directory; end

  # Sets the attribute working_directory
  #
  # @param value the value to set the attribute working_directory to.
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#27
  def working_directory=(_arg0); end

  protected

  # source://winrm//lib/winrm/wsmv/create_shell.rb#47
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/create_shell.rb#43
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/create_shell.rb#91
  def action_create; end

  # source://winrm//lib/winrm/wsmv/create_shell.rb#73
  def environment_vars_body; end

  # backwards compat - idle_timeout as an Iso8601Duration string
  #
  # source://winrm//lib/winrm/wsmv/create_shell.rb#69
  def format_idle_timeout(timeout); end

  # source://winrm//lib/winrm/wsmv/create_shell.rb#102
  def header_opts; end

  # source://winrm//lib/winrm/wsmv/create_shell.rb#53
  def opt_or_default(shell_opts, key, default_value = T.unsafe(nil)); end

  # source://winrm//lib/winrm/wsmv/create_shell.rb#57
  def shell_body; end

  # source://winrm//lib/winrm/wsmv/create_shell.rb#84
  def shell_headers; end
end

# utf8 as default codepage
# https://msdn.microsoft.com/en-us/library/dd317756(VS.85).aspx
#
# source://winrm//lib/winrm/wsmv/create_shell.rb#24
WinRM::WSMV::CreateShell::UTF8_CODE_PAGE = T.let(T.unsafe(nil), Integer)

# SOAP header utility mixin
#
# source://winrm//lib/winrm/wsmv/header.rb#23
module WinRM::WSMV::Header
  # source://winrm//lib/winrm/wsmv/header.rb#126
  def action_command; end

  # source://winrm//lib/winrm/wsmv/header.rb#114
  def action_delete; end

  # source://winrm//lib/winrm/wsmv/header.rb#174
  def action_enumerate; end

  # source://winrm//lib/winrm/wsmv/header.rb#186
  def action_enumerate_pull; end

  # source://winrm//lib/winrm/wsmv/header.rb#102
  def action_get; end

  # source://winrm//lib/winrm/wsmv/header.rb#138
  def action_receive; end

  # source://winrm//lib/winrm/wsmv/header.rb#150
  def action_send; end

  # source://winrm//lib/winrm/wsmv/header.rb#162
  def action_signal; end

  # Merge the various header hashes and make sure we carry all of the attributes
  # through instead of overwriting them.
  #
  # source://winrm//lib/winrm/wsmv/header.rb#32
  def merge_headers(*headers); end

  # source://winrm//lib/winrm/wsmv/header.rb#86
  def resource_uri_cmd; end

  # Helper methods for SOAP Headers
  #
  # source://winrm//lib/winrm/wsmv/header.rb#76
  def resource_uri_shell(shell_uri); end

  # source://winrm//lib/winrm/wsmv/header.rb#90
  def resource_uri_wmi(namespace = T.unsafe(nil)); end

  # source://winrm//lib/winrm/wsmv/header.rb#198
  def selector_shell_id(shell_id); end

  # source://winrm//lib/winrm/wsmv/header.rb#42
  def shared_headers(session_opts); end
end

# WSMan URI of the regular Windows cmd shell
#
# source://winrm//lib/winrm/wsmv/header.rb#25
WinRM::WSMV::Header::RESOURCE_URI_CMD = T.let(T.unsafe(nil), String)

# WSMan URI for PowerShell
#
# source://winrm//lib/winrm/wsmv/header.rb#28
WinRM::WSMV::Header::RESOURCE_URI_POWERSHELL = T.let(T.unsafe(nil), String)

# WSMV message to create a remote shell
#
# source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#20
class WinRM::WSMV::InitRunspacePool < ::WinRM::WSMV::Base
  # @return [InitRunspacePool] a new instance of InitRunspacePool
  #
  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#23
  def initialize(session_opts, shell_id, payload); end

  # Returns the value of attribute shell_id.
  #
  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#21
  def shell_id; end

  # Sets the attribute shell_id
  #
  # @param value the value to set the attribute shell_id to.
  #
  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#21
  def shell_id=(_arg0); end

  protected

  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#35
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#31
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#65
  def action_create; end

  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#76
  def header_opts; end

  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#44
  def shell_body; end

  # source://winrm//lib/winrm/wsmv/init_runspace_pool.rb#58
  def shell_headers; end
end

# Converts seconds to ISO8601 duration format
#
# source://winrm//lib/winrm/wsmv/iso8601_duration.rb#21
module WinRM::WSMV::Iso8601Duration
  class << self
    # Convert the number of seconds to an ISO8601 duration format
    #
    # @param seconds [Integer] The amount of seconds for this duration
    # @see http://tools.ietf.org/html/rfc2445#section-4.3.6
    #
    # source://winrm//lib/winrm/wsmv/iso8601_duration.rb#25
    def sec_to_dur(seconds); end
  end
end

# WSMV keep alive message
#
# source://winrm//lib/winrm/wsmv/keep_alive.rb#20
class WinRM::WSMV::KeepAlive < ::WinRM::WSMV::Base
  # @return [KeepAlive] a new instance of KeepAlive
  #
  # source://winrm//lib/winrm/wsmv/keep_alive.rb#23
  def initialize(session_opts, shell_id); end

  # Returns the value of attribute shell_id.
  #
  # source://winrm//lib/winrm/wsmv/keep_alive.rb#21
  def shell_id; end

  # Sets the attribute shell_id
  #
  # @param value the value to set the attribute shell_id to.
  #
  # source://winrm//lib/winrm/wsmv/keep_alive.rb#21
  def shell_id=(_arg0); end

  protected

  # source://winrm//lib/winrm/wsmv/keep_alive.rb#34
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/keep_alive.rb#30
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/keep_alive.rb#52
  def header_opts; end

  # source://winrm//lib/winrm/wsmv/keep_alive.rb#40
  def keep_alive_body; end

  # source://winrm//lib/winrm/wsmv/keep_alive.rb#44
  def keep_alive_headers; end
end

# Class for reading wsmv Receive_Response messages
#
# source://winrm//lib/winrm/wsmv/receive_response_reader.rb#23
class WinRM::WSMV::ReceiveResponseReader
  include ::WinRM::WSMV::SOAP
  include ::WinRM::WSMV::Header

  # Creates a new ReceiveResponseReader
  #
  # @param transport [HttpTransport] The WinRM SOAP transport
  # @param logger [Logger] The logger to log diagnostic messages to
  # @return [ReceiveResponseReader] a new instance of ReceiveResponseReader
  #
  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#30
  def initialize(transport, logger); end

  # Returns the value of attribute logger.
  #
  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#36
  def logger; end

  # Reads streams and returns decoded output
  #
  # @param wsmv_message [WinRM::WSMV::Base] A wsmv message to send to endpoint
  # @yieldparam standard [string] out response text
  # @yieldparam standard [string] error response text
  # @yieldreturn [WinRM::Output] The command output
  #
  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#43
  def read_output(wsmv_message); end

  # Reads streams sent in one or more receive response messages
  #
  # @param wsmv_message [WinRM::WSMV::Base] A wsmv message to send to endpoint
  # @param wait_for_done_state whether to poll for a CommandState of Done
  # @yieldparam Hash [Hash] representation of stream with type and text
  # @yieldparam Complete [REXML::Document] SOAP envelope returned to wsmv_message
  #
  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#57
  def read_response(wsmv_message, wait_for_done_state = T.unsafe(nil)); end

  protected

  # @yield [output]
  #
  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#71
  def with_output; end

  private

  # @return [Boolean]
  #
  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#106
  def command_done?(resp_doc, wait_for_done_state); end

  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#80
  def handle_stream(stream, output, resp_doc); end

  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#117
  def read_streams(response_document); end

  # source://winrm//lib/winrm/wsmv/receive_response_reader.rb#92
  def send_get_output_message(message); end
end

# WSMV SOAP namespaces mixin
#
# source://winrm//lib/winrm/wsmv/soap.rb#19
module WinRM::WSMV::SOAP
  # source://winrm//lib/winrm/wsmv/soap.rb#32
  def namespaces; end
end

# http://schemas.xmlsoap.org/ws/2004/08/addressing
#
# source://winrm//lib/winrm/wsmv/soap.rb#21
WinRM::WSMV::SOAP::NS_ADDRESSING = T.let(T.unsafe(nil), String)

# http://schemas.dmtf.org/wbem/wsman/1/cimbinding.xsd
#
# source://winrm//lib/winrm/wsmv/soap.rb#22
WinRM::WSMV::SOAP::NS_CIMBINDING = T.let(T.unsafe(nil), String)

# http://schemas.xmlsoap.org/ws/2004/09/enumeration
#
# source://winrm//lib/winrm/wsmv/soap.rb#23
WinRM::WSMV::SOAP::NS_ENUM = T.let(T.unsafe(nil), String)

# http://www.w3.org/2001/XMLSchema-instance
#
# source://winrm//lib/winrm/wsmv/soap.rb#27
WinRM::WSMV::SOAP::NS_SCHEMA_INST = T.let(T.unsafe(nil), String)

# http://www.w3.org/2003/05/soap-envelope
#
# source://winrm//lib/winrm/wsmv/soap.rb#20
WinRM::WSMV::SOAP::NS_SOAP_ENV = T.let(T.unsafe(nil), String)

# http://schemas.xmlsoap.org/ws/2004/09/transfer
#
# source://winrm//lib/winrm/wsmv/soap.rb#24
WinRM::WSMV::SOAP::NS_TRANSFER = T.let(T.unsafe(nil), String)

# http://schemas.microsoft.com/wbem/wsman/1/windows/shell
#
# source://winrm//lib/winrm/wsmv/soap.rb#28
WinRM::WSMV::SOAP::NS_WIN_SHELL = T.let(T.unsafe(nil), String)

# http://schemas.microsoft.com/wbem/wsman/1/config
#
# source://winrm//lib/winrm/wsmv/soap.rb#30
WinRM::WSMV::SOAP::NS_WSMAN_CONF = T.let(T.unsafe(nil), String)

# http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd
#
# source://winrm//lib/winrm/wsmv/soap.rb#25
WinRM::WSMV::SOAP::NS_WSMAN_DMTF = T.let(T.unsafe(nil), String)

# http://schemas.microsoft.com/wbem/wsman/1/wsmanfault
#
# source://winrm//lib/winrm/wsmv/soap.rb#29
WinRM::WSMV::SOAP::NS_WSMAN_FAULT = T.let(T.unsafe(nil), String)

# http://schemas.microsoft.com/wbem/wsman/1/wsman.xsd
#
# source://winrm//lib/winrm/wsmv/soap.rb#26
WinRM::WSMV::SOAP::NS_WSMAN_MSFT = T.let(T.unsafe(nil), String)

# Subclasses base, sends additional data to WinRM
#
# source://winrm//lib/winrm/wsmv/send_data.rb#20
class WinRM::WSMV::SendData < ::WinRM::WSMV::Base
  # @return [SendData] a new instance of SendData
  #
  # source://winrm//lib/winrm/wsmv/send_data.rb#23
  def initialize(session_opts, shell_id, command_id, fragment); end

  # Returns the value of attribute command_id.
  #
  # source://winrm//lib/winrm/wsmv/send_data.rb#21
  def command_id; end

  # Sets the attribute command_id
  #
  # @param value the value to set the attribute command_id to.
  #
  # source://winrm//lib/winrm/wsmv/send_data.rb#21
  def command_id=(_arg0); end

  # Returns the value of attribute fragment.
  #
  # source://winrm//lib/winrm/wsmv/send_data.rb#21
  def fragment; end

  # Sets the attribute fragment
  #
  # @param value the value to set the attribute fragment to.
  #
  # source://winrm//lib/winrm/wsmv/send_data.rb#21
  def fragment=(_arg0); end

  # Returns the value of attribute shell_id.
  #
  # source://winrm//lib/winrm/wsmv/send_data.rb#21
  def shell_id; end

  # Sets the attribute shell_id
  #
  # @param value the value to set the attribute shell_id to.
  #
  # source://winrm//lib/winrm/wsmv/send_data.rb#21
  def shell_id=(_arg0); end

  protected

  # source://winrm//lib/winrm/wsmv/send_data.rb#36
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/send_data.rb#32
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/send_data.rb#44
  def command_body; end

  # source://winrm//lib/winrm/wsmv/send_data.rb#56
  def command_headers; end
end

# WSMV message to 'pull' rest of enumeration results from Windows via WQL
#
# source://winrm//lib/winrm/wsmv/wql_pull.rb#7
class WinRM::WSMV::WqlPull < ::WinRM::WSMV::Base
  # @return [WqlPull] a new instance of WqlPull
  #
  # source://winrm//lib/winrm/wsmv/wql_pull.rb#8
  def initialize(session_opts, namespace, enumeration_context); end

  # source://winrm//lib/winrm/wsmv/wql_pull.rb#14
  def process_response(response); end

  protected

  # source://winrm//lib/winrm/wsmv/wql_pull.rb#30
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/wql_pull.rb#26
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/wql_pull.rb#44
  def wql_body; end

  # source://winrm//lib/winrm/wsmv/wql_pull.rb#36
  def wql_header; end
end

# WSMV message to query Windows via WQL
#
# source://winrm//lib/winrm/wsmv/wql_query.rb#21
class WinRM::WSMV::WqlQuery < ::WinRM::WSMV::Base
  # @return [WqlQuery] a new instance of WqlQuery
  #
  # source://winrm//lib/winrm/wsmv/wql_query.rb#22
  def initialize(transport, session_opts, wql, namespace = T.unsafe(nil)); end

  # source://winrm//lib/winrm/wsmv/wql_query.rb#29
  def process_response(response, &block); end

  protected

  # source://winrm//lib/winrm/wsmv/wql_query.rb#59
  def create_body(body); end

  # source://winrm//lib/winrm/wsmv/wql_query.rb#55
  def create_header(header); end

  private

  # source://winrm//lib/winrm/wsmv/wql_query.rb#65
  def process_items(items, &block); end

  # source://winrm//lib/winrm/wsmv/wql_query.rb#83
  def wql_body; end

  # source://winrm//lib/winrm/wsmv/wql_query.rb#79
  def wql_header; end
end

# Authorization Error
#
# source://winrm//lib/winrm/exceptions.rb#20
class WinRM::WinRMAuthorizationError < ::WinRM::WinRMError; end

# WinRM base class for errors
#
# source://winrm//lib/winrm/exceptions.rb#17
class WinRM::WinRMError < ::StandardError; end

# non-200 response without a SOAP fault
#
# source://winrm//lib/winrm/exceptions.rb#80
class WinRM::WinRMHTTPTransportError < ::WinRM::WinRMError
  # @return [WinRMHTTPTransportError] a new instance of WinRMHTTPTransportError
  #
  # source://winrm//lib/winrm/exceptions.rb#83
  def initialize(msg, status_code = T.unsafe(nil)); end

  # Returns the value of attribute status_code.
  #
  # source://winrm//lib/winrm/exceptions.rb#81
  def status_code; end
end

# A Fault returned in the SOAP response. The XML node contains Code, SubCode and Reason
#
# source://winrm//lib/winrm/exceptions.rb#54
class WinRM::WinRMSoapFault < ::WinRM::WinRMError
  # @return [WinRMSoapFault] a new instance of WinRMSoapFault
  #
  # source://winrm//lib/winrm/exceptions.rb#59
  def initialize(code, subcode, reason); end

  # Returns the value of attribute code.
  #
  # source://winrm//lib/winrm/exceptions.rb#55
  def code; end

  # Returns the value of attribute reason.
  #
  # source://winrm//lib/winrm/exceptions.rb#57
  def reason; end

  # Returns the value of attribute subcode.
  #
  # source://winrm//lib/winrm/exceptions.rb#56
  def subcode; end
end

# A Fault returned in the SOAP response. The XML node is a MSFT_WmiError
#
# source://winrm//lib/winrm/exceptions.rb#68
class WinRM::WinRMWMIError < ::WinRM::WinRMError
  # @return [WinRMWMIError] a new instance of WinRMWMIError
  #
  # source://winrm//lib/winrm/exceptions.rb#72
  def initialize(error, error_code); end

  # Returns the value of attribute error.
  #
  # source://winrm//lib/winrm/exceptions.rb#70
  def error; end

  # Returns the value of attribute error_code.
  #
  # source://winrm//lib/winrm/exceptions.rb#69
  def error_code; end
end

# A Fault returned in the SOAP response. The XML node is a WSManFault
#
# source://winrm//lib/winrm/exceptions.rb#42
class WinRM::WinRMWSManFault < ::WinRM::WinRMError
  # @return [WinRMWSManFault] a new instance of WinRMWSManFault
  #
  # source://winrm//lib/winrm/exceptions.rb#46
  def initialize(fault_description, fault_code); end

  # Returns the value of attribute fault_code.
  #
  # source://winrm//lib/winrm/exceptions.rb#43
  def fault_code; end

  # Returns the value of attribute fault_description.
  #
  # source://winrm//lib/winrm/exceptions.rb#44
  def fault_description; end
end
