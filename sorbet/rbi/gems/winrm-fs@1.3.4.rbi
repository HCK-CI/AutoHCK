# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `winrm-fs` gem.
# Please instead update this file by running `bin/tapioca gem winrm-fs`.

# source://winrm-fs//lib/winrm-fs/exceptions.rb#18
module WinRM; end

# WinRM File System
#
# source://winrm-fs//lib/winrm-fs/exceptions.rb#19
module WinRM::FS; end

# source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#27
module WinRM::FS::Core; end

# Object which can upload one or more files or directories to a remote
# host over WinRM using PowerShell scripts and CMD commands. Note that
# this form of file transfer is *not* ideal and extremely costly on both
# the local and remote sides. Great pains are made to minimize round
# trips to  the remote host and to minimize the number of PowerShell
# sessions being invoked which can be 2 orders of magnitude more
# expensive than vanilla CMD commands.
#
# This object is supported by a `PowerShell` instance as it
# depends on the `#run` API contract.
#
# An optional logger can be supplied, assuming it can respond to the
# `#debug` and `#debug?` messages.
#
# @author Fletcher Nichol <fnichol@nichol.ca>
# @author Matt Wrock <matt@mattwrock.com>
#
# source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#62
class WinRM::FS::Core::FileTransporter
  # Creates a FileTransporter given a PowerShell object.
  #
  # @param shell [PowerShell] a winrm PowerShell object
  # @return [FileTransporter] a new instance of FileTransporter
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#66
  def initialize(shell, opts = T.unsafe(nil)); end

  # Uploads a collection of files and/or directories to the remote host.
  #
  # **TODO Notes:**
  # * options could specify zip mode, zip options, etc.
  # * maybe option to set tmpfile base dir to override $env:PATH?
  # * progress yields block like net-scp progress
  # * final API: def upload(locals, remote, _options = {}, &_progress)
  #
  # @param locals [Array<String>, String, StringIO] one or more
  #   local file or directory paths, StringIO objects also accepted
  # @param remote [String] the base destination path on the remote host
  # @return [Hash] report hash, keyed by the local SHA1 digest
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#85
  def upload(locals, remote); end

  private

  # Adds an entry to a files Hash (keyed by local SHA1 digest) for a
  # directory. When a directory is added, a temporary Zip file is created
  # containing the contents of the directory and any file-related data
  # such as SHA1 digest, size, etc. will be referring to the Zip file.
  #
  # @api private
  # @param hash [Hash] hash to be mutated
  # @param dir [String] directory path to be Zipped and added
  # @param remote [String] path to destination on remote host
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#178
  def add_directory_hash!(hash, dir, remote); end

  # Adds an entry to a files Hash (keyed by local SHA1 digest) for a file.
  #
  # @api private
  # @param hash [Hash] hash to be mutated
  # @param local [String, StringIO] file path or StringIO object
  # @param remote [String] path to destination on remote host
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#199
  def add_file_hash!(hash, local, remote); end

  # Runs the check_files PowerShell script against a collection of
  # destination path/SHA1 checksum pairs. The PowerShell script returns
  # its results as a CSV-formatted report which is converted into a Ruby
  # Hash.
  #
  # @api private
  # @param files [Hash] files hash, keyed by the local SHA1 digest
  # @return [Hash] a report hash, keyed by the local SHA1 digest
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#216
  def check_files(files); end

  # Constructs a collection of destination path/SHA1 checksum pairs as a
  # String representation of the contents of a PowerShell Hash Table.
  #
  # @api private
  # @param files [Hash] files hash, keyed by the local SHA1 digest
  # @return [String] the inner contents of a PowerShell Hash Table
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#229
  def check_files_ps_hash(files); end

  # Ensure that only a single StringIO object is uploaded at a time
  # This is necessary because the contents of the buffer will be written
  # to the destination.
  #
  # @api private
  # @param locals [Array<String,StringIO>] a collection of local files,
  #   directories or StringIO objects
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#347
  def check_locals_array(locals); end

  # Performs any final cleanup on the report Hash and removes any
  # temporary files/resources used in the upload task.
  #
  # @api private
  # @param files [Hash] a files hash
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#248
  def cleanup(files); end

  # Returns a formatted string representing a duration in seconds.
  #
  # @param total [Integer] the total number of seconds
  # @return [String] a formatted string of the form (XmYY.00s)
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#303
  def duration(total); end

  # Runs the extract_files PowerShell script against a collection of
  # temporary file/destination path pairs. The PowerShell script returns
  # its results as a CSV-formatted report which is converted into a Ruby
  # Hash. The script will not be invoked if there are no zip files
  # present in the incoming files Hash.
  #
  # @api private
  # @param files [Hash] files hash, keyed by the local SHA1 digest
  # @return [Hash] a report hash, keyed by the local SHA1 digest
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#265
  def extract_files(files); end

  # Constructs a collection of temporary file/destination path pairs for
  # all zipped folders as a String representation of the contents of a
  # PowerShell Hash Table.
  #
  # @api private
  # @param files [Hash] files hash, keyed by the local SHA1 digest
  # @return [String] the inner contents of a PowerShell Hash Table
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#286
  def extract_files_ps_hash(files); end

  # @api private
  # @return [#debug, #debug?] the logger
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#134
  def logger; end

  # Contructs a Hash of files or directories, keyed by the local SHA1
  # digest. Each file entry has a source and destination set, at a
  # minimum.
  #
  # @api private
  # @param locals [Array<String,StringIO>] a collection of local files,
  #   directories or StringIO objects
  # @param remote [String] the base destination path on the remote host
  # @return [Hash] files hash, keyed by the local SHA1 digest
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#319
  def make_files_hash(locals, remote); end

  # @api private
  # @return [Integer] the maximum number of bytes to send per request
  #   when streaming a file. This is optimized to send as much data
  #   as allowed in a single PSRP fragment
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#144
  def max_encoded_write; end

  # Destructively merges a report Hash into an existing files Hash.
  # **Note:** this method mutates the files Hash.
  #
  # @api private
  # @param files [Hash] files hash, keyed by the local SHA1 digest
  # @param report [Hash] report hash, keyed by the local SHA1 digest
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#378
  def merge_with_report!(files, report); end

  # @api private
  # @param depth [Integer] number of padding characters (default: `0`)
  # @return [String] a whitespace padded string of the given length
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#385
  def pad(depth = T.unsafe(nil)); end

  # Parses response of a PowerShell script or CMD command which contains
  # a CSV-formatted document in the standard output stream.
  #
  # @api private
  # @param output [WinRM::Output] output object with stdout, stderr, and
  #   exit code
  # @return [Hash] report hash, keyed by the local SHA1 digest
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#396
  def parse_response(output); end

  # Converts a Ruby hash into a PowerShell hash table, represented in a
  # String.
  #
  # @api private
  # @param obj [Object] source Hash or object when used in recursive
  #   calls
  # @param depth [Integer] padding depth, used in recursive calls
  #   (default: `0`)
  # @return [String] a PowerShell hash table
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#425
  def ps_hash(obj, depth = T.unsafe(nil)); end

  # Examines the files and corrects the file destination if it is
  # targeting an existing folder. In this case, the destination path
  # will have the base name of the source file appended. This only
  # applies to file uploads and not to folder uploads.
  #
  # @api private
  # @param files [Hash] files hash, keyed by the local SHA1 digest
  # @return [Hash] a report hash, keyed by the local SHA1 digest
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#163
  def reconcile_destinations!(files); end

  # @api private
  # @return [String] the SHA1 digest of a local file or StringIO
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#364
  def sha1sum(local); end

  # @api private
  # @return [Winrm::Shells::Powershell] a WinRM Powershell shell
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#138
  def shell; end

  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#491
  def stream_command(encoded_bytes); end

  # Uploads an IO stream to a Base64-encoded destination file.
  #
  # **Implementation Note:** Some of the code in this method may appear
  # slightly too dense and while adding additional variables would help,
  # the code is written very precisely to avoid unwanted allocations
  # which will bloat the Ruby VM's object space (and memory footprint).
  # The goal here is to stream potentially large files to a remote host
  # while not loading the entire file into memory first, then Base64
  # encoding it--duplicating the file in memory again.
  #
  # @api private
  # @param input_io [#read] a readable stream or object to be uploaded
  # @param dest [String] path to the destination file on the remote host
  # @return [Integer, Integer] the number of resulting upload chunks and
  #   the number of bytes transferred to the remote host
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#450
  def stream_upload(input_io, dest); end

  # Uploads a local file.
  #
  # @api private
  # @param src [String, StringIO] path to a local file or StringIO object
  # @param dest [String] path to the file on the remote host
  # @return [Integer, Integer] the number of resulting upload chunks and
  #   the number of bytes transferred to the remote host
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#506
  def stream_upload_file(src, dest, &block); end

  # Uploads a collection of "dirty" files to the remote host as
  # Base64-encoded temporary files. A "dirty" file is one which has the
  # `"chk_dirty"` option set to `"True"` in the incoming files Hash.
  #
  # @api private
  # @param files [Hash] files hash, keyed by the local SHA1 digest
  # @return [Hash] a report hash, keyed by the local SHA1 digest
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#535
  def stream_upload_files(files); end

  # Total by byte count to be transferred.
  # Calculates count based on the sum of base64 encoded content size
  # of all files base 64 that are dirty.
  #
  # @api private
  # @param files [Hash] files hash, keyed by the local SHA1 digest
  # @return [Fixnum] total byte size
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#560
  def total_base64_transfer_size(files); end
end

# @api private
# @return [String] the Array pack template for Base64 encoding a stream
#   of data
#
# source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#125
WinRM::FS::Core::FileTransporter::BASE64_PACK = T.let(T.unsafe(nil), String)

# @api private
# @return [String] the directory where temporary upload artifacts are
#   persisted
#
# source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#130
WinRM::FS::Core::FileTransporter::TEMP_UPLOAD_DIRECTORY = T.let(T.unsafe(nil), String)

# Wrapped exception for any internally raised WinRM-related errors.
#
# @author Fletcher Nichol <fnichol@nichol.ca>
#
# source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#35
class WinRM::FS::Core::FileTransporterFailed < ::WinRM::WinRMError; end

# A temporary Zip file for a given directory.
#
# @author Fletcher Nichol <fnichol@nichol.ca>
#
# source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#31
class WinRM::FS::Core::TmpZip
  # Contructs a new Zip file for the given directory.
  #
  # There are 2 ways to interpret the directory path:
  #
  # * If the directory has no path separator terminator, then the
  #   directory basename will be used as the base directory in the
  #   resulting zip file.
  # * If the directory has a path separator terminator (such as `/` or
  #   `\\`), then the entries under the directory will be added to the
  #   resulting zip file.
  #
  # The following emaples assume a directory tree structure of:
  #
  #     src
  #     |-- alpha.txt
  #     |-- beta.txt
  #     \-- sub
  #         \-- charlie.txt
  #
  # @example Including the base directory in the zip file
  #
  #   TmpZip.new("/path/to/src")
  #   # produces a zip file with entries:
  #   # - src/alpha.txt
  #   # - src/beta.txt
  #   # - src/sub/charlie.txt
  # @example Excluding the base directory in the zip file
  #
  #   TmpZip.new("/path/to/src/")
  #   # produces a zip file with entries:
  #   # - alpha.txt
  #   # - beta.txt
  #   # - sub/charlie.txt
  # @param dir [String, Pathname, #to_s] path to the directory
  # @param logger [#debug, #debug?] an optional logger/ui object that
  #   responds to `#debug` and `#debug?` (default `nil`)
  # @return [TmpZip] a new instance of TmpZip
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#70
  def initialize(dir, logger = T.unsafe(nil)); end

  # @return [Pathname] path to zip file
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#79
  def path; end

  # Unlinks (deletes) the zip file from the filesystem.
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#84
  def unlink; end

  private

  # doesn't have any of those ~ in it
  #
  # @api private
  # @return [Pathname] the pathname object representing dirname that
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#105
  def clean_dirname(dir); end

  # @api private
  # @return [Pathname] the directory used to create the Zip file
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#92
  def dir; end

  # @api private
  # @return [Array<Pathname] all recursive files under the base
  # directory, excluding directories] Array<Pathname] all recursive files under the base
  #   directory, excluding directories
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#115
  def entries; end

  # @api private
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#121
  def log_subject; end

  # @api private
  # @return [#debug] the logger
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#96
  def logger; end

  # Adds all file entries to the Zip output stream.
  #
  # @api private
  # @param zos [Zip::OutputStream] zip output stream
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#129
  def produce_zip_entries(zos); end

  # Writes out a temporary Zip file.
  #
  # @api private
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#145
  def write_zip; end

  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#152
  def zip_entry(entry_path); end

  # @api private
  # @return [IO] the Zip file IO
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#100
  def zip_io; end
end

# Simple delegate wrapper to prevent `#dup` calls being made on IO
# objects. This is used to bypass an issue in the `Zip::Outputstream`
# constructor where an incoming IO is duplicated, leading to races
# on flushing the final stream to disk.
#
# @api private
# @author Fletcher Nichol <fnichol@nichol.ca>
#
# source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#168
class WinRM::FS::Core::TmpZip::NoDupIO < ::SimpleDelegator
  # @api private
  # @return [self] returns self and does *not* return a duplicate
  #   object
  #
  # source://winrm-fs//lib/winrm-fs/core/tmp_zip.rb#171
  def dup; end
end

# Exception for the case where upload source contains more than one
# StringIO object, or a combination of file/directory paths and StringIO object
#
# source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#40
class WinRM::FS::Core::UploadSourceError < ::StandardError
  # @return [UploadSourceError] a new instance of UploadSourceError
  #
  # source://winrm-fs//lib/winrm-fs/core/file_transporter.rb#41
  def initialize(msg = T.unsafe(nil)); end
end

# Perform file transfer operations between a local machine and winrm endpoint
#
# source://winrm-fs//lib/winrm-fs/file_manager.rb#25
class WinRM::FS::FileManager
  # Creates a new FileManager instance
  #
  # @param WinRM [WinRM::Connection] web connection client
  # @return [FileManager] a new instance of FileManager
  #
  # source://winrm-fs//lib/winrm-fs/file_manager.rb#28
  def initialize(connection); end

  # source://winrm-fs//lib/winrm-fs/file_manager.rb#88
  def _output_from_file(remote_path, chunk_size, index); end

  # source://winrm-fs//lib/winrm-fs/file_manager.rb#93
  def _write_file(tofd, output); end

  # Gets the SHA1 checksum of the specified file if it exists,
  # otherwise ''
  #
  # @param The [String] remote file path
  #
  # source://winrm-fs//lib/winrm-fs/file_manager.rb#37
  def checksum(path, digest = T.unsafe(nil)); end

  # Create the specifed directory recursively
  #
  # @param The [String] remote dir to create
  # @return [Boolean] True if successful, otherwise false
  #
  # source://winrm-fs//lib/winrm-fs/file_manager.rb#46
  def create_dir(path); end

  # Deletes the file or directory at the specified path
  #
  # @param The [String] path to remove
  # @return [Boolean] True if successful, otherwise False
  #
  # source://winrm-fs//lib/winrm-fs/file_manager.rb#55
  def delete(path); end

  # Downloads the specified remote file to the specified local path
  #
  # @param The [String] full path on the remote machine
  # @param The [String] full path to write the file to locally
  #
  # source://winrm-fs//lib/winrm-fs/file_manager.rb#65
  def download(remote_path, local_path, chunk_size = T.unsafe(nil), first = T.unsafe(nil)); end

  # Checks to see if the given path exists on the target file system.
  #
  # @param The [String] full path to the directory or file
  # @return [Boolean] True if the file/dir exists, otherwise false.
  #
  # source://winrm-fs//lib/winrm-fs/file_manager.rb#106
  def exists?(path); end

  # Gets the current user's TEMP directory on the remote system, for example
  # 'C:/Windows/Temp'
  #
  # @return [String] Full path to the temp directory
  #
  # source://winrm-fs//lib/winrm-fs/file_manager.rb#115
  def temp_dir; end

  # Upload one or more local files and directories to a remote directory
  #
  # @example copy a single file to a winrm endpoint
  #
  #   file_manager.upload('/Users/sneal/myfile.txt', 'c:/foo/myfile.txt')
  # @example copy a single directory to a winrm endpoint
  #
  #   file_manager.upload('c:/dev/my_dir', '$env:AppData')
  # @param A [String] path to a local directory or file that will be copied
  #   to the remote Windows box.
  # @param The [String] target directory or file
  #   This path may contain powershell style environment variables
  # @return [Fixnum] The total number of bytes copied
  # @yieldparam Number [Fixnum] of bytes copied in current payload sent to the winrm endpoint
  # @yieldparam The [Fixnum] total number of bytes to be copied
  # @yieldparam Path [String] of file being copied
  # @yieldparam Target [String] path on the winrm endpoint
  #
  # source://winrm-fs//lib/winrm-fs/file_manager.rb#139
  def upload(local_path, remote_path, &block); end

  private

  # source://winrm-fs//lib/winrm-fs/file_manager.rb#148
  def download_dir(remote_path, local_path, chunk_size, first); end
end

# PS1 scripts
#
# source://winrm-fs//lib/winrm-fs/scripts/scripts.rb#23
module WinRM::FS::Scripts
  class << self
    # source://winrm-fs//lib/winrm-fs/scripts/scripts.rb#25
    def render(template, context); end
  end
end

# Error that occurs when a file download fails
#
# source://winrm-fs//lib/winrm-fs/exceptions.rb#27
class WinRM::FS::WinRMDownloadError < ::WinRM::FS::WinRMFSError; end

# WinRM-FS base class for errors
#
# source://winrm-fs//lib/winrm-fs/exceptions.rb#21
class WinRM::FS::WinRMFSError < ::StandardError; end

# Error that occurs when a file upload fails
#
# source://winrm-fs//lib/winrm-fs/exceptions.rb#24
class WinRM::FS::WinRMUploadError < ::WinRM::FS::WinRMFSError; end
