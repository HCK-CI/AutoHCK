#!/usr/bin/env ruby
# frozen_string_literal: true

Dir.chdir(File.dirname(__dir__))

require_relative '../lib/auto_hck'

module AutoHCK
  # rubocop:disable Metrics/BlockLength
  run do
    # rubocop:enable Metrics/BlockLength

    require 'optparse'

    # command line parser class
    # rubocop:disable Lint/ConstantDefinitionInBlock
    class CLI
      # rubocop:enable Lint/ConstantDefinitionInBlock

      attr_accessor :debug, :diff_file, :trigger_file, :trigger_keys

      def initialize
        @parser = create_parser
      end

      def parse(args)
        @parser.order!(args)
      end

      def create_parser
        OptionParser.new do |parser|
          parser.banner = 'Usage: triggers_check [--help] <options>'
          parser.separator ''
          define_options(parser)
          parser.on_tail('-h', '--help', 'Show this message') do
            puts parser
            exit
          end
        end
      end

      def define_options(parser)
        debug_option(parser)
        diff_option(parser)
        triggers_option(parser)
        trigger_keys_option(parser)
      end

      def debug_option(parser)
        parser.on('--debug', TrueClass,
                  'Printing debug information (optional)') do |debug|
          @debug = debug
        end
      end

      def diff_option(parser)
        parser.on('--diff <diff_file>', String,
                  'Path to text file containing a list of changed source files') do |diff_file|
          @diff_file = diff_file
        end
      end

      def triggers_option(parser)
        parser.on('--triggers <trigger_file>', String,
                  'Path to text file containing a list of triggers') do |trigger_file|
          @trigger_file = trigger_file
        end
      end

      def trigger_keys_option(parser)
        parser.on('--trigger_keys <trigger_keys>', Array,
                  'List of trigger keys',
                  &method(:trigger_keys=))
      end
    end

    cli = CLI.new
    cli.parse(ARGV)

    @logger = MonoLogger.new($stderr)
    @logger.level = cli.debug ? 'DEBUG' : 'INFO'

    diff_checker = AutoHCK::DiffChecker.new(@logger, cli.trigger_keys, cli.diff_file, cli.trigger_file)
    if diff_checker.trigger?
      @logger.info('Some drivers are changed, running tests')
      exit 0
    else
      @logger.info("Any drivers aren't changed, not running tests")
      exit 1
    end
  end
end
