#!/usr/bin/env ruby

require 'filelock'

require './lib/project'
require './lib/client'
require './lib/studio'
require './lib/cli'

STUDIO = 'st'.freeze
CLIENT1 = 'c1'.freeze
CLIENT2 = 'c2'.freeze

cli = CLI.new
options = cli.parse(ARGV)

ENV.store 'LC_ALL', 'en_US.UTF-8'

at_exit do
  @project.abort if @project
  @client1.abort if @client1
  @client2.abort if @client2
  @studio.abort if @studio
  @project.close_virthck if @project
end

@sigterm = false
Signal.trap('TERM') do
  if @sigterm
    @project.logger.warn('SIGTERM(2) received, aborting...')
    Signal.trap('TERM') do
      @project.logger.warn('SIGTERM(*) received, ignoring...')
    end
    exit
  else
    @sigterm = true
    @project.logger.warn('SIGTERM(1) recieved, aborting if another SIGTERM is'\
                         ' received in the span of the next one second')
    Thread.new do
      sleep 1
      @sigterm = false
    end
  end
end

begin
  @project = Project.new(options)
  @studio = Studio.new(@project, STUDIO)
  @client1 = Client.new(@project, @studio, CLIENT1)
  @client2 = Client.new(@project, @studio, CLIENT2)
  Filelock '/var/tmp/virthck.lock', timeout: 0 do
    @studio.run
    @studio.connect
    @studio.update_filters
    @studio.create_pool
    @studio.create_project
    @client1.run
    @client2.run
    @client1.setup_driver
    @client2.setup_driver
    @client1.add_target_to_project
    @client2.add_target_to_project
  end
  @client1.add_support(@client2)
  @client1.run_tests
  @client1.create_package
rescue StandardError => e
  @project.log_exception(e, 'fatal') if @project
  raise e
end
