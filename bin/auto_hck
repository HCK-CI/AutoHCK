#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'dotenv/load'
require './lib/config/sentry'

begin
  require 'filelock'
  require './lib/auxiliary/resource_scope'
  require './lib/cli'
  require './lib/project'
  require './lib/trap'

  # AutoHCK module
  module AutoHCK
    cli = CLI.new
    cli.parse(ARGV)

    ENV.store 'LC_ALL', 'en_US.UTF-8'

    AUTOHCK_RETRIES = 5

    Trap.init_traps(%w[TERM INT])

    Thread.abort_on_exception = true
    Thread.report_on_exception = false

    ResourceScope.open do |scope|
      @project = Project.new(scope, cli)
      Trap.project = @project
      @project.run if @project.prepare
    rescue StandardError => e
      Signal.trap('TERM') do
        @project.logger.warn('SIGTERM(*) received, ignoring...')
      end
      Sentry.capture_exception(e)
      @project.log_exception(e, 'fatal')
      @project.handle_error
      exit(1)
    end
  rescue AutoHCKInterrupt
    exit false
  end
rescue StandardError => e
  Sentry.capture_exception(e)
  raise
end
