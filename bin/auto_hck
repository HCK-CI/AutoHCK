#!/usr/bin/env ruby
# frozen_string_literal: true

Dir.chdir(File.dirname(__dir__))

require_relative '../lib/auto_hck'

module AutoHCK
  run do
    cli = CLI.new
    cli.parse(ARGV)

    ENV.store 'LC_ALL', 'en_US.UTF-8'

    Trap.init_traps(%w[TERM INT])

    Thread.abort_on_exception = true
    Thread.report_on_exception = false

    ResourceScope.open do |scope|
      @project = Project.new(scope, cli)
      Trap.project = @project
      @project.run if @project.prepare
    rescue StandardError => e
      Signal.trap('TERM') do
        @project&.logger&.warn('SIGTERM(*) received, ignoring...')
      end
      Sentry.capture_exception(e)
      if @project
        @project.log_exception(e, 'fatal')
        @project.handle_error
      else
        estack = e.backtrace.map { |line| "\n   -- #{line.rstrip}" }.join
        warn "fatal: (#{e.class}) #{e.message}#{estack}"
      end
      exit(1)
    end
  end
end
